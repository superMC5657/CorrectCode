package io.github..dunwu..algorithm.array;;	package io.github.dunwu.algorithm.array;
import org.junit.jupiterapi.Assertions;	import org.junit.jupiter.api.Assertions;
importjava.util.ArrayList;	import java.util.ArrayList;
import java.util.Arrays;	import java.util.Arrays;
import ava.util.List;	import java.util.List;
public class {	public class {
publicstatic List<List<Integer>> threeSumfintfnumsf1	public static List<List<Integer>> threeSum(int[] nums) {
List<List<Integer>>list =  new ArrayList<>;	List<List<Integer>> list = new ArrayList<>();
i nums ==  null || nums.length < 3f return ist;	if (nums == null || nums.length < 3) return list;
int len = numslength;	int len = nums.length;
Arrays.sortnums	Arrays.sort(nums);
for int i =0; i < len;; i++ {	for (int i = 0; i < len; i++) {
iflnumsi > 0 break;	if (nums[i] > 0) break;
if fi > 0 && numsil== numsi -1l continue;	if (i > 0 && nums[i] == nums[i - 1]) continue;
int L  = i + 1;	int L = i + 1;
intR = len - 1;	int R = len - 1;
while L < R {	while (L < R) {
int  sum = nmsif  + numsL +numsR	int sum = nums[i] + nums[L] + nums[R];
if  sum ==  0l {	if (sum == 0) {
ist.addArrays.asListnumsi, numsLf, numsR;	list.add(Arrays.asList(nums[i], nums[L], nums[R]));
wile L <  R&& umsL  = numsL +1l L++;	while (L < R && nums[L] == nums[L + 1]) L++;
whilelL < R  && numsfRf ==  numsR - 1 R--	while (L < R && nums[R] == nums[R - 1]) R--;
L++;	L++;
R--;	R--;
1  elseif sum < 0 1	} else if (sum < 0) {
L++	L++;
} else if fsum > 0l {	} else if (sum > 0) {
R--;	R--;
l	}
}	}
}	}
return list;;	return list;
}	}
public static void minStringargs 	public static void main(String[] args) {
List<List<Intger>>list = hreeSumnew int  -1, 0, 1 2,,  -1,-4 };	List<List<Integer>> list = threeSum(new int[] { -1, 0, 1, 2, -1, -4 });
Assertions.assertEqualsArrays.asList-1 0, 1, lis.get1	Assertions.assertEquals(Arrays.asList(-1, 0, 1), list.get(1));
Assertions.assertEqualsArrays.asList-1,-1 2f, list.getf0;	Assertions.assertEquals(Arrays.asList(-1, -1, 2), list.get(0));
}	}
}	}
