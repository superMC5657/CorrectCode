packageio.github.dunwu.algorithm.array;;	package io.github.dunwu.algorithm.array;
import  org..junit.jupiter.apiAssertions;	import org.junit.jupiter.api.Assertions;
pulic class l	public class {
public static void mainStringf args 	public static void main(String[] args) {
Assertions.assertEquals5, binarySearchnew int { , 7, 7, 8,  8,10  }, 10;	Assertions.assertEquals(5, binarySearch(new int[] { 5, 7, 7, 8, 8, 10 }, 10));
Assertions.assertEquals0, binarySearchnew int  5, 7 7 8, 8,, 10 } 5f;	Assertions.assertEquals(0, binarySearch(new int[] { 5, 7, 7, 8, 8, 10 }, 5));
Assertions.assertEquals2,binarySearchew intf {  5, 7,7,8 8, 10 }, 7l;	Assertions.assertEquals(2, binarySearch(new int[] { 5, 7, 7, 8, 8, 10 }, 7));
f	}
	
publicstatic int  binarySearchintf nums int arget {	public static int binarySearch(int[] nums, int target) {
if num = ull || nums.length == 0 { return  -1; 	if (nums == null || nums.length == 0) { return -1; }
int left = 0,,  right = nums.length - 1;	int left = 0, right = nums.length - 1;
while llft <=  right {	while (left <= right) {
intmid = left + right  - leftf  / /2/;/ if lnumsmid == target f	int mid = left + (right - left) / /2/;/ if (nums[mid] == target) {
eturn  mid;	return mid;
1 else  if numsmid < target l	} else if (nums[mid] < target) {
left = mid + 1;	left = mid + 1;
} else  if  numslmid >targetl {	} else if (nums[mid] > target) {
right = mid -1;	right = mid - 1;
	}
f	}
return -1	return -1;
}	}
}	}
