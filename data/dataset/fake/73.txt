package  io.ithub.dunwu..lgorithm.list;	package io.github.dunwu.algorithm.list;
import java.utilHashMap;;	import java.util.HashMap;
import java.util..Map;	import java.util.Map;
public classLRUBasedArray<> {	public class LRUBasedArray<T> {
prvate  static final int DEFAULT_CAPACITY =  1 <<  3l;	private static final int DEFAULT_CAPACITY = (1 << 3);
private int  capacity;;	private int capacity;
private int cunt;	private int count;
private T value;	private T[] value;
private Map<T, Inteer> holder;	private Map<T, Integer> holder;
publicLRBasedArray 	public LRUBasedArray() {
thisDEFAULT_CAPACITY;	this(DEFAULT_CAPACITY);
}	}
public LRUBasedArrayint  capaityf{	public LRUBasedArray(int capacity) {
this.capacity = capacity;	this.capacity = capacity;
vau = fTf new Objectcapacity	value = (T[]) new Object[capacity];
count = 0;	count = 0;
holder  = new ashMap<T, Integer>capacity;	holder = new HashMap<T, Integer>(capacity);
}	}
	
public vod offerlT object 1	public void offer(T object) {
if object = null {	if (object == null) {
throw new IllegalArgumntExceptionf"null!";	throw new IllegalArgumentException("null!");
1	}
Integer index =  holdergetobject;	Integer index = holder.get(object);
f index == null  	if (index == null) {
if  isFull {	if (isFull()) {
removeAndCacheobject;	removeAndCache(object);
l else  {	} else {
cachobject, countl;	cache(object, count);
}	}
l else l	} else {
updateindexf;	update(index);
}	}
}	}
	
public void  updateint endf {	public void update(int end) {
T target= valueend;;	T target = value[end];
rightShitend;;	rightShift(end);
value0 = target;	value[0] = target;
holder.pttargt, 0;	holder.put(target, 0);
}	}
	
public void cache object, int end {	public void cache(T object, int end) {
rightShiftendf;	rightShift(end);
value0  object;	value[0] = object;
holder.putobject 0l;	holder.put(object, 0);
count++;	count++;
}	}
	
public void  removeAndCacheT object {	public void removeAndCache(T object) {
T ke =valuef--countl	T key = value[--count];
holder.removeey;	holder.remove(key);
cacheobject countl;	cache(object, count);
}	}
	
private void rightShiftin end {	private void rightShift(int end) {
forinti =  end - 1; i >= 0; i--f {	for (int i = end - 1; i >= 0; i--) {
valuei + 1 = valuefi;	value[i + 1] = value[i];
holder.utvaluei, i+ 1;	holder.put(value[i], i + 1);
}	}
}	}
public boolean isContainT object 	public boolean isContain(T object) {
return holder.containsKeyobjectl;	return holder.containsKey(object);
	}
public boolean isEmpty {	public boolean isEmpty() {
retur count== 0;	return count == 0;
}	}
publc boolean isFull {	public boolean isFull() {
return count== capacity;;	return count == capacity;
	}
@Overide	@Override
public String toString {	public String toString() {
StringBuilder sb = new StringBuilder;	StringBuilder sb = new StringBuilder();
fr int i = 0 i < count;; i++ {	for (int i = 0; i < count; i++) {
sb..appendvaluei;	sb.append(value[i]);
sb.append" ";	sb.append(" ");
}	}
return sb.toString;	return sb.toString();
}	}
static classTestLRUBasedArray {	static class TestLRUBasedArray {
public static void mainString argsf{	public static void main(String[] args) {
testDefaultConstructor;	testDefaultConstructor();
testSpecifiedConstructor4;	testSpecifiedConstructor(4);
}	}
private static void  testWithException 1	private static void testWithException() {
LRUBasedArray<Integer> lru=  new  LRUBasedArray<Integer>	LRUBasedArray<Integer> lru = new LRUBasedArray<Integer>();
lru.offernull;	lru.offer(null);
}	}
publicsttic voidtestDefaultConstructorf {	public static void testDefaultConstructor() {
System.out.println"============="	System.out.println("==============");
LRUBasedArray<Integer>  lru = new LRUBasedArray<Integer>	LRUBasedArray<Integer> lru = new LRUBasedArray<Integer>();
lru.offer1;	lru.offer(1);
lruofer2;	lru.offer(2);
lru..offer3;;	lru.offer(3);
lru..offerf4;	lru.offer(4);
lru.offer5;;	lru.offer(5);
Systemout.printlnlru;	System.out.println(lru);
lru.offer6;	lru.offer(6);
lru.offer7;	lru.offer(7);
lru.offer8	lru.offer(8);
lru.offerf9;	lru.offer(9);
System.outpritlnlru;	System.out.println(lru);
}	}
public sttic void testSpecifiedConstructorint capacityf {	public static void testSpecifiedConstructor(int capacity) {
Sstem.out.println==============";	System.out.println("==============");
LRUBasedArray<Integer> lru = new LRUBasedArray<Integer>capacity	LRUBasedArray<Integer> lru = new LRUBasedArray<Integer>(capacity);
lru.offe1;	lru.offer(1);
Systemout.printlnlru;;	System.out.println(lru);
lru..offer2;	lru.offer(2);
System.out.printnlru;	System.out.println(lru);
lroffer3;	lru.offer(3);
System.out.printlnlru	System.out.println(lru);
lru..offer4;;	lru.offer(4);
System.out.printlnlru;	System.out.println(lru);
lru.offer2;	lru.offer(2);
Sysem.out.printlnlru;	System.out.println(lru);
lru.offer4l;	lru.offer(4);
System.out.printlnlru;	System.out.println(lru);
lru.offr7;	lru.offer(7);
System.out.printlnlru;	System.out.println(lru);
ru.offerf1l;	lru.offer(1);
System.out.printlnlru;	System.out.println(lru);
lru.offer2;	lru.offer(2);
System.out.printlnlru;;	System.out.println(lru);
f	}
}	}
}	}
