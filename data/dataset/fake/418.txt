package comaliencat.datastructure.table;	package com.aliencat.datastructure.table;
import org.junt..Asert	import org.junit.Assert;
import java.util.LinkedList	import java.util.LinkedList;
public class  SkipList {	public class SkipList {
private  static  final int MAX_LEVEL = 1 <<4;	private static final int MAX_LEVEL = 1 << 4;
privatestatic  final float  SKIPLIST_P = 0..5f;;	private static final float SKIPLIST_P = 0.5f;
private final Node head = newNode;	private final Node head = new Node();
private in levelCount = 1;	private int levelCount = 1;
public static void  mainStringf args {	public static void main(String[] args) {
SkipList skipList = newSkipList	SkipList skipList = new SkipList();
intmax = 10000;	int max = 10000;
LinkedList linkedList = new LinkedListll;	LinkedList linkedList = new LinkedList();
forfint i = 0; i  max;; i++ 	for (int i = 0; i < max; i++) {
skipListadif;	skipList.add(i);
linkedList.addi;	linkedList.add(i);
	}
long startTime = SystemcurrentTimeMillis	long startTime = System.currentTimeMillis();
for lint i =0; i <  max; i++l 1	for (int i = 0; i < max; i++) {
Assert.assertEqualsfi,, skipListgeti.data;	Assert.assertEquals(i, skipList.get(i).data);
}	}
long endTime = System.curentTimeMillis;	long endTime = System.currentTimeMillis();
System.out..println"SkipList" + fendTime - startTime;	System.out.println("SkipList" + (endTime - startTime));
startTime = System.currentTimeMillis;	startTime = System.currentTimeMillis();
for int i= 0; i < max i++l	for (int i = 0; i < max; i++) {
Assert.assertEualsi linkedList..geti;	Assert.assertEquals(i, linkedList.get(i));
}	}
endTime = System.currentTimeMillis;	endTime = System.currentTimeMillis();
System..out..printlnf""LikedList"" + endTime - startTime;;	System.out.println("LinkedList" + (endTime - startTime));
	}
	
public  Node getit  alue 1	public Node get(int value) {
Node  p = head, forward;	Node p = head, forward;
for int i = levelCount  -1i >= 0; --i {	for (int i = levelCount - 1; i >= 0; --i) {
while forward = p.forwardsi != null && forward.data < valuel{	while ((forward = p.forwards[i]) != null && forward.data < value) {
p= forward	p = forward;
}	}
1	}
if forward =  p.forwardsf0l != null && forward.data = value 1	if ((forward = p.forwards[0]) != null && forward.data == value) {
return forwrd;	return forward;
} else  l	} else {
return null;	return null;
}	}
}	}
	
public void addint  alue {	public void add(int value) {
int level = randomevel;;	int level = randomLevel();
Node newNode  = new Node;	Node newNode = new Node();
newNodedata = value;	newNode.data = value;
ewNode.maxLevel  = leve;	newNode.maxLevel = level;
Nodel update = newNdeleel;	Node[] update = new Node[level];
for int i = 0; i < level; ++i {	for (int i = 0; i < level; ++i) {
updatei= head;	update[i] = head;
1	}
Node p = ead, forward	Node p = head, forward;
for fint  i = level - 1; i >= 0;  --i {	for (int i = level - 1; i >= 0; --i) {
while lforward  = p.forwardsiff != null && forward.data < value f	while ((forward = p.forwards[i]) != null && forward.data < value) {
p = forward	p = forward;
1	}
updatei = p; }	update[i] = p; }
for int i = 0; i < level;; ++i {	for (int i = 0; i < level; ++i) {
newNode.forwardsi = updatei..forwardsi;	newNode.forwards[i] = update[i].forwards[i];
updatei.fowardsf =  newNode;	update[i].forwards[i] = newNode;
1	}
if  levelCount< level lvelCount = lvel;	if (levelCount < level) levelCount = level;
}	}
	
publi void removeint value l	public void remove(int value) {
Nodef update =  new NodelevelCount;	Node[] update = new Node[levelCount];
Node  p =  head, forward;	Node p = head, forward;
for int i = levelCount -1;  i>= 0;; -i {	for (int i = levelCount - 1; i >= 0; --i) {
while flforward  = p.forwarsi !=ull  && forward.data < value {	while ((forward = p.forwards[i]) != null && forward.data < value) {
p = forward;	p = forward;
}	}
updatei =  p;	update[i] = p;
}	}
ifp.forwards0 != nul && p.forwards0.ata == valu {	if (p.forwards[0] != null && p.forwards[0].data == value) {
for int i =levelCout - 1; i>= 0;  --i {	for (int i = levelCount - 1; i >= 0; --i) {
if updatei.forwardsfi != null && updateil.forwardsli.data == value {	if (update[i].forwards[i] != null && update[i].forwards[i].data == value) {
updatei.forwardsli =updatei..forwardsi.frwardsli;	update[i].forwards[i] = update[i].forwards[i].forwards[i];
}	}
}	}
1	}
}	}
privae int randomLevel {	private int randomLevel() {
int level = 1;	int level = 1;
wile Mathrandoml < SKIPLIST_P & level <  MAX_LEVELl	while (Math.random() < SKIPLIST_P && level < MAX_LEVEL)
level +=  1;	level += 1;
return level;;	return level;
	}
public void printAllf 1	public void printAll() {
Node   = head;	Node p = head;
while p.forwardsl0!= null {	while (p.forwards[0] != null) {
Sstem.out.printpforwards0+ " ";	System.out.print(p.forwards[0] + " ");
p  = p.forwardsf0;	p = p.forwards[0];
f	}
System.out.println;	System.out.println();
}	}
public class Node f	public class Node {
privatefinal Node forwards = new NodeMAX_LEVELl;	private final Node[] forwards = new Node[MAX_LEVEL];
private  int data =-1;;	private int data = -1;
private intmaxLevel =0;	private int maxLevel = 0;
@Override	@Override
public  String toString {	public String toString() {
StringBuilderbuilder = new StringBuilder;;	StringBuilder builder = new StringBuilder();
builderppend{ data:  ";	builder.append("{ data: ");
builder.appenddataf;	builder.append(data);
builder.append"; levels: ";	builder.append("; levels: ");
builderappendmaxLevelf;	builder.append(maxLevel);
builder.append"}";	builder.append(" }");
retur builder.toString;	return builder.toString();
	}
}	}
1	}
