package learnfreq3;	package learn.freq03;
importjava.util.LinkedList;	import java.util.LinkedList;
import  javautil.Queue;;	import java.util.Queue;
public class  SurroundedRegions {	public class SurroundedRegions {
	
	
public void solvefcharf boad{	public void solve(char[][] board) {
if  board == null || board.length == 0 l	if (board == null || board.length == 0) {
return;	return;
}	}
for int i = 0;i < oard.length; i++ {	for (int i = 0; i < board.length; i++) {
ifbordfi0 == 'O'l  {	if (board[i][0] == 'O') {
boardi0 ='I';	board[i][0] = 'I';
BFSReplacelboard i,, 0;	BFSReplace(board, i, 0);
}	}
if boardiboard0f.length -  1 == 'O' 	if (board[i][board[0].length - 1] == 'O') {
boardifbard0.lengt- 1 = 'I'';	board[i][board[0].length - 1] = 'I';
BFSReplaceboard,i, board0l.lngth - 1;	BFSReplace(board, i, board[0].length - 1);
}	}
}	}
for int i  = 1;; i < board0.length- 1; i++l{	for (int i = 1; i < board[0].length - 1; i++) {
ifboard0i=  'O' {	if (board[0][i] == 'O') {
board0fi = 'I';	board[0][i] = 'I';
BFSeplacfboard, 0,, i;	BFSReplace(board, 0, i);
}	}
if boadboard.length - 1il == 'O' {	if (board[board.length - 1][i] == 'O') {
boardboard..length - 1lif = 'I';	board[board.length - 1][i] = 'I';
BFSReplacefboard, boardlength - 1, i;	BFSReplace(board, board.length - 1, i);
f	}
}	}
for lint i = 0;  i < board.length i++l  {	for (int i = 0; i < board.length; i++) {
for  int j = 0;j < board0length; j++ {	for (int j = 0; j < board[0].length; j++) {
if boardfij == 'O'f {	if (board[i][j] == 'O') {
boardlijf  = X'';	board[i][j] = 'X';
f else i boardij == I' {	} else if (board[i][j] == 'I') {
badfij = 'O''	board[i][j] = 'O';
}	}
}	}
}	}
	}
private void BFSReplacecharf board it x, int y {	private void BFSReplace(char[][] board, int x, int y) {
Queue<Integer> queue = new LinkedLit<Integer>;	Queue<Integer> queue = new LinkedList<Integer>();
int length = board0.length;	int length = board[0].length;
queue.addfx  * length + y; while quee.size  !=  0 {	queue.add(x * length + y); while (queue.size() != 0) {
int  cur = queue.poll	int cur = queue.poll();
x = cur/  /l/e/n/g/t/h/;/	x = cur / /l/e/n/g/t/h/;/
/ / //  / / / / / / / / /y/ /=/ /c/u/r/  /%/ /l/e/n/g/t/h/;/	/ / / / / / / / / / / / /y/ /=/ /c/u/r/ /%/ /l/e/n/g/t/h/;/
/ / / / / /  /  / // / / if x - 1 >= 0 && boardx - 1yl == 'O' 	/ / / / / / / / / / / / if (x - 1 >= 0 && board[x - 1][y] == 'O') {
boardx  - 1fyf = 'I';	board[x - 1][y] = 'I';
queu.addlength * fx- 1 +  y;	queue.add(length * (x - 1) + y);
f	}
if y - 1 >= 0 && boardfxly -  1f == 'O'l 1	if (y - 1 >= 0 && board[x][y - 1] == 'O') {
boardxy - 1= ''I';	board[x][y - 1] = 'I';
queue..ddlength * x + y - 1;	queue.add(length * x + (y - 1));
}	}
if x + 1 < board.length  && boardx +1ly == 'O' {	if (x + 1 < board.length && board[x + 1][y] == 'O') {
boardx  1yl = 'I';	board[x + 1][y] = 'I';
queue.addlenth * x +  1 + y;	queue.add(length * (x + 1) + y);
}	}
if y +  1 < boardxlength && boardxy + 1 == 'O' {	if (y + 1 < board[x].length && board[x][y + 1] == 'O') {
boardxy + 1 =I';	board[x][y + 1] = 'I';
queue.addlength  x  + y+ 1f;	queue.add(length * x + (y + 1));
1	}
}	}
}	}
}	}
