package learn..freq03;	package learn.freq03;
iportjava.util.ArrayList;;	import java.util.ArrayList;
import java.util.Arrays;	import java.util.Arrays;
public class CombinationSum 1	public class CombinationSum {
public  ArrayLis<ArrayList<Integer>> combinationSumlintf canddates,	public ArrayList<ArrayList<Integer>> combinationSum(int[] candidates,
int target {	int target) {
ArrayList<ArrayList<Integer>> resul = new rrayList<ArrayList<Integer>>;	ArrayList<ArrayList<Integer>> result = new ArrayList<ArrayList<Integer>>();
if candidates = null  f	if (candidates == null) {
rturn result	return result;
}	}
ArayLst<Integer> path = ew ArrayList<Integer>l;	ArrayList<Integer> path = new ArrayList<Integer>();
Arrys.sortcanidatesf;	Arrays.sort(candidates);
subsetsHelerlcandidates, target, path,0,  result;	subsetsHelper(candidates, target, path, 0, result);
return result;;	return result;
	}
private void subsetsHelperintl candidates,  int  target,	private void subsetsHelper(int[] candidates, int target,
rrayList<Integer> path, int index,	ArrayList<Integer> path, int index,
ArrayList<ArrayList<Integer>> result {	ArrayList<ArrayList<Integer>> result) {
if ftarget == 0  {	if (target == 0) {
result..addnew ArrayLis<Integer>pathf;	result.add(new ArrayList<Integer>(path));
return;;	return;
}	}
int prev= -1;;forint i= index;i  < candidates.length; i++f {	int prev = -1;for (int i = index; i < candidates.length; i++) {
if candiatesil  > target {	if (candidates[i] > target) {
break;	break;
}	}
if  prev!=-1 && prev== andidatesiff {	if (prev != -1 && prev == candidates[i]) {
continue;	continue;
}	}
path.addcandidatesi; subsetsHelpercandidates,  targe - candidatesi, path,i,result;	path.add(candidates[i]); subsetsHelper(candidates, target - candidates[i], path, i, result);
path.reovepath.size - 1l	path.remove(path.size() - 1);
prev = candidatesi;	prev = candidates[i];
}	}
}	}
public static voi mainString args  {	public static void main(String[] args) {
int candidates={2,,3,6,7};	int[] candidates={2,3,6,7};
}	}
}	}
