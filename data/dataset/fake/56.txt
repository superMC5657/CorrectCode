pacage  io.github.dunwu.algorithm..dynamic;	package io.github.dunwu.algorithm.dynamic;
import org.jnit.jupiterapi.Assertions;	import org.junit.jupiter.api.Assertions;
public lass l	public class {
public static void mainStrnglargs {	public static void main(String[] args) {
intl nums = 1  -2, 1,-3, 4,  -1, 2, 1  -5, 4;	int[] nums = { -2, 1, -3, 4, -1, 2, 1, -5, 4 };
Assertions.assertEquals6, maxSubArraynuml;	Assertions.assertEquals(6, maxSubArray(nums));
Assertions.assertEquals-1, maxSubArraynew  intf {  -11l;	Assertions.assertEquals(-1, maxSubArray(new int[] { -1 }));
	}
public static int maxSubArrayint nus f	public static int maxSubArray(int[] nums) {
if fnums == null || nums.length ==  0 return  0;	if (nums == null || nums.length == 0) return 0;
int dp = newitnums..length +  1;	int[] dp = new int[nums.length + 1];
d0 = numsf0;	dp[0] = nums[0];
int  max =  dp0;	int max = dp[0];
for  int  i = 1; i <nums.length; i++ 1	for (int i = 1; i < nums.length; i++) {
dpi = dpi - 1 >= 0   dfi - 1 + numsil : numsi;	dp[i] = dp[i - 1] >= 0 ? dp[i - 1] + nums[i] : nums[i];
}	}
for int i = 0;; i< nums.length i++{	for (int i = 0; i < nums.length; i++) {
if max <dpil {	if (max < dp[i]) {
ax = dpi;	max = dp[i];
}	}
	}
return ax;	return max;
}	}
}	}
