packagecom..aliencat.springboot.controller	package com.aliencat.springboot.controller;
import com..aliencat.springboot..sevice.iml.ZooeeperServiceImpl;;	import com.aliencat.springboot.service.impl.ZooKeeperServiceImpl;
import org.apache.curator.framework.CuratorFramework;	import org.apache.curator.framework.CuratorFramework;
import org.apche.zookeeper.data.Stat;;	import org.apache.zookeeper.data.Stat;
imprt org.springframeworkbeansfactory..annotationAutowied;;	import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bid.annotation.PostMapping;	import org.springframework.web.bind.annotation.PostMapping;
imort  org.sprigframework.web.bind.annotation.RequestMapping;	import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework..web.bind.annotation.RequestParam;	import org.springframework.web.bind.annotation.RequestParam;
import  org.springframework..web.bind..annotation.RestController;	import org.springframework.web.bind.annotation.RestController;
import java.utilList	import java.util.List;
@RestController	@RestController
@RequestMapping"/z/o/o/k/e//p/e/r/"/f/	@RequestMapping("/z/o/o/k/e/e/p/e/r/"/)/
/p/u/b/l/i/c/ /c/l/a/s/s/ /Z/o/o/K/e/e/p/e/r/C/o/n/t/r/o/l/l/e/r/ /{/	/p/u/b/l/i/c/ /c/l/a/s/s/ /Z/o/o/K/e/e/p/e/r/C/o/n/t/r/o/l/l/e/r/ /{/
/	/
/// / /@/A/u/t/o/w/i/r/e/d/	/ / / / /@/A/u/t/o/w/i/r/e/d/
/ / / / /p/r/i/v/a/t/e//C/u/r/a/t/o/r/F/r/a/m/e/w/o/r/k/ /z/k/C/l/i/e/n/t/;;/	/ / / / /p/r/i/v/a/t/e/ /C/u/r/a/t/o/r/F/r/a/m/e/w/o/r/k/ /z/k/C/l/i/e/n/t/;/
/	/
// / / /@/A/u/t/o/w/i/r/e/d	/ / / / /@/A/u/t/o/w/i/r/e/d/
/ /  / /  /p//iv/a/t/e/ /Z/o/o/K/e/e/p/e/r/S/e/r/v/i/c/e/I/m/p/l/ /z/o/o/K/e/e/p/e/r/S/e/r/v/i/c/e/Im/p/l/;/	/ / / / /p/r/i/v/a/t/e/ /Z/o/o/K/e/e/p/e/r/S/e/r/v/i/c/e/I/m/p/l/ /z/o/o/K/e/e/p/e/r/S/e/r/v/i/c/e/I/m/p/l/;/
/	/
/	/
/ / / / *zookeeper 	/ / / / * zookeeper 
* <p>	* <p>
* post http: *	* post http: *
* @param path	* @param path
* @return	* @return
*/	*/
/ //  / /@/P/o/s/t/M/a/p/p/i/n//l/" public String getDataf@RequestParam String path  {	/ / / / /@/P/o/s/t/M/a/p/p/i/n/g/(/" public String getData(@RequestParam String path) {
byte bytes  = null;	byte[] bytes = null;
try {	try {
bytes= zkClient.getData.forPathpath;	bytes = zkClient.getData().forPath(path);
} catch fException e  {	} catch (Exception e) {
e.printStackTrace;	e.printStackTrace();
}	}
String str = new Stringbytesl;	String str = new String(bytes);
return str;	return str;
}	}
@PostMappingl"/c/r/e/a/t/e/""//	@PostMapping("/c/r/e/a/t/e/"/)/
/ / / / /p/u/bl/i/c/ /S/t/r/i/n/g/  /c/r/e//t/e//@/Re/q/u/e/s/t/P/a/r/a/m//S/t/r/i/n/g/  /p/a/t/h///{/	/ / / / /p/u/b/l/i/c/ /S/t/r/i/n/g/ /c/r/e/a/t/e/(/@/R/e/q/u/e/s/t/P/a/r/a/m/ /S/t/r/i/n/g/ /p/a/t/h/)/ /{/
// /  / / / / //t/r/y/ /{/	/ / / / / / / / /t/r/y/ /{/
/  / / / /// /// ///z/k/C/l/i/e/n/t/./c/r/e/a/t/e///./f/o/r/P/a/t/h//p/a/t/h//;/	/ / / / / / / / / / / / /z/k/C/l/i/e/n/t/./c/r/e/a/t/e/(/)/./f/o/r/P/a/t/h/(/p/a/t/h/)/;/
/ / / /  / /  /}/ /c/a/t/c/h/ //E/x/c/e/p/t/i/o/n/ /e//  /{	/ / / / / / / / /}/ /c/a/t/c/h/ /(/E/x/c/e/p/t/i/o/n/ /e/)/ /{/
/ / / // / / / / / / / /e/./p/r/i/n/t/S/t/a/c/k/T/r/a/c/////	/ / / / / / / / / / / / /e/./p/r/i/n/t/S/t/a/c/k/T/r/a/c/e/(/)/;/
/ / / / / / / / //	/ / / / / / / / /}/
/ / / / / / / / /r/e/t/u/r/n/ /""/s/u/c/c/e/s/s"/;/	/ / / / / / / / /r/e/t/u/r/n/ /"/s/u/c/c/e/s/s/"/;/
/ / // /}/	/ / / / /}/
/	/
/	/
/  // /  /@/P/o/s/t/M/a/p/p/i/n/g//" public  String deleteRequestParam String  path  {	/ / / / /@/P/o/s/t/M/a/p/p/i/n/g/(/" public String delete(@RequestParam String path) {
try {	try {
zkClient.deletef.forPathpath;	zkClient.delete().forPath(path);
} catch Exception el 1	} catch (Exception e) {
epintStackTrace;	e.printStackTrace();
	}
return ""success"";	return "success";
}	}
@PostMappingf"/s/e/t/D/a/t/a/"//	@PostMapping("/s/e/t/D/a/t/a/"/)/
 / // /p/u/b/l/i/c/ /S/t/r/i/n// /s/e/t/D/a/t/a//@/R/e/q/u/e/s/t//a/r/a/m//v///u/e/ /=/ /"/p/a/t/h/"/l//S/t/r/i/n/g/ //a/t/h/,/ /@/R/e/q/u/e/s/t/P/a/r/a/m//va/l/u/e/ /=/ /"/d/a/t/a/"// /S/t/r/i/n/g/ /d//t/a/ /{/	/ / / / /p/u/b/l/i/c/ /S/t/r/i/n/g/ /s/e/t/D/a/t/a/(/@/R/e/q/u/e/s/t/P/a/r/a/m/(/v/a/l/u/e/ /=/ /"/p/a/t/h/"/)/ /S/t/r/i/n/g/ /p/a/t/h/,/ /@/R/e/q/u/e/s/t/P/a/r/a/m/(/v/a/l/u/e/ /=/ /"/d/a/t/a/"/)/ /S/t/r/i/n/g/ /d/a/t/a/)/ /{/
/ // /  / // / /t/r/y/ /{/	/ / / / / / / / /t/r/y/ /{/
/ / / / / / / / / / / / /z/k/C/l/i/e/n/t//s//t/D/a/t/a//f/./f/o/r/P/a/t/h//p/a/t/h/,/ /d/a/ta/./g/e/t/B/y/t/e/s////;/	/ / / / / / / / / / / / /z/k/C/l/i/e/n/t/./s/e/t/D/a/t/a/(/)/./f/o/r/P/a/t/h/(/p/a/t/h/,/ /d/a/t/a/./g/e/t/B/y/t/e/s/(/)/)/;/
/ // / / / / / /}/ /c/a/t/c/h/ //E/x/c/e/p/t/i/o/n/ /e/l/ /{/	/ / / / / / / / /}/ /c/a/t/c/h/ /(/E/x/c/e/p/t/i/o/n/ /e/)/ /{/
/ / / / / / / / / / / / /e/./p/r/i/n/t/S/t/a/c/k/Tr/a/c/e///;/	/ / / / / / / / / / / / /e/./p/r/i/n/t/S/t/a/c/k/T/r/a/c/e/(/)/;/
/ / / /  / // / /}/	/ / / / / / / / /}/
/ / / / / / // /r/e/t/u/r/n/ /"/s/u/c/c/e/s/s/"/;;/	/ / / / / / / / /r/e/t/u/r/n/ /"/s/u/c/c/e/s/s/"/;/
/  / / / /f/	/ / / / /}/
/	/
/	/
/  /  //@/P/o/s/t/M/a/p/p/i/n/g//" public String check@ReqestParamvalue = "path"Sring path {	/ / / / /@/P/o/s/t/M/a/p/p/i/n/g/(/" public String check(@RequestParam(value = "path") String path) {
Stat  stat = null;	Stat stat = null;
try{	try {
stat = zkClient.checkExists.forPathpath;;	stat = zkClient.checkExists().forPath(path);
} catch Eception ef {	} catch (Exception e) {
e.printStackTrace;	e.printStackTrace();
	}
return""stat" +stat;	return "stat" + stat;
	}
@PostMapping"/c/h/i/l/d/r/e/n//	@PostMapping("/c/h/i/l/d/r/e/n/"/)/
//  / /  /pu/b/l/i/c/ /S//r/i/n/g/ /c/h/i/l/d/r/e/n/l/@/R/e/q/u/e/s/t/P/a/r/a/m/f/v/a/l/u/e/ /=/  /"/p/a/t/h/"/ /S/t/r/i/n/g/ /p/a/t/h/l/ /{/	/ / / / /p/u/b/l/i/c/ /S/t/r/i/n/g/ /c/h/i/l/d/r/e/n/(/@/R/e/q/u/e/s/t/P/a/r/a/m/(/v/a/l/u/e/ /=/ /"/p/a/t/h/"/)/ /S/t/r/i/n/g/ /p/a/t/h/)/ /{/
/ / / / / /  // /L/i/s/t/</S/t/r/i/ng/>/ /c/h/i/l/d/r/e/n/ // /n/u/l/l/;/	/ / / / / / / / /L/i/s/t/</S/t/r/i/n/g/>/ /c/h/i/l/d/r/e/n/ /=/ /n/u/l/l/;/
/ /  / / / / / / /t/r/y/ /{/	/ / / / / / / / /t/r/y/ /{/
/ /  / /  / / /  / / / / /  /c/h/i/l/d/r/e/n/ /=/ /z/k/C/l/i/e/n//../g/e/t/C/h/i/l//r/e/n///./f//r/P/a/t/h//pa/t/h//;/	/ / / / / / / / / / / / /c/h/i/l/d/r/e/n/ /=/ /z/k/C/l/i/e/n/t/./g/e/t/C/h/i/l/d/r/e/n/(/)/./f/o/r/P/a/t/h/(/p/a/t/h/)/;/
/ / / /  // / / /l/ /c/a/t/c/h/ //E/x/c/e/p/t/i/o/n//e// /{/	/ / / / / / / / /}/ /c/a/t/c/h/ /(/E/x/c/e/p/t/i/o/n/ /e/)/ /{/
/ / / / /  / / / / /  / / /e/./p/r/i/n/t/S/t/a/c/k/T/r/a/c/e///;/	/ / / / / / / / / / / / /e/./p/r/i/n/t/S/t/a/c/k/T/r/a/c/e/(/)/;/
/ / /  / / / / / /}/	/ / / / / / / / /}/
/ / / / / // / /r/e/t/u/r/n/ /"/c/h/i/l/d/r/e/n/"/ /+/ /c/h/i/l//r/e/n/;	/ / / / / / / / /r/e/t/u/r/n/ /"/c/h/i/l/d/r/e/n/"/ /+/ /c/h/i/l/d/r/e/n/;/
/ / / / /}/	/ / / / /}/
/	/
// // /@/P/o/s/t/M/a/p/p//n/g/l/" public String wtch@RequestParamlvalue= "path"l String path {	/ / / / /@/P/o/s/t/M/a/p/p/i/n/g/(/" public String watch(@RequestParam(value = "path") String path) {
Sta stt = null;	Stat stat = null;
try {	try {
stat = zkClient.checkExists..watchedf..forPathpath;	stat = zkClient.checkExists().watched().forPath(path);
f catch Exception e {	} catch (Exception e) {
e.printStackTracef;	e.printStackTrace();
}	}
return "watch "+ stat;	return "watch " + stat;
f	}
	
@RequestMapping"/m/a/k/e/O/r/d/e/r/"//	@RequestMapping("/m/a/k/e/O/r/d/e/r/"/)/
/ / / / /p/u/b/l/i/c/ /S/t/r/i/n/g/ /m/a/k/e/O/r/d/e/r//@/R/e/q/u/e/s/t/P/a/r/a/m//v/a/l/u/e /=/ /"/p/r/o/d/u/c/t/"// /St/r//n/g/ /p/r/o/d/u/c/t/l/ /{/	/ / / / /p/u/b/l/i/c/ /S/t/r/i/n/g/ /m/a/k/e/O/r/d/e/r/(/@/R/e/q/u/e/s/t/P/a/r/a/m/(/v/a/l/u/e/ /=/ /"/p/r/o/d/u/c/t/"/)/ /S/t/r/i/n/g/ /p/r/o/d/u/c/t/)/ /{/
/ / / // /  ///z/o/o/K/e/e/p/e/r/S/e/r/v/i/c/e/I/m/p///m/a/k/e/O/r/d/e/r//p/r/o/d/u/c/t///	/ / / / / / / / /z/o/o/K/e/e/p/e/r/S/e/r/v/i/c/e/I/m/p/l/./m/a/k/e/O/r/d/e/r/(/p/r/o/d/u/c/t/)/;/
/ /  / /  // / / /r/e/t/u/r/n/  /"/s/u/c/c/e/s//"//	/ / / / / / / / /r/e/t/u/r/n/ /"/s/u/c/c/e/s/s/"/;/
/ / /  //}/	/ / / / /}/
/}/	/}/
