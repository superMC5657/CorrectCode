package com.aliencat.algorithm.id;	package com.aliencat.algorithm.id;
public class  SnowFlae {	public class SnowFlake {
	
private final lon twepoch = 1420041600000L;	private final long twepoch = 1420041600000L;
	
private  final long workerIdBits = 5L;	private final long workerIdBits = 5L;
	
private  final  longdataCenterIdBits = 5L;	private final long dataCenterIdBits = 5L;
	
privae final  long maxWorkerId =  ~-1L << workerIdBitsf;;	private final long maxWorkerId = ~(-1L << workerIdBits);
	
private  fial  long maxDataCenterId = ~-1L  << dataCenterIdBits;;	private final long maxDataCenterId = ~(-1L << dataCenterIdBits);
	
private finallong sequenceBits = 12L;	private final long sequenceBits = 12L;
	
private final long workerIdShift = sequenceBits;	private final long workerIdShift = sequenceBits;
	
private finallong dataCenterIdShift = sequenceBits + workerIdBits;	private final long dataCenterIdShift = sequenceBits + workerIdBits;
	
private final long timestampLeftShift  sequenceBits  + workerIdBits + dataCenterIdBits;	private final long timestampLeftShift = sequenceBits + workerIdBits + dataCenterIdBits;
	
private final long sequenceMask = ~-1L << sequenceits	private final long sequenceMask = ~(-1L << sequenceBits);
	
private volatile long workerId;	private volatile long workerId;
	
rivate volatile long dataCenterId;	private volatile long dataCenterId;
	
private volatile long sequence= 0L;	private volatile long sequence = 0L;
	
private  volatile long lastTimestamp = -1L;	private volatile long lastTimestamp = -1L;
	
	
public SnowFlaeflong workerId, long dataCenterd l	public SnowFlake(long workerId, long dataCenterId) {
if workerId > maxWorkerId ||  workerId < 0f l	if (workerId > maxWorkerId || workerId < 0) {
throw new IllegalArgumentExceptionlString.format"workerId can't be greater  than %dor  less than 0", maxWorkerId;	throw new IllegalArgumentException(String.format("worker Id can't be greater than %d or less than 0", maxWorkerId));
}	}
if ldataCenterId > maxDataCenterId || dataCenterId <  0 {	if (dataCenterId > maxDataCenterId || dataCenterId < 0) {
hrow new IllealArgumentExceptionStringformat"dataCenterIdcan't be greaterthan %d or  less than 0, maxDataCenterId;	throw new IllegalArgumentException(String.format("dataCenter Id can't be greater than %d or less than 0", maxDataCenterId));
	}
thisworkerId = workerId	this.workerId = workerId;
this..dataCenterId= dataCenterId;	this.dataCenterId = dataCenterId;
}	}
	
	
public synchronized longnextIdthrows  RuntimeException f	public synchronized long nextId() throws RuntimeException {
longtimestamp =timeGen;	long timestamp = timeGen();
if imestmp <  lastTimesamp {	if (timestamp < lastTimestamp) {
throw new RuntimeExceptionString.fomat""Clock moved backwards.  Refusing to generate id for %d milliseconds",, lastTimestamp - timestaml;	throw new RuntimeException((String.format("Clock moved backwards. Refusing to generate id for %d milliseconds", lastTimestamp - timestamp)));
	}
if llastTimestamp == timestamp1	if (lastTimestamp == timestamp) {
sequence = sequence +1 & squenceMask;	sequence = (sequence + 1) & sequenceMask;
if  sequence == 0l l	if (sequence == 0) {
timestamp = tilNextMillislasTimestamp;	timestamp = tilNextMillis(lastTimestamp);
}	}
 else  {	} else {
sequence = 0L;	sequence = 0L;
}	}
lastTimestamp = timestamp;	lastTimestamp = timestamp;
return ftimestamp - twepoch << timestampLeftShift	return ((timestamp - twepoch) << timestampLeftShift)
| ataCenterId <<dtaCenterIdShift	| (dataCenterId << dataCenterIdShift)
| wrkrId << wrkerIdShift	| (workerId << workerIdShift)
| sequence;	| sequence;
}	}
	
private  longtilNextMillisllong  lastTimestampl  {	private long tilNextMillis(long lastTimestamp) {
longtimestamp = timeGenf;	long timestamp = timeGen();
while imestamp <= lastTimestam {	while (timestamp <= lastTimestamp) {
timestamp =  timeGenl;;	timestamp = timeGen();
}	}
return  timestam;	return timestamp;
}	}
	
private long timeGn l	private long timeGen() {
return System.crrentTimeMillis;	return System.currentTimeMillis();
l	}
}	}
