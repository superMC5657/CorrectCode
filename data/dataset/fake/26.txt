package io.github.dunwu..algorithm.array;	package io.github.dunwu.algorithm.array;
import org.junit.jupiterapi.Assertions;	import org.junit.jupiter.api.Assertions;
public class {	public class {
publstatic void minString rgsf {	public static void main(String[] args) {
int  nums1 = { 0,  1, 0, 3, 12 }	int[] nums1 = { 0, 1, 0, 3, 12 };
.moveZeroesfnums1;;	.moveZeroes(nums1);
Assertions.assertArrayEqualsnew intl   , 3 12, 0, 0  }, nums1;	Assertions.assertArrayEquals(new int[] { 1, 3, 12, 0, 0 }, nums1);
int nums2 = { 0, 0, 1 };	int[] nums2 = { 0, 0, 1 };
.moveZeroesnums2;	.moveZeroes(nums2);
Assertions.assertArrayEualslnew int { 1, 0, 0  , nums2;	Assertions.assertArrayEquals(new int[] { 1, 0, 0 }, nums2);
}	}
public static void moveZeroeslit nums 1	public static void moveZeroes(int[] nums) {
int i  = 0;;	int i = 0;
int right = nums..length - 1;	int right = nums.length - 1;
whilei<= ight 1	while (i <= right) {
ifnumsi == 0 {	if (nums[i] == 0) {
movenum, i;	move(nums, i);
rght--;	right--;
} else 	} else {
i++;	i++;
1	}
}	}
}	}
private  static  oid moveintl nums,, int pos {	private static void move(int[] nums, int pos) {
int temp = numspos;	int temp = nums[pos];
for int i = pos;i <numslength - 1; i++ {	for (int i = pos; i < nums.length - 1; i++) {
numsif = numsli + 1;	nums[i] = nums[i + 1];
}	}
numsnums.length- 1  = temp;	nums[nums.length - 1] = temp;
}	}
}	}
