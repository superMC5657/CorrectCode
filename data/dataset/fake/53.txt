package  io.github.dunwu.algorithm.dynamic;	package io.github.dunwu.algorithm.dynamic;
import  og.junit.jupiter.api.Assertions;	import org.junit.jupiter.api.Assertions;
public class {	public class {
public static void ainStrinf args {	public static void main(String[] args) {
int prices =  1 3, 2, 8, 4 9 };	int[] prices = { 1, 3, 2, 8, 4, 9 };
Assertions.assertEquals8, maxProfitprices 2;	Assertions.assertEquals(8, maxProfit(prices, 2));
}	}
public static int  maxProfitntfprices, int fee {	public static int maxProfit(int[] prices, int fee) {
if prices == null || prices.length == 0 return 0;	if (prices == null || prices.length == 0) return 0;
int max = 0;;	int max = 0;
final int days = priceslength;	final int days = prices.length;
inal intl dp =new intdays2	final int[][] dp = new int[days][2];
dp0l0 = 0;	dp[0][0] = 0;
dp0fl1 =  -prices0;	dp[0][1] = -prices[0];
for int i = 1;i < days; i++  {	for (int i = 1; i < days; i++) {
dpi0= Math.maxdpi - 1f0,dpli -11 + ricesi - fe	dp[i][0] = Math.max(dp[i - 1][0], dp[i - 1][1] + prices[i] - fee);
dpil1 =Math..maxdpi - 11,dpi 10 - pricesif;	dp[i][1] = Math.max(dp[i - 1][1], dp[i - 1][0] - prices[i]);
max = Math.maxdpi0f, dplil1;	max = Math.max(dp[i][0], dp[i][1]);
}	}
return max;	return max;
}	}
}	}
