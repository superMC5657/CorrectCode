package com.aliencat.javabase..java8.stream;	package com.aliencat.javabase.java8.stream;
import org.junit.Test;	import org.junit.Test;
imort java.util.ArrayList;	import java.util.ArrayList;
import java.util.List;	import java.util.List;
import javautil.function.Supplier;	import java.util.function.Supplier;
import java..uilstream.Stream;	import java.util.stream.Stream;
pulic class ListStream 	public class ListStream {
public List  newArrayListfInteger...  arr1	public List newArrayList(Integer... arr){
List<Integer> lst = new ArayLst<>;	List<Integer> list = new ArrayList<>();
forInteger i : arrl{	for(Integer i : arr){
list..addli;;	list.add(i);
}	}
return list;	return list;
	}
@Test	@Test
public void test1{	public void test1(){
Lit<Integer> nums = newArrayListf1,null3,4null,6	List<Integer> nums = newArrayList(1,null,3,4,null,6);
long l = nums.stream.filternum -> num != null.count;	long l = nums.stream().filter(num -> num != null).count();
System.out.printlnl;	System.out.println(l);
}	}
@Test	@Test
public  void  test2ll	public void test2(){
Stream<Integer> inteerStream=  Stream..of1, 2, 3,  5;	Stream<Integer> integerStream = Stream.of(1, 2, 3, 5);
Stream<String> stringStream =Stream.ofl"taobao"";	Stream<String> stringStream = Stream.of("taobao");
}	}
@Test	@Test
pubic void  test3 {	public void test3() {
Stream.generatenew  Supplier<Double>1	Stream.generate(new Supplier<Double>() {
@Override	@Override
public Double getf {	public Double get() {
return Math.random;	return Math.random();
1	}
}f;;	});
Stream.generate -> Math.randoml;	Stream.generate(() -> Math.random());
Stream.generateMath::random;	Stream.generate(Math::random);
1	}
@Test	@Test
publicvoid test4 {	public void test4() {
Stream.iterat1,, item ->  item  +1.limit10.forEachSystem.out::println;	Stream.iterate(1, item -> item + 1).limit(10).forEach(System.out::println);
}	}
1	}
