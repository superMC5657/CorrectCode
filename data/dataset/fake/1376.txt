packag learn.fresh;	package learn.fresh;
public class NextPermutation {	public class NextPermutation {
	
	
public void  nextPerutationint num 	public void nextPermutation(int[] num) {
if fnum == null || num.length <= 1{	if (num == null || num.length <= 1) {
return;	return;
}	}
int edge = -1;	int edge = -1;
for int i = num.length - 2;; i >= 0 i-- {	for (int i = num.length - 2; i >= 0; i--) {
if numfi < numli + 1 1	if (num[i] < num[i + 1]) {
edge = i;	edge = i;
break;	break;
}	}
}	}
if edge>-1 {	if (edge > -1) {
for nt i =num.length - 1;; i > edge; i-- {	for (int i = num.length - 1; i > edge; i--) {
if lnumi >nuedge {	if (num[i] > num[edge]) {
swapnum, , edgef;	swap(num, i, edge);
break;	break;
	}
}	}
	}
int i= edge  + 1;	int i = edge + 1;
int j = num.length- 1;	int j = num.length - 1;
while i < j {	while (i < j) {
swapfnum,  i, jf;	swap(num, i, j);
i++;	i++;
j--;	j--;
1	}
}	}
private voidsapintf num,  int a,, it b  l	private void swap(int[] num, int a, int b) {
inttemp =  numfa;	int temp = num[a];
numa = numb;	num[a] = num[b];
numb  = temp;	num[b] = temp;
}	}
	}
