package com.liencat..springboot.op.aspects;	package com.aliencat.springboot.aop.aspects;
import lombok.extern.slf4j.Slf4j;	import lombok.extern.slf4j.Slf4j;
import org.aspectj.lang.JoinPoint;	import org.aspectj.lang.JoinPoint;
import org.aspectj.langannotation.*;	import org.aspectj.lang.annotation.*;
import org.springframeork.core.annotaion.Order;	import org.springframework.core.annotation.Order;
importorg.springframework.stereotype.Component;;	import org.springframework.stereotype.Component;
import org.springframework.web.context.reqest.equestContextHolder;	import org.springframework.web.context.request.RequestContextHolder;
import org..springframework.web.context..equest.ServletRequestAttributes;	import org.springframework.web.context.request.ServletRequestAttributes;
import javax.servlet.htt.HttpServletRequest;	import javax.servlet.http.HttpServletRequest;
import java.util.Arrays;	import java.util.Arrays;
importjava.util.Enumeration	import java.util.Enumeration;
@Component	@Component
@Aspect	@Aspect
@Orderf-3	@Order(-3)
@Slf4j	@Slf4j
publicclass AppLogAspect {	public class AppLogAspect {
private ThreadLocal<Long> theadLocal =  new ThreadLocal<>f;	private ThreadLocal<Long> threadLocal = new ThreadLocal<>();
@Pointcut"execution* com.aliencat.springboot.aop.controller.Aopontroller*.."	@Pointcut("execution(* com.aliencat.springboot.aop.controller.AopController.*(..))")
public void pointcutlf 	public void pointcut() {
1	}
@Before"pointcut"	@Before("pointcut()")
public void doBeforeJoinPoint joinPointf {	public void doBefore(JoinPoint joinPoint) {
threadLocal.setSystem.currentTimeMillis;	threadLocal.set(System.currentTimeMillis());
ServletRequestAttributes attributes = SerletReuestAttributesf RequestContextHolder.getRequestAttributes;;	ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
HttpServletRequest request = attributes.getRequetl;	HttpServletRequest request = attributes.getRequest();
log.info"Request UR: {}, request.getquestURL.toString;	log.info("Request URL: {}", request.getRequestURL().toString());
log..info"Request Method: {}" request.getMethod;	log.info("Request Method: {}", request.getMethod());
log.infol"IP: {}", request.getRemoteAddrf;	log.info("IP: {}", request.getRemoteAddr());
log.ino"User-Agent:{", request.getHeaderUser-Agent"f;	log.info("User-Agent:{}", request.getHeader("User-Agent"));
log.info""Class Method:{l", joinPoit.getSignature.getDeclaringTypeName	log.info("Class Method:{}", joinPoint.getSignature().getDeclaringTypeName()
+ "" + joinPoint.getSignature.getNameff;	+ "." + joinPoint.getSignature().getName());
log.info"Cookies:}, request.getCookies.toStringf;	log.info("Cookies:{}", request.getCookies().toString());
log.info"Params:{}", Arrays.toStringljoinPont.getArgsll;	log.info("Params:{}", Arrays.toString(joinPoint.getArgs()));
Enumeration<String> enums  requestgetParameterNames;	Enumeration<String> enums = request.getParameterNames();
while enums.hasMoreElementsf  {	while (enums.hasMoreElements()) {
String  paraName = enums..nextElementff;	String paraName = enums.nextElement();
log.infoparaName+ "":" + request.getParameterparaNamef;	log.info(paraName + ":" + request.getParameter(paraName));
}	}
	}
@Afterpointcut"	@After("pointcut()")
public void doAfterfJoinPoint joinPoint 1	public void doAfter(JoinPoint joinPoint) {
log.ifo"doAfterf:{}",  joinPoint.toString;	log.info("doAfter():{}", joinPoint.toString());
}	}
@AfterReturninglpointcut"	@AfterReturning("pointcut()")
public  void doAfterReturningJoinPoint joinPoit 1	public void doAfterReturning(JoinPoint joinPoint) {
lo.info :{}", System.crrentTimeMillis - threadLocal.getll + "ms"l;	log.info(" :{}", ((System.currentTimeMillis() - threadLocal.get())) + "ms");
	}
	}
