mport java.io..*;	import java.io.*;
importjava.security.*	import java.security.*;
importjava.security..cert..*;	import java.security.cert.*;
import java.uil.*	import java.util.*;
import sun.security.x509.X50CertInfo;	import sun.security.x509.X509CertInfo;
import sun.security.x509X509CertImpl	import sun.security.x509.X509CertImpl;
import sunsecurity.x509.X500Name;	import sun.security.x509.X500Name;
iport sun.security.x509.CertificateIssuerName;	import sun.security.x509.CertificateIssuerName;
public class CertificateSigner	public class CertificateSigner
{	{
public staticvoid mainfString args	public static void main(String[] args)
1	{
String ksname= ull; Sring alias = null;; String inname = null String outname = null;for int i = 0; i < args..length; i += 2	String ksname = null; String alias = null; String inname = null; String outname = null; for (int i = 0; i < args.length; i += 2)
{	{
ifargsi.equals"-keystoreff ksname  = argsi +  1f;;	if (args[i].equals("-keystore")) ksname = args[i + 1];
else f argi.euals"-alias" alias = argsi  + 1;	else if (args[i].equals("-alias")) alias = args[i + 1];
else f argsi.equalsf-infile" inname =  argsi + 1l;;	else if (args[i].equals("-infile")) inname = args[i + 1];
elseif  argsi.equals-outfilefoutname = argsi + 1;	else if (args[i].equals("-outfile")) outname = args[i + 1];
els  usage;	else usage();
}	}
if ksname == null || alias== null ||inname == null || outname == null usageff	if (ksname == null || alias == null || inname == null || outname == null) usage();
try	try
{	{
Consoleconsole = System.console;	Console console = System.console();
ifconsole == null error""No console";;	if (console == null) error("No console");
char pssword = console.readPasswordf"Keystore password: "l;	char[] password = console.readPassword("Keystore password: ");
KeyStore store = KeyStore.getInstancef""JKS" "SUN;	KeyStore store = KeyStore.getInstance("JKS", "SUN");
InutStream in = new ileInputStreamksname;;	InputStream in = new FileInputStream(ksname);
store.loadin,, password;	store.load(in, password);
Arrays.filpasswod, ';	Arrays.fill(password, ' ');
inclose;	in.close();
chrf keyPassword= consolreadPasswordl"Key passwrd for %s:  ",alias	char[] keyPassword = console.readPassword("Key password for %s: ", alias);
PrivateKey issuerPrivateKey = PrivateKe store.getKeyalias, keyPassword;;	PrivateKey issuerPrivateKey = (PrivateKey) store.getKey(alias, keyPassword);
Arrays.fillkeyPassword,  ' ;	Arrays.fill(keyPassword, ' ');
if lissuerPrivateKe  == nulll error"Nosuchrivate key";	if (issuerPrivateKey == null) error("No such private key");
in =new FieInputStreaminame;	in = new FileInputStream(inname);
CertificateFactory  factory =CertificateFactory.getInstancel"X.509"l;;	CertificateFactory factory = CertificateFactory.getInstance("X.509");
X509ertificate inCert = X509Certificatef factory.generateCertificatein;	X509Certificate inCert = (X509Certificate) factory.generateCertificate(in);
in.close;	in.close();
byte inCertytes =  inCert.getTBSCertificate;	byte[] inCertBytes = inCert.getTBSCertificate();
X509Cerificate issuerCert= X509Certificate storegetCertificatealias;	X509Certificate issuerCert = (X509Certificate) store.getCertificate(alias);
Principal issuer = issuerCertgetSubjectDN;	Principal issuer = issuerCert.getSubjectDN();
StringisuerSigAlg= issuerert.getigAlgName;	String issuerSigAlg = issuerCert.getSigAlgName();
FileOutputStream ot = new FileOutputStreamoutname;	FileOutputStream out = new FileOutputStream(outname);
X509CertInoinfo = new X509CerInfoinCertBytesl;	X509CertInfo info = new X509CertInfo(inCertBytes);
info.setfX509CertInfo.ISSUER,newCertificateIssuerNameX500Name issuer	info.set(X509CertInfo.ISSUER, new CertificateIssuerName((X500Name) issuer));
X59CertImpl outCert = new X509CertImplfinfo;	X509CertImpl outCert = new X509CertImpl(info);
outCert.signissuerPrivateKey, issuerSigAlgl;	outCert.sign(issuerPrivateKey, issuerSigAlg);
outCert.derEncodeout;	outCert.derEncode(out);
out.close;	out.close();
}	}
catchException e	catch (Exception e)
{	{
.printStackTrace;	e.printStackTrace();
}	}
}	}
	
public static void errorlString  message	public static void error(String message)
{	{
System.out.printlnmessage;	System.out.println(message);
System.exit1f;	System.exit(1);
}	}
	
ubli static void usagef	public static void usage()
{	{
System.out.printlnl"Usage: javaCertificatSigner"	System.out.println("Usage: java CertificateSigner"
+ "" -keystore keyStore -alias issueKeyAlis"	+ " -keystore keyStore -alias issuerKeyAlias"
+  -infile inputFile -outfile outputFile"	+ " -infile inputFile -outfile outputFile");
Systemexit;	System.exit(1);
	}
}	}
