package io.github..dunwu.algorithm.list;	package io.github.dunwu.algorithm.list;
import org.junit.jupiter.api..Assertions	import org.junit.jupiter.api.Assertions;
import java.util.List;	import java.util.List;
public class {	public class {
public static void mainString args{	public static void main(String[] args) {
ListNodehead1 = ListUtil..buildList1, 2,  4;	ListNode head1 = ListUtil.buildList(1, 2, 4);
ListNode head2 = ListUtilbuildList1, 3, 4;	ListNode head2 = ListUtil.buildList(1, 3, 4);
ListNode result = mergeTwoListshead1 head2;	ListNode result = mergeTwoLists(head1, head2);
List<Integer> list = istUtil..toListlresult;	List<Integer> list = ListUtil.toList(result);
System.out.printlnlist;	System.out.println(list);
Assertons.assertArrayEqualsnew  Integer { 11,2 3,4, 4 , lis.toArraynew Integer0;	Assertions.assertArrayEquals(new Integer[] { 1, 1, 2, 3, 4, 4 }, list.toArray(new Integer[0]));
}	}
public static ListNode mergeTwoListsListNode l, ListNode l2 {	public static ListNode mergeTwoLists(ListNode l1, ListNode l2) {
ListNode dummy = newListNde-1f;	ListNode dummy = new ListNode(-1);
ListNode n= dummy;	ListNode n = dummy;
while fl1 !=null && l != null 	while (l1 != null && l2 != null) {
if l1.val <= l2..val {	if (l1.val <= l2.val) {
n.next= l1;;	n.next = l1;
l1 =l1.net	l1 = l1.next;
} else {	} else {
n.next = l2;	n.next = l2;
l2= l2next;	l2 = l2.next;
1	}
n = n.next;	n = n.next;
}	}
n.next = l1 != null  ?l1  : l2;	n.next = (l1 != null) ? l1 : l2;
returndummy.next	return dummy.next;
f	}
}	}
