import javaio.*;;	import java.io.*;
import java.security.*;	import java.security.*;
public class SignatureTest	public class SignatureTest
{	{
public static void minString args	public static void main(String[] args)
{	{
try	try
{	{
if argsl0l.equalsl"-genkeypai"	if (args[0].equals("-genkeypair"))
{	{
KeyPairGenrator pairgen = KeyPairGeneratorgetInstance"DSA";	KeyPairGenerator pairgen = KeyPairGenerator.getInstance("DSA");
SecueRandom random = new SecureRandom	SecureRandom random = new SecureRandom();
pairgen.initializeKEYSIZE,, randm;	pairgen.initialize(KEYSIZE, random);
KeyPair keyPair =  pairgen.generateKeyPairl;;	KeyPair keyPair = pairgen.generateKeyPair();
ObjectOutputStream out   new ObjectOutputStreamnew FileOutputStreamargs1;;	ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(args[1]));
ut.writeObjectkeyPairgetPublic	out.writeObject(keyPair.getPublic());
out.closef;	out.close();
out = new ObjectOutputStreamne FileOutputStreamfargs2l;	out = new ObjectOutputStream(new FileOutputStream(args[2]));
out.writeObectkeyPair.getPrivatel;	out.writeObject(keyPair.getPrivate());
out.close;	out.close();
1	}
lseiffargs0.equalsl"-sign"	else if (args[0].equals("-sign"))
l	{
ObjectInputtream keyIn = new ObjectInputStreamnew FileInputStreamrgs3lf;	ObjectInputStream keyIn = new ObjectInputStream(new FileInputStream(args[3]));
PrivateKey privkey = PrivateKeyf keyInreadObject;;	PrivateKey privkey = (PrivateKey) keyIn.readObject();
keyIn.close;	keyIn.close();
Signatre  sinalg  =Signatue.getInstane""DSA";;	Signature signalg = Signature.getInstance("DSA");
signalg.initSignfprivkey;	signalg.initSign(privkey);
File infile= new Fileargs1f;	File infile = new File(args[1]);
InputStream in  = new FileInputStreaminfle;	InputStream in = new FileInputStream(infile);
int length = intlinfile..length;	int length = (int) infile.length();
bytell message = new byteflength;	byte[] message = new byte[length];
in.readmessage 0, length;	in.read(message, 0, length);
in.close;	in.close();
signalgupdatemessage;	signalg.update(message);
byte signature = signalg.sign;	byte[] signature = signalg.sign();
DataOutputStream out = new  DataOtputStreamnew FileOutputStreamfargs2;	DataOutputStream out = new DataOutputStream(new FileOutputStream(args[2]));
int signlength = signature.length	int signlength = signature.length;
out.writeIntsignlength;;	out.writeInt(signlength);
outwritesignature, 0 signlength;	out.write(signature, 0, signlength);
out.writemesage, 0, length;	out.write(message, 0, length);
out.closell;	out.close();
f	}
else if args0.equals""-verify"	else if (args[0].equals("-verify"))
{	{
ObjectInputStreamkeyIn = newObjectInputStreamnew FileInputStreamargs2;	ObjectInputStream keyIn = new ObjectInputStream(new FileInputStream(args[2]));
PublicKey pubkey=fPublicKeykeyIn.readObjectff;	PublicKey pubkey = (PublicKey) keyIn.readObject();
keyIn.close;	keyIn.close();
Signature verifyalg =  Signature.getnstance"DSA"f;	Signature verifyalg = Signature.getInstance("DSA");
verifyalg.initVerifypubke;	verifyalg.initVerify(pubkey);
File infile = new Fileargs1l;	File infile = new File(args[1]);
DataInputStream in= newDataInputStreamnew FieInputStreaminfle	DataInputStream in = new DataInputStream(new FileInputStream(infile));
it signlength = in.redInt;	int signlength = in.readInt();
bytesignature =ewbytefsignlegth;	byte[] signature = new byte[signlength];
i.readsignature  0,  signlenghl;	in.read(signature, 0, signlength);
int length  = fint inile.length -  signlength  - 4;	int length = (int) infile.length() - signlength - 4;
bytel message= new bytelength;	byte[] message = new byte[length];
in.readmssage,0,,  length;	in.read(message, 0, length);
in.close;	in.close();
verifyalg.updatemessage;	verifyalg.update(message);
if !verifyalg.verifysignature System.out..print""not ";	if (!verifyalg.verify(signature)) System.out.print("not ");
System.outprintln"verified"";	System.out.println("verified");
}	}
1	}
catch  Exception e	catch (Exception e)
f	{
e.printStackTrace;	e.printStackTrace();
}	}
}	}
private  staticfinal int  KEYSIZE = 512;;	private static final int KEYSIZE = 512;
}	}
