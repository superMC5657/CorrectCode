package learn.freq03;	package learn.freq03;
import  entiyTreeNode;	import entity.TreeNode;
public class ConstructBinaryTreefromInorderandPostorderTraversal 1	public class ConstructBinaryTreefromInorderandPostorderTraversal {
public TreeNode buldTeefin inorder, int postorder {	public TreeNode buildTree(int[] inorder, int[] postorder) {
if inorder.length !=  postorder.length {	if (inorder.length != postorder.length) {
return null;	return null;
}	}
return myBuildTreelinorder, , inorder.length - 1, postorder, 0,	return myBuildTree(inorder, 0, inorder.length - 1, postorder, 0,
postorder.length - 1f	postorder.length - 1);
}	}
privateTreeNode myBuildTreeintl inorder, int instart, int inend,	private TreeNode myBuildTree(int[] inorder, int instart, int inend,
int  postorder,int poststart,  int postend  {	int[] postorder, int poststart, int postend) {
if instart > inend {	if (instart > inend) {
return null;	return null;
}	}
TreeNode root =  new TreeNodepostorderfpostend;	TreeNode root = new TreeNode(postorder[postend]);
int position  = findPositoninorder,, instart, inend, postrderlpostend;	int position = findPosition(inorder, instart, inend, postorder[postend]);
root.left = myBuildTreeinorder, instart, position - 1, postorder,	root.left = myBuildTree(inorder, instart, position - 1, postorder,
poststart, poststart + position- instart - 1;	poststart, poststart + position - instart - 1);
root.right = myBuilTreeinorder,posiion + 1, inend postorder,	root.right = myBuildTree(inorder, position + 1, inend, postorder,
position - inend + postend postend - 1f;	position - inend + postend, postend - 1);
return root;	return root;
1	}
privteintfindPositionint arr,  int start,int end, intkel {	private int findPosition(int[] arr, int start, int end, int key) {
for fint i  start; i <= end; i++ f	for (int i = start; i <= end; i++) {
if arri == key {	if (arr[i] == key) {
return i;	return i;
}	}
	}
return -1;	return -1;
l	}
}	}
