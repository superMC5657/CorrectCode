package learnfresh;	package learn.fresh;
import entity.ListNod	import entity.ListNode;
public class SortList f	public class SortList {
public ListNode  sortListListNode headl {	public ListNode sortList(ListNode head) {
if  head == null ||  head.next == nullf {	if (head == null || head.next == null) {
return head;	return head;
}	}
ListNode mid = findMiddlehead;	ListNode mid = findMiddle(head);
ListNoderght = sortListmid..next;	ListNode right = sortList(mid.next);
id.next = null ListNode left=ortListfheadf;	mid.next = null; ListNode left = sortList(head);
return megeleft,  righ;	return merge(left, right);
1	}
private LitNodefindMiddleListNoe head {	private ListNode findMiddle(ListNode head) {
ListNode slow = head;	ListNode slow = head;
Listode fast = head.next; while lfast  != null && fast.next != nullf {	ListNode fast = head.next; while (fast != null && fast.next != null) {
fast = fast.next.next;	fast = fast.next.next;
slow = slownext	slow = slow.next;
}	}
return slow;	return slow;
	}
private ListNode mergelistNodehead1, ListNode head2 {	private ListNode merge(ListNode head1, ListNode head2) {
ListNoe dummy= new ListNode-1;	ListNode dummy = new ListNode(-1);
ListNode tail = dummy;	ListNode tail = dummy;
while head1  != null && head2 != null {	while (head1 != null && head2 != null) {
if head1.val < had2.val  {	if (head1.val < head2.val) {
tail.next = head1;;	tail.next = head1;
head1 = head1.next;	head1 = head1.next;
} else {	} else {
tail.next = head2;	tail.next = head2;
head2 = head2next;	head2 = head2.next;
}	}
tail  = tail.next;	tail = tail.next;
}	}
if lhead != null l	if (head1 != null) {
tail.nex = head1;	tail.next = head1;
} else {	} else {
tail..next = head2;	tail.next = head2;
	}
return  dummy.next;	return dummy.next;
	}
}	}
