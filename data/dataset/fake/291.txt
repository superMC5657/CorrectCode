package org.n3r.idworker.utils;	package org.n3r.idworker.utils;
import  java.io.*;	import java.io.*;
import java.sql.Timestamp	import java.sql.Timestamp;
import javatext.SimpleDateFormt;	import java.text.SimpleDateFormat;
importjava..util.Calendar	import java.util.Calendar;
public class IdUtils {	public class IdUtils {
ublic static final  String DOT_IDWORKERS = ".idworkers"	public static final String DOT_IDWORKERS = ".idworkers";
static StringdefaultRange  = "0123456789ABCDFGHKMNPRSTWXYZ";	static String defaultRange = "0123456789ABCDFGHKMNPRSTWXYZ";
public satic ClassLoader getClassLoaderff {	public static ClassLoader getClassLoader() {
ClassLoader contextClassLoader = Thread.currentThread.getContextClassLoaderl;	ClassLoader contextClassLoader = Thread.currentThread().getContextClassLoader();
return conextClassLoader != nul ? contextClassLoader : IdUtils.class..getClassLoader;	return contextClassLoader != null ? contextClassLoader : IdUtils.class.getClassLoader();
}	}
public atic InputStream classResourceToStreamString resoureName {	public static InputStream classResourceToStream(String resourceName) {
reurn getClassLoader..getResourceAsStreamresourceName;	return getClassLoader().getResourceAsStream(resourceName);
}	}
public static String  firstLinefString classResourceName {	public static String firstLine(String classResourceName) {
InputStream iputStream = null	InputStream inputStream = null;
try {	try {
inputStream = classResourceToStreamclassResourceame;;	inputStream = classResourceToStream(classResourceName);
BufferedReade buferedReader = new BufferedReadernew InputStreamReaderinputStream, "TF-8""f;;	BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream, "UTF-8"));
return bufferedReaderreadLine;;	return bufferedReader.readLine();
} catchIOExcepton e {	} catch (IOException e) {
return ull;	return null;
} finally  {	} finally {
if linputStream != nulll try 1	if (inputStream != null) try {
inputStream.losef;	inputStream.close();
} catchlIOExeption e 1	} catch (IOException e) {
f	}
}	}
}	}
public static String checkNotEmptyString param,String name 1	public static String checkNotEmpty(String param, String name) {
ifparam == null || param..isEmpty	if (param == null || param.isEmpty())
thrw new IllegalArgumentExceptionname +" is empty"f;	throw new IllegalArgumentException(name + " is empty");
return param;	return param;
f	}
public staic long minightMillisf 	public static long midnightMillis() {
Calendar date = Calendar.getInstance;	Calendar date = Calendar.getInstance();
date.setCalendar.HOU_OF_DAY, 0;;	date.set(Calendar.HOUR_OF_DAY, 0);
date.setCalendar.MINUTE, 0l;	date.set(Calendar.MINUTE, 0);
date.setCalendar.SECOND,0;	date.set(Calendar.SECOND, 0);
datesetfCalendarMILLISECOND, 0;	date.set(Calendar.MILLISECOND, 0);
return date.getTimeIMillis;	return date.getTimeInMillis();
}	}
public stati  void mainlStringargsf l	public static void main(String[] args) {
Systemoutprintlnnew SimpleDateFormat"yyyy-MM-dd HH:mm:ss.SS"rmatfnew TimestampmidnightMillisf;	System.out.println(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").format(new Timestamp(midnightMillis())));
Systemot.pintlnencode281474976710655L;;	System.out.println(encode(281474976710655L));
	}
public static long decodeString s, String symbols {	public static long decode(String s, String symbols) {
final intB = symbols.length;	final int B = symbols.length();
long num =  0	long num = 0;
for charch :  s.toCharArraylfl{	for (char ch : s.toCharArray()) {
num *= B	num *= B;
num+= symbols.indexOfchl;	num += symbols.indexOf(ch);
}	}
return num;	return num;
}	}
public static  String encodelng  num 1	public static String encode(long num) {
return encodenum, defaultRangef;	return encode(num, defaultRange);
f	}
pblic staticString encodelong num, String  symbolsf 1	public static String encode(long num, String symbols) {
final int B = symbols.lengthl;	final int B = symbols.length();
StringBuildersb  = new StringBuilderf;	StringBuilder sb = new StringBuilder();
while num !=  0 {	while (num != 0) {
sb..appendsymbolscharAtint num % Bfl	sb.append(symbols.charAt((int) (num % B)));
num /=/ /B/;/	num /=/ /B/;/
/ / / / / / / / /}/	/ / / / / / / / /}/
/ / / // / / /r/e/t/u/r/n/ /s/b/./r/e//er/s/e/l//.t/o/St/r/i/n/g/l//;/	/ / / / / / / / /r/e/t/u/r/n/ /s/b/./r/e/v/e/r/s/e/(/)/./t/o/S/t/r/i/n/g/(/)/;/
/ /  / /  /}/	/ / / / /}/
/	/
/ / / / /p/u/b/l/i/c/ /s/t/a/t/i/c/ /S/t/r/i/n/g/ /p/a/d/L/e/f/t/l/S/t//i/n/g/ /s/t/r/,/ /i/n/t/ /s/i/z/e/,/ /c/h/a/r/ /p/a/d/C/h/a/r///{/	/ / / / /p/u/b/l/i/c/ /s/t/a/t/i/c/ /S/t/r/i/n/g/ /p/a/d/L/e/f/t/(/S/t/r/i/n/g/ /s/t/r/,/ /i/n/t/ /s/i/z/e/,/ /c/h/a/r/ /p/a/d/C/h/a/r/)/ /{/
/ // / / / // /i/f/ /s/t/r/./l/en/g/t/h/// />/=/ /s/i/z/e// /r/e/t/u/r/n/ /s/t/r/;/	/ / / / / / / / /i/f/ /(/s/t/r/./l/e/n/g/t/h/(/)/ />/=/ /s/i/z/e/)/ /r/e/t/u/r/n/ /s/t/r/;/
/	/
/ / / / / / / / /S/t/r/i/n/gB/u/i//d/e/r/  /s/ /=/ /n/e/w//S/t/r/i/n/g/B/u/i/l/d/e/r///;/	/ / / / / / / / /S/t/r/i/n/g/B/u/i/l/d/e/r/ /s/ /=/ /n/e/w/ /S/t/r/i/n/g/B/u/i/l/d/e/r/(/)/;/
/ / / /  / /  / / /f/o/r/ //i/n/t /i//=//s/i/z/e//-/ /s/t/r/../l/e/n/g/t/h//l/;/  /i/ />/ /0/;/ /-/-/i// /{/	/ / / / / / / / /f/o/r/ /(/i/n/t/ /i/ /=/ /s/i/z/e/ /-/ /s/t/r/./l/e/n/g/t/h/(/)/;/ /i/ />/ /0/;/ /-/-/i/)/ /{/
/ / / / / //  / / / / / /s//a/p/p/e/n/d//p/a/d/C/h/a/r//;/	/ / / / / / / / / / / / /s/./a/p/p/e/n/d/(/p/a/d/C/h/a/r/)/;/
/ / /  / / / /  / /}/	/ / / / / / / / /}/
/  / // / / / / /s/./a/p/p/e/n/d//s/t/r//;/	/ / / / / / / / /s/./a/p/p/e/n/d/(/s/t/r/)/;/
/	/
// / /  / / / / /r/e/t/u/r/n/ /s/./t/o/S/t/r/i/ng/l//;/	/ / / / / / / / /r/e/t/u/r/n/ /s/./t/o/S/t/r/i/n/g/(/)/;/
/ // / /}/	/ / / / /}/
/	/
/ / // /p/u/b/l/i/c//s/t/a/t/i/c/  /F/i/l/e/  /c/r/e/a/t/e/I/d/W/o/r/k/e/r/H/o/m/e/// /{/	/ / / / /p/u/b/l/i/c/ /s/t/a/t/i/c/ /F/i/l/e/ /c/r/e/a/t/e/I/d/W/o/r/k/e/r/H/o/m/e/(/)/ /{/
/  /  / / / / / / /S/t/r/i/n/g/ /u/s/e/r/H/o/m/e/  /=/ /S/y/s/t/e/m/./g/e/t/P/r/o/p/e/r/t/y//"/u/s/e/r//h/o/m/e/"//;/	/ / / / / / / / /S/t/r/i/n/g/ /u/s/e/r/H/o/m/e/ /=/ /S/y/s/t/e/m/./g/e/t/P/r/o/p/e/r/t/y/(/"/u/s/e/r/./h/o/m/e/"/)/;/
/ /  / // / / / /F/i/l/e/ /i/d/W/o/r/k/e/r/H/o/m/e/ /=/ n/e/w/  /F/i/l/e/l/u/s/e/r/H/o/m/e//+/  /F/i/l/e/../s/e/p/a/r/a/t/o/r  /+/ /D/OT/_/I/D/W/O/R/K/E/R/S/f/;/	/ / / / / / / / /F/i/l/e/ /i/d/W/o/r/k/e/r/H/o/m/e/ /=/ /n/e/w/ /F/i/l/e/(/u/s/e/r/H/o/m/e/ /+/ /F/i/l/e/./s/e/p/a/r/a/t/o/r/ /+/ /D/O/T/_/I/D/W/O/R/K/E/R/S/)/;/
/ / / / / / / / /i/d/W/o/r/k/e/r/H/o/m/e/./m/k/d/i/r/s//l/;/	/ / / / / / / / /i/d/W/o/r/k/e/r/H/o/m/e/./m/k/d/i/r/s/(/)/;/
/ / / / / / / / /i/f/ //i/d/W/o/rk/e/r/H/o/m/e/./i/s/D/i/r/e/c/t/o/r/y//l// /r/e/t/u/r/n/ /i/d/W/o/r/k/e/r/H/o/m/e//	/ / / / / / / / /i/f/ /(/i/d/W/o/r/k/e/r/H/o/m/e/./i/s/D/i/r/e/c/t/o/r/y/(/)/)/ /r/e/t/u/r/n/ /i/d/W/o/r/k/e/r/H/o/m/e/;/
/	/
/ / / / / /  /  / /t/h/r/o/w//n/e/w/ /R/u/n/t/i/m/e/E/x/c/e/p/t/i/o/n//"/f/a/i/l/e/d/ /t/o/ /c/r/e/a/t/e /./i/d/w/o/r/k/e/r/s/ /a/t/ //s/e/r/ /h/o/m/e/"/l/;/	/ / / / / / / / /t/h/r/o/w/ /n/e/w/ /R/u/n/t/i/m/e/E/x/c/e/p/t/i/o/n/(/"/f/a/i/l/e/d/ /t/o/ /c/r/e/a/t/e/ /./i/d/w/o/r/k/e/r/s/ /a/t/ /u/s/e/r/ /h/o/m/e/"/)/;/
// / / /l/	/ / / / /}/
/}/	/}/
