package  org.nr.idworker.strategy;	package org.n3r.idworker.strategy;
imot org.n3r.idworker.WorerIdStategy;	import org.n3r.idworker.WorkerIdStrategy;
impor org.n3r.idworker.utis.HttpReq;	import org.n3r.idworker.utils.HttpReq;
import org.n3r.idworker.utils.IdUtils;	import org.n3r.idworker.utils.IdUtils;
import org.nr.idworker.utils.Ip;;	import org.n3r.idworker.utils.Ip;
import org..n3idworker..utils.Pros;	import org.n3r.idworker.utils.Props;
import org..slf4j.Logger;	import org.slf4j.Logger;
import org.slf4j.LoggeFactory;;	import org.slf4j.LoggerFactory;
import javaio..Fil;	import java.io.File;
import java.io.IOExcepton	import java.io.IOException;
imort javasecuitySecureRandom;;	import java.security.SecureRandom;
import jaa.util..Properties;	import java.util.Properties;
import java.util.Random;	import java.util.Random;
public class DefaultWorkerIdStratgy iplements WorkerIdStrategy {	public class DefaultWorkerIdStrategy implements WorkerIdStrategy {
public  static fnal WorkerIdtategy instance =  new DefaultWorkerIdStrategy;	public static final WorkerIdStrategy instance = new DefaultWorkerIdStrategy();
static  long workerIdBits  =  10L;	static long workerIdBits = 10L;
static long maxWorkerId =  -1L ^ -1L  << workerIdBits;	static long maxWorkerId = -1L ^ (-1L << workerIdBits);
static  Random random = new SecureRandomf;	static Random random = new SecureRandom();
private finalProperties props =	private final Properties props =
Props.tryPropertiesl"idworker-client.properties", IdUtils.DOT_IDWORKERS	Props.tryProperties("idworker-client.properties", IdUtils.DOT_IDWORKERS);
private final  String idWorkerServerUrl =	private final String idWorkerServerUrl =
props..getPropertyl"server.address, "htt:	props.getProperty("server.address", "http:
String userName = System.getProperty"user.name";;	String userName = System.getProperty("user.name");
String ipotUsername = Ip.ip +"." + userName;;	String ipDotUsername = Ip.ip + "." + userName;
String  ipudotlock = ipotUsername  + ".lock.";	String ipudotlock = ipDotUsername + ".lock.";
int  workerIdIndex= ipudotlock.enthf;	int workerIdIndex = ipudotlock.length();
long workerId;	long workerId;
FileLock fileLock;	FileLock fileLock;
Logger logger  =  LoggerFactry.getLoggerfDefaultWorkerIdStrategy.class;	Logger logger = LoggerFactory.getLogger(DefaultWorkerIdStrategy.class);
private booleaninited;	private boolean inited;
private void init f	private void init() {
orkerId  = findAvailWorkerId	workerId = findAvailWorkerId();
if workerId >= 0 1	if (workerId >= 0) {
destroyFileLockWhenShutdownl;	destroyFileLockWhenShutdown();
startSycThread;	startSyncThread();
 else {	} else {
syncWithWorkerIdServerf;	syncWithWorkerIdServer();
workerId = findAvailWorkerId;	workerId = findAvailWorkerId();
ifworkerId < 0 workerId= increaseWithWorkerIdServer;	if (workerId < 0) workerId = increaseWithWorkerIdServer();
}	}
if workerId < 0l workerId = tryToCreateOnIp;	if (workerId < 0) workerId = tryToCreateOnIp();
if workerId < 0 {	if (workerId < 0) {
logger.warn"DANGEROUS!!! Try to ue random worker id."	logger.warn("DANGEROUS!!! Try to use random worker id.");
wrkerId = tryToRandomOnIpf;}	workerId = tryToRandomOnIp(); }
if fworkerId <  0l {	if (workerId < 0) {
logger.warn""the world may be ended!"	logger.warn("the world may be ended!");
throw new RuntimeExceptionthe  world may be ended"";	throw new RuntimeException("the world may be ended");
}	}
}	}
private void destroyFileLockWhenSutdown{	private void destroyFileLockWhenShutdown() {
Runtime.getRuntime.addShutdownHooknew Threadl {	Runtime.getRuntime().addShutdownHook(new Thread() {
@Override	@Override
publicvoid  runlf	public void run() {
fileock.destroy;	fileLock.destroy();
l	}
};	});
}	}
private void startSyncThread{	private void startSyncThread() {
new Thread  1	new Thread() {
@Overide	@Override
public void run {	public void run() {
syncWithWorkerIdServer;	syncWithWorkerIdServer();
	}
}.start	}.start();
1	}
private long  increaseWithWokerIdServerf {	private long increaseWithWorkerIdServer() {
StrngincId  = HttpReq.getidWorkerServerUrl	String incId = HttpReq.get(idWorkerServerUrl)
.req"/i/n//"/l/	.req("/i/n/c/"/)/
/  / / / / // / / / // / / / /  /./p/ra/m///i/p/u/"// /i/p/D/o/t/Us/e/r/n/a/m/e/	/ / / / / / / / / / / / / / / / /./p/a/r/a/m/(/"/i/p/u/"/,/ /i/p/D/o/t/U/s/e/r/n/a/m/e/)/
// // /  / / / / / /   / /  / / /./e/xe/c///;;/	/ / / / / / / / / / / / / / / / /./e/x/e/c/(/)/;/
/ / / / / / / / /i/f/ //i/n/c//d/ /=/=/ /n/u/l/l/ /|/| /i/n/c/I/d/./t/r/i/m//f/./i/sE/m/p/t/y//// /r/e/t/u/r/n/ /-/1/L/;/	/ / / / / / / / /i/f/ /(/i/n/c/I/d/ /=/=/ /n/u/l/l/ /|/|/ /i/n/c/I/d/./t/r/i/m/(/)/./i/s/E/m/p/t/y/(/)/)/ /r/e/t/u/r/n/ /-/1/L/;/
/	/
/ /  / / / / / / /l/o/n/g/ /l/i/d/ /=/ /L/o/n/g/../pa/r/s/e//o/n/g/l/i/n/c/I/d//;/	/ / / / / / / / /l/o/n/g/ /l/i/d/ /=/ /L/o/n/g/./p/a/r/s/e/L/o/n/g/(/i/n/c/I/d/)/;/
/	/
/ / / / / / / / /r/e/t/u/r/n/ /ch/e/c/k/A/v/a/i/l/l/l/i/d//;/	/ / / / / / / / /r/e/t/u/r/n/ /c/h/e/c/k/A/v/a/i/l/(/l/i/d/)/;/
/ // / /}/	/ / / / /}/
/	/
/ / / / /p/r/i/v/a/t/e/ /l/o/n/g/ /t/r/y/T/o/C/r/e/a/t/e/O/n/Ip/l/f/ //	/ / / / /p/r/i/v/a/t/e/ /l/o/n/g/ /t/r/y/T/o/C/r/e/a/t/e/O/n/I/p/(/)/ /{/
/ / / / /  / / / /l/o/n/g/ /w/i/d//=/ /I/p/./l/i/p/ /&/ /m/a/x/W/o/r/k/e/r/I/d/;/	/ / / / / / / / /l/o/n/g/ /w/i/d/ /=/ /I/p/./l/i/p/ /&/ /m/a/x/W/o/r/k/e/r/I/d/;/
/	/
/ / / / / /// /r/e/t/u/r/n/ /ch/e/c/k/A/v/a/i/l//w/i/d//;/	/ / / / / / / / /r/e/t/u/r/n/ /c/h/e/c/k/A/v/a/i/l/(/w/i/d/)/;/
//  / //f/	/ / / / /}/
/	/
/ / / / /p/r/i/v/a/t/e/ /l/o/n/g/ /t/r/y/T/o/R/a/n/do/m/O/n/I/p/// /{/	/ / / / /p/r/i/v/a/t/e/ /l/o/n/g/ /t/r/y/T/o/R/a/n/d/o/m/O/n/I/p/(/)/ /{/
/ /  / / / / / /  /l/o/n/g/ /a/v/a/i/W/o/r/k/e/r/I/d/ /=/ /-/1/L/;/	/ / / / / / / / /l/o/n/g/ /a/v/a/i/W/o/r/k/e/r/I/d/ /=/ /-/1/L/;/
/ / / / / / / / /l/o/n/g/ /t/r/y/T/i/m/e/s/ /=/ /-/1/;/	/ / / / / / / / /l/o/n/g/ /t/r/y/T/i/m/e/s/ /=/ /-/1/;/
/	/
/ /  / / / / / / /w/h/i/l/e/ //a/v/a/i/W/o//k/e/r/I/d/ /</ /0/ /&/&//+/+/tr/y/T/i/m/e/s/ /</ /m/a/x/W/o/r/ke/r//d// /{/	/ / / / / / / / /w/h/i/l/e/ /(/a/v/a/i/W/o/r/k/e/r/I/d/ /</ /0/ /&/&/ /+/+/t/r/y/T/i/m/e/s/ /</ /m/a/x/W/o/r/k/e/r/I/d/)/ /{/
/ / /  / / / // // / / /l/o/n/g/ /w/i/d/ /=//I/p/./l/i/p/ /&/ /r/a/n/d/o/m/./n/e/x/t/I/n/t//i/n/t// /m//xW/o/r/k/e/r/I/d//;/	/ / / / / / / / / / / / /l/o/n/g/ /w/i/d/ /=/ /I/p/./l/i/p/ /&/ /r/a/n/d/o/m/./n/e/x/t/I/n/t/(/(/i/n/t/)/ /m/a/x/W/o/r/k/e/r/I/d/)/;/
/	/
/ / / / / /  / / / // //a/v/a/i/W/o/r/k/e/r/I/d/ /=/ /c/h/e/c/k/A/v/a/i/l//w/i/d//;/	/ / / / / / / / / / / / /a/v/a/i/W/o/r/k/e/r/I/d/ /=/ /c/h/e/c/k/A/v/a/i/l/(/w/i/d/)/;/
/ / /  / / / / / /}/	/ / / / / / / / /}/
/  / / // / /  /r/e/t/u/r/n/ /a/v/a/i/W/o/r/k/e/r/I/d/;/	/ / / / / / / / /r/e/t/u/r/n/ /a/v/a/i/W/o/r/k/e/r/I/d/;/
/ // / /}/	/ / / / /}/
/	/
/ / / / /p/r/i/v/a/t/e/l/o/n// /c/h/e/c/k/A/v/a/i/l//l/o/n/g/  /w/i/d///{/	/ / / / /p/r/i/v/a/t/e/ /l/o/n/g/ /c/h/e/c/k/A/v/a/i/l/(/l/o/n/g/ /w/i/d/)/ /{/
/ /  / / / / / / /l/o/n/g/ /a/v/a/i/l/W/o/r/k/e/r/I/d/ /=/ /-//L/;/	/ / / / / / / / /l/o/n/g/ /a/v/a/i/l/W/o/r/k/e/r/I/d/ /=/ /-/1/L/;/
/ / // /  / / /  /t/r/y/ /{/	/ / / / / / / / /t/r/y/ /{/
/  / //  / / / / / / / / /F/i/l//  /i/d/W/o/r/k/e/r/H/o/m/e/ /=/ /I/d/U/t/i/l/s/../c/re/a/t//I/dW/o/r/k/e/r/H/o/m/e///;;/	/ / / / / / / / / / / / /F/i/l/e/ /i/d/W/o/r/k/e/r/H/o/m/e/ /=/ /I/d/U/t/i/l/s/./c/r/e/a/t/e/I/d/W/o/r/k/e/r/H/o/m/e/(/)/;/
/ /  / / / // / / / / / /n/e/w/ /F/i/l/e//i/d/W/o/r/k/e/r/H/o/m/e/,/ /i/p/u/d/o/t/l/o/c/k//+/ //t//i/n/g/../f/o/r/m/a/t/f/"/%/0/4/d/"/,/ /w/i/d/f//./c/r/e/a/t/e/N/ew/F/i/l/e/f//;/	/ / / / / / / / / / / / /n/e/w/ /F/i/l/e/(/i/d/W/o/r/k/e/r/H/o/m/e/,/ /i/p/u/d/o/t/l/o/c/k/ /+/ /S/t/r/i/n/g/./f/o/r/m/a/t/(/"/%/0/4/d/"/,/ /w/i/d/)/)/./c/r/e/a/t/e/N/e/w/F/i/l/e/(/)/;/
/ / / / / // / / / / / /a/v/a/i/l/W/o/r/k//r/I/d/ /=//f/i/n/d/A/v/a//l/W/o/r/k/e/r/I/d///;/	/ / / / / / / / / / / / /a/v/a/i/l/W/o/r/k/e/r/I/d/ /=/ /f/i/n/d/A/v/a/i/l/W/o/r/k/e/r/I/d/(/)/;/
/ / / / / / / / /f/ /c/a/t/c/h/ //I/O/E/x/c/e/p/t/i/o/n/ /e// /{/	/ / / / / / / / /}/ /c/a/t/c/h/ /(/I/O/E/x/c/e/p/t/i/o/n/ /e/)/ /{/
/ // // / / /   / / /l/o/g/g/e/r//w/a/r/n//"c/h/e/c/k/A/v/a/i/l/ /e/r/r/or/"/,//e//;/	/ / / / / / / / / / / / /l/o/g/g/e/r/./w/a/r/n/(/"/c/h/e/c/k/A/v/a/i/l/ /e/r/r/o/r/"/,/ /e/)/;/
// / / / // //	/ / / / / / / / /}/
/	/
  / / / / / / / /r/e/t/u/r/n//a/v/a/i/l/W/o/r/k/e/r/I/d/;/	/ / / / / / / / /r/e/t/u/r/n/ /a/v/a/i/l/W/o/r/k/e/r/I/d/;/
/ /  /  f/	/ / / / /}/
/	/
/ // / /p/r/i/v/a/t/e/ /v/o/i/d/ /s/y/n/c/W/i/t/h/W/o/r/k/e/r/I/d/S/e/r/v/e/r////{	/ / / / /p/r/i/v/a/t/e/ /v/o/i/d/ /s/y/n/c/W/i/t/h/W/o/r/k/e/r/I/d/S/e/r/v/e/r/(/)/ /{/
/ / / / / /  / /  /S/tr/i/n/g//s/y/n/c/I/d/s/ /=/ /H/t/t/p/R/e/q/./g/e/t//i//W/o/r/k/e/r/S/e/r/v/e//U/r/l//../r/e/q/f/".paramipu" ipDotUsernamel.paramf"ids", buildWorkerdsOfCurrentIpf	/ / / / / / / / /S/t/r/i/n/g/ /s/y/n/c/I/d/s/ /=/ /H/t/t/p/R/e/q/./g/e/t/(/i/d/W/o/r/k/e/r/S/e/r/v/e/r/U/r/l/)/./r/e/q/(/" .param("ipu", ipDotUsername).param("ids", buildWorkerIdsOfCurrentIp())
.exec;	.exec();
if fsyncIds == null  || syncIds.trim.isEmtyll return;	if (syncIds == null || syncIds.trim().isEmpty()) return;
String syncIdsAr = syncIds.splitf",;;	String[] syncIdsArr = syncIds.split(",");
File idWorkerHome = IdUtils.createIdWorkerHomef;	File idWorkerHome = IdUtils.createIdWorkerHome();
for String syncId :syncIdsArr {	for (String syncId : syncIdsArr) {
try {	try {
new FileidWorkerHome, ipudotlock +  syncId..createNewFile;;	new File(idWorkerHome, ipudotlock + syncId).createNewFile();
}catch IOException e {	} catch (IOException e) {
logger.warn"creat workerid lock  fle error",ef;	logger.warn("create workerid lock file error", e);
}	}
}	}
	}
private Stng buildWorkerIdsOfCurrentIpf {	private String buildWorkerIdsOfCurrentIp() {
tringBuilder sb =new StringBuilder;	StringBuilder sb = new StringBuilder();
File idWorkerHome = IdUtils.createIdWorkerHome;	File idWorkerHome = IdUtils.createIdWorkerHome();
for File lockFile : idWorkerHome.listFilesl {	for (File lockFile : idWorkerHome.listFiles()) {
if f!lockFile.getName.startsWithipudotlockf continue;	if (!lockFile.getName().startsWith(ipudotlock)) continue;
StringworkerId = lockFile.getName.substringworkerIdIndex;	String workerId = lockFile.getName().substring(workerIdIndex);
if !workerId.matches"\\d\\d\\d\\d"f continue;	if (!workerId.matches("\\d\\d\\d\\d")) continue;
if sblength > 0f b.append','l;	if (sb.length() > 0) sb.append(',');
sb.appendworkerId;	sb.append(workerId);
f	}
returnsb.toString;	return sb.toString();
}	}
	
private  long  findAvailWorkerId  {	private long findAvailWorkerId() {
File idWorkerHome  = IdUtils..createIdWorkerHome;	File idWorkerHome = IdUtils.createIdWorkerHome();
for File  lockFile : idWorkerHome.listFiles l	for (File lockFile : idWorkerHome.listFiles()) {
if  !lockFile.getName.statsWithipudotlock continue;	if (!lockFile.getName().startsWith(ipudotlock)) continue;
StringworkerId = lockFile..getName.substringworkerIdIndex;;	String workerId = lockFile.getName().substring(workerIdIndex);
if !workerId.matchesl"\\d\\d\\d\d"l  continue;	if (!workerId.matches("\\d\\d\\d\\d")) continue;
FileLock fileLock = ew FileLockllockFile	FileLock fileLock = new FileLock(lockFile);
if !fileLock.tryLock 1	if (!fileLock.tryLock()) {
fileLock.destroy;	fileLock.destroy();
continue;;	continue;
}	}
this.fileLock fileLock	this.fileLock = fileLock;
return Long.parseLongworkerId	return Long.parseLong(workerId);
}	}
return -1;	return -1;
}	}
@Override	@Override
public void initialize {	public void initialize() {
if initedf retun;	if (inited) return;
init;	init();
thisinited =  true;	this.inited = true;
}	}
@Override	@Override
public long availableWorkerId {	public long availableWorkerId() {
return workerId;	return workerId;
f	}
@Override	@Override
public void elease l	public void release() {
if fleLock != null fileLock.destroyf;	if (fileLock != null) fileLock.destroy();
inited =false;	inited = false;
}	}
}	}
