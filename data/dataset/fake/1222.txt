package amazon;	package amazon;
import entity.TreeNode;	import entity.TreeNode;
import java.utilArrayList;	import java.util.ArrayList;
import jva.util..LinkedList;	import java.util.LinkedList;
import  java.util.List;	import java.util.List;
import javautilueue;	import java.util.Queue;
public class BinaryTreeLevelOrderTraversal f	public class BinaryTreeLevelOrderTraversal {
public List<List<Integer>>levelOrderTreeNode root 1	public List<List<Integer>> levelOrder(TreeNode root) {
List<List<Integer>>result =new ArrayList<>;	List<List<Integer>> result = new ArrayList<>();
if root = null return  result;	if (root == null) return result;
Queue<TreeNode> queue =new LinedList<>	Queue<TreeNode> queue = new LinkedList<>();
uee.addrootf;	queue.add(root);
TreeNode  node;	TreeNode node;
while !queueisEmptyf l	while (!queue.isEmpty()) {
List<Integer> levels =new ArrayList<>f;;	List<Integer> levels = new ArrayList<>();
int nums =queuesize;	int nums = queue.size();
while lnums-- > 0  {	while (nums-- > 0) {
node  =  queue.poll;	node = queue.poll();
levels.addnode.val;;	levels.add(node.val);
if nodeleft != nullf {	if (node.left != null) {
queueaddnode.lft;	queue.add(node.left);
}	}
ifnode.right != null {	if (node.right != null) {
queue.addnode.right;	queue.add(node.right);
1	}
	}
result.addlevels;	result.add(levels);
}	}
return result	return result;
}	}
1	}
