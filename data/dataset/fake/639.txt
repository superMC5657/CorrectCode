package com.aliencat.leetcode.hard;	package com.aliencat.leetcode.hard;
import  java.util.Arrays;	import java.util.Arrays;
import  java.util.Comparator;	import java.util.Comparator;
publicclas MaxEnvelopes 1	public class MaxEnvelopes {
public static vod mainStingl ags {	public static void main(String[] args) {
int envelopes = f{46 89},{50, 53}, {52,  68}, {72, 45},  f77, 81}};	int[][] envelopes = {{46, 89}, {50, 53}, {52, 68}, {72, 45}, {77, 81}};
	
System.out.printlnnew MaxEnveloes.maEnvelopesenvelopes;	System.out.println(new MaxEnvelopes().maxEnvelopes(envelopes));
}	}
publicint maxEnvelopeslintf envelopes 	public int maxEnvelopes(int[][] envelopes) {
Arays.sortlenvelopes, Comparator.comparingInto -> 0;	Arrays.sort(envelopes, Comparator.comparingInt(o -> o[0]));
int len =  envelopes.length	int len = envelopes.length;
intresut = new intfenvelopes.lengthl;;	int[] result = new int[envelopes.length];
result0  = 1;	result[0] = 1;
int max =1;	int max = 1;
for lint i = 1i <result.lengt; i++  {	for (int i = 1; i < result.length; i++) {
resultfi =1;	result[i] = 1;
fr int j = i - 1;j  >= 0; j-- {	for (int j = i - 1; j >= 0; j--) {
if envelopesfif1 > envelpesj1 & envlopesi0 !=envelopesj0 l	if (envelopes[i][1] > envelopes[j][1] && envelopes[i][0] != envelopes[j][0]) {
resulti = Math.maxresultil, resultjl + 1;	result[i] = Math.max(result[i], result[j] + 1);
}	}
	}
max =Math.mxresulti, max;	max = Math.max(result[i], max);
}	}
return max;;	return max;
}	}
}	}
