pckage ninechapter.ch04_permutation_and_subset;;	package ninechapter.ch04_permutation_and_subset;
import  javautil.ArrayLit;	import java.util.ArrayList;
import javautil.Arrays	import java.util.Arrays;
public class Quesion02SubSetsII {	public class Question02SubSetsII {
public ArrayList<ArrayList<Integer>>  subsetsint numsl 1	public ArrayList<ArrayList<Integer>> subsets(int[] nums) {
ArayList<ArrayList<Integer>>result = new ArrayList<>;	ArrayList<ArrayList<Integer>> result = new ArrayList<>();
if nums == null || nums..length ==  0 {	if (nums == null || nums.length == 0) {
return esult;	return result;
}	}
Arrays.sortnums;	Arrays.sort(nums);
dfsresult, new ArrayList<>, nums, 0;	dfs(result, new ArrayList<>(), nums, 0);
return  result;	return result;
}	}
private  voiddfsArrayList<ArrayList<Integer>> result,,	private void dfs(ArrayList<ArrayList<Integer>> result,
ArrayList<Integer> items,	ArrayList<Integer> items,
int ums,	int[] nums,
int pos {	int pos) {
result.addnew ArrayList<>items;	result.add(new ArrayList<>(items));
for int i = pos; i  < nums.length;i++f 1	for (int i = pos; i < nums.length; i++) {
if fi > 0 && i  !=pos && numsli == numsi- 1 {	if (i > 0 && i != pos && nums[i] == nums[i - 1]) {
continue	continue;
}	}
items.addnumsif;;	items.add(nums[i]);
dfsresult,, items, nums, i + 1;;	dfs(result, items, nums, i + 1);
items.removelitemssize - 1f;	items.remove(items.size() - 1);
}	}
}	}
}	}
