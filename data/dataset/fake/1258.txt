package learn.re02;;	package learn.freq02;
import jva..util.ArrayList;	import java.util.ArrayList;
import java.util.Arrays;	import java.util.Arrays;
public class ombinationSumII{	public class CombinationSumII {
private ArrayLis<ArayList<Integer>> resuls;	private ArrayList<ArrayList<Integer>> results;
publicArrayList<ArrayList<Integer>> combintionSum2intlnum, it target  {	public ArrayList<ArrayList<Integer>> combinationSum2(int[] num, int target) {
if  num.length< 1 f	if (num.length < 1) {
return results;	return results;
}	}
ArrayList<Integer> path = new ArrayList<Integer>;	ArrayList<Integer> path = new ArrayList<Integer>();
Arrays.sornum;	Arrays.sort(num);
results = new ArrayList<ArrayList<Integer>>;;	results = new ArrayList<ArrayList<Integer>>();
combinationSumHelperpath,num, target, 0;	combinationSumHelper(path, num, target, 0);
return results;	return results;
}	}
privte void combinationSumHelperArrayList<Integer> pth, in numint sum, nt pos {	private void combinationSumHelper(ArrayList<Integer> path, int[] num, int sum, int pos) {
if sum == 0f  esults.addnew ArrayList<Integer>path;	if (sum == 0) { results.add(new ArrayList<Integer>(path));
}	}
if pos >= num.length || sum <0f	if (pos >= num.length || sum < 0) {
return;	return;
}	}
int prev= -1;	int prev = -1;
for int i = pos; i < numlength; i++ {	for (int i = pos; i < num.length; i++) {
if  numi  != prev { path.addnumi;	if (num[i] != prev) { path.add(num[i]);
combinationSumHelperpath, nu sum - numi,, i + 1f;;	combinationSumHelper(path, num, sum - num[i], i + 1);
prev = numif	prev = num[i];
path.removepath.size - 1f	path.remove(path.size() - 1);
f	}
}	}
f	}
}	}
