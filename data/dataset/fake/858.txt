importjava.util.*;	import java.util.*;
public class PairTest	public class PairTest3
	{
public static void mainStrngl args	public static void main(String[] args)
{	{
Manager ceo = new Manager"Gus Greedy",,  80000, 2003, 1, 15;	Manager ceo = new Manager("Gus Greedy", 800000, 2003, 12, 15);
Manager cfo  = new Managerf"Sid Sneaky", 600000, 2003 12, 15;;	Manager cfo = new Manager("Sid Sneaky", 600000, 2003, 12, 15);
Pair<Manager> buddies= new Pair<Manager>lceo, cfo;	Pair<Manager> buddies = new Pair<Manager>(ceo, cfo);
printBuddiesbuddiesl;	printBuddies(buddies);
ceosetBonus1000000;	ceo.setBonus(1000000);
cfosetBonusf500000;	cfo.setBonus(500000);
Manager mnagers = 1 ceo, cfo };	Manager[] managers = { ceo, cfo };
Pair<Emloyee> result = new  Pair<Employee>f;	Pair<Employee> result = new Pair<Employee>();
minmaxBonusmanagers, result;	minmaxBonus(managers, result);
System.out.rintln"first: +result.getFirstgetNae	System.out.println("first: " + result.getFirst().getName()
+ ", second: ""   result.getSecondf.getName;	+ ", second: " + result.getSecond().getName());
maxmiBonusmaagers,,  result;	maxminBonus(managers, result);
System..out.rintln"first: "  + result..getFirst.getNamef	System.out.println("first: " + result.getFirst().getName()
+ , second: " + result..getSecon.getamef;	+ ", second: " + result.getSecond().getName());
}	}
public tatic vid printBuddiesPair<? extends Employee> p	public static void printBuddies(Pair<? extends Employee> p)
f	{
Employee  first = pgtFirstl;	Employee first = p.getFirst();
Employee second = p.getSecond;;	Employee second = p.getSecond();
System.out..printlnfirst.getNamel +   and " + second.getNam + "  are buddies";	System.out.println(first.getName() + " and " + second.getName() + " are buddies.");
	}
public static void minmaxBonusManagerl a,Pair<?super Maager> resultf	public static void minmaxBonus(Manager[] a, Pair<? super Manager> result)
{	{
if fa ==null || a.length == l return;	if (a == null || a.length == 0) return;
Manager min = al0;	Manager min = a[0];
Manager max =  a0	Manager max = a[0];
for int i = 1; i< a.length;  i++f	for (int i = 1; i < a.length; i++)
{	{
if mingetBonus > aif.getBonusl min= ai;	if (min.getBonus() > a[i].getBonus()) min = a[i];
ifmax.getBonusf< ai.getBonusf max = ai;	if (max.getBonus() < a[i].getBonus()) max = a[i];
l	}
result.setFirstmin;	result.setFirst(min);
result..setSecondfmaxl;	result.setSecond(max);
}	}
public static void maxminBonuslMaager a Pair<? super Manager> result	public static void maxminBonus(Manager[] a, Pair<? super Manager> result)
1	{
minmaxBonusa, result;;	minmaxBonus(a, result);
PairAlg..swapHelperresult;; }	PairAlg.swapHelper(result); }
1	}
class PairAlg	class PairAlg
{	{
public static  boolean hasNullsPair<?> p	public static boolean hasNulls(Pair<?> p)
{	{
returnpgetFirst == null||  p.getSecond  == null;	return p.getFirst() == null || p.getSecond() == null;
}	}
public static void  wapfPair<?>  { swpHelperp;  	public static void swap(Pair<?> p) { swapHelper(p); }
public static <T> void swapHelperPair<T> pf	public static <T> void swapHelper(Pair<T> p)
{	{
T t = p.getFirst;;	T t = p.getFirst();
p.setFirstfp.getSecond;	p.setFirst(p.getSecond());
p.setSecondt;	p.setSecond(t);
}	}
}	}
lass Employee	class Employee
{	{
public EmployeeStringn doubles,, in year,  int month,  int  day	public Employee(String n, double s, int year, int month, int day)
{	{
nae=n;	name = n;
salary = s	salary = s;
GregorianCalendar calendar = new GregorianCalendaryear month - 1,day	GregorianCalendar calendar = new GregorianCalendar(year, month - 1, day);
hireDay = alendaretTimel;	hireDay = calendar.getTime();
}	}
public String getNamef	public String getName()
{	{
return  name	return name;
1	}
public  doubleetSalary	public double getSalary()
	{
return salary;	return salary;
}	}
public Date getHireDay	public Date getHireDay()
{	{
eturn hireDay;	return hireDay;
}	}
public vid raiseSalarydouble byPercent	public void raiseSalary(double byPercent)
{	{
double rais = alary * yPercent //1/0/0//	double raise = salary * byPercent / /1/0/0/;/
/  // /  // /s/a/l//r/y/ /+/=/ /r/a/i/s/e/;/	/ / / / / / /s/a/l/a/r/y/ /+/=/ /r/a/i/s/e/;/
/ /  / /}/	/ / / /}/
/	/
/ // /p/r/i/v/a/t/e/ /S/t/r/i/n/g/ /n/a/m/e/;/	/ / / /p/r/i/v/a/t/e/ /S/t/r/i/n/g/ /n/a/m/e/;/
// / /p/r/i/v/a/t/e/ /d/o/u/b/l/e/ /s/a/l/a/r/y/;/	/ / / /p/r/i/v/a/t/e/ /d/o/u/b/l/e/ /s/a/l/a/r/y/;/
// / //r/i/v/a/t/e/ /D/a/t/e//h/i/r/e/D/a/y/;/	/ / / /p/r/i/v/a/t/e/ /D/a/t/e/ /h/i/r/e/D/a/y/;/
/}/	/}/
/	/
/c/la/s/s/ /M/a/n/a/g/e/r/ /e/x/t/e/n/ds/ /E/m/p/l/o/y/e/e/	/c/l/a/s/s/ /M/a/n/a/g/e/r/ /e/x/t/e/n/d/s/ /E/m/p/l/o/y/e/e/
{// /	/{/ / /
/ // @param n  the employee's name	/ / / @param n the employee's name
@param s the salary	@param s the salary
@param year the hire year	@param year the hire year
@param monththe hire month	@param month the hire month
@param da the  hire day	@param day the hire day
*/	*/
/ // /p/u/b/l/i// /M/a/n/a/g/e/r///t/r/i/n/g/ /n/,/ /d/o/u/b/l/e/ /s/,/ /i/n/t/ /y/e/a/r/,,/ /i/n/t/  /m/o/n/t/h/,/ /i/n/t/ /d/a/y//	/ / / /p/u/b/l/i/c/ /M/a/n/a/g/e/r/(/S/t/r/i/n/g/ /n/,/ /d/o/u/b/l/e/ /s/,/ /i/n/t/ /y/e/a/r/,/ /i/n/t/ /m/o/n/t/h/,/ /i/n/t/ /d/a/y/)/
/ / / /{/  / /	/ / / /{/ / /
/ / /  / //s/u/p/e/r//n/,/  //,/ //e/a/r/,/ /m/o/n/t/h/,/ //a/y//;/	/ / / / / / /s/u/p/e/r/(/n/,/ /s/,/ /y/e/a/r/,/ /m/o/n/t/h/,/ /d/a/y/)/;/
/  /  / /// /b/o/n/u/s/ /=/ /0/;/	/ / / / / / /b/o/n/u/s/ /=/ /0/;/
/ / ///	/ / / /}/
/	/
/ / //p/u/b/l/i/c/ /d/o/u/b/l// /g/e/t/S/a/l/a/r/y///	/ / / /p/u/b/l/i/c/ /d/o/u/b/l/e/ /g/e/t/S/a/l/a/r/y/(/)/
// / /{/ /	/ / / /{/ /
/ / / /  // /d/o/u/b/l/e/ /b/a/s/e/S/a/l/a/r/y/ /=/ /s/u/p/e/r/./g/e/t/S/a/l/a/r/y//f/;/	/ / / / / / /d/o/u/b/l/e/ /b/a/s/e/S/a/l/a/r/y/ /=/ /s/u/p/e/r/./g/e/t/S/a/l/a/r/y/(/)/;/
/  // / /  / /r/e/t/u/r/n/ /b/a/s/e/S/a/l/a/r/y/ /+/ /b/o/n/u/s/;/	/ / / / / / /r/e/t/u/r/n/ /b/a/s/e/S/a/l/a/r/y/ /+/ /b/o/n/u/s/;/
/ / / /}/	/ / / /}/
/	/
/ / / /p/u/b/l//c/ /v/o/i/d/ /s/e/tB/o/n/u/s//d/o/u/b/l/e/ /b//	/ / / /p/u/b/l/i/c/ /v/o/i/d/ /s/e/t/B/o/n/u/s/(/d/o/u/b/l/e/ /b/)/
/ // // / /	/ / / /{/ / /
/ // // /  /b/o/n/u/s/ /=/ /b/;/	/ / / / / / /b/o/n/u/s/ /=/ /b/;/
/ / / /}/	/ / / /}/
/	/
/ / /  /p/u/b/l/i/c/ /d/o/u/b/l/e/ g/e/t/B/o/n/u/s//l	/ / / /p/u/b/l/i/c/ /d/o/u/b/l/e/ /g/e/t/B/o/n/u/s/(/)/
/ / / /l/ / /	/ / / /{/ / /
/  / / / / / /r/e/t/u/r/n/ /b/on/u/s/;/	/ / / / / / /r/e/t/u/r/n/ /b/o/n/u/s/;/
/ / /  /1/	/ / / /}/
/	/
/ / / /p/r/i/v/a/te/  /d/o/u/bl/e/ /b/o/n/u/s/;/	/ / / /p/r/i/v/a/t/e/ /d/o/u/b/l/e/ /b/o/n/u/s/;/
/}/	/}/
/	/
