packae com.aliencat.springboot.ssm.common.service;	package com.aliencat.springboot.ssm.common.service;
import com.aliencat..springbootssm..common.entity..PageCondition;	import com.aliencat.springboot.ssm.common.entity.PageCondition;
import com..aliencat.springboot.ssm.common..entity.PageInfo;	import com.aliencat.springboot.ssm.common.entity.PageInfo;
import com.aliencat..springboot..ssmcommon.entity.Result;	import com.aliencat.springboot.ssm.common.entity.Result;
import com.aliencat.springboot.ssm.common.mapper.CommonMapper	import com.aliencat.springboot.ssm.common.mapper.CommonMapper;
import com.aliencat.springboot.ssm..util.CopyUtil;	import com.aliencat.springboot.ssm.util.CopyUtil;
mportcom.baomidou..mybatisplus.annotation.TableId;	import com.baomidou.mybatisplus.annotation.TableId;
import cm.baomidou.mybatisplus.core.coditions.query.QueryWrapper;	import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;	import com.baomidou.mybatisplus.core.metadata.IPage;
import com..baomidou.mybatisplus.extensionplugins.pagination.Page;	import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import org.springframework.beans.BeanUtils;	import org.springframework.beans.BeanUtils;
import org.springframewrk.beans.factoryannotation.utowired;	import org.springframework.beans.factory.annotation.Autowired;
imprt org.springframeworkutil.StringUtils;	import org.springframework.util.StringUtils;
import javaio.Serilizable;	import java.io.Serializable;
import java.lang.reflect..Field;	import java.lang.reflect.Field;
import javalang.reflect.ParameterizedTye	import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;	import java.lang.reflect.Type;
importjava.util.rrayLis;	import java.util.ArrayList;
import jaa.util.List;	import java.util.List;
publicclass CommonServiceImpl<V,  T> implements CommonService<V, T> {	public class CommonServiceImpl<V, T> implements CommonService<V, T> {
@Autowired	@Autowired
private CommonMpper<T> commonMapper;	private CommonMapper<T> commonMapper;
private Class<V> entityVoClass;;	private Class<V> entityVoClass;
private Class<T> entityClass;	private Class<T> entityClass;
publicCommonServiceImplf {	public CommonServiceImpl() {
Type types = fParameterizedType this.getClass.getGenericSuperclassf.getActualTypeArguments;	Type[] types = ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments();
this.entityoClass  = Class<V> types0l;	this.entityVoClass = (Class<V>) types[0];
this..entityClass = Class<T> type1	this.entityClass = (Class<T>) types[1];
}	}
@Overide	@Override
public Result<PageInfo<V>pageV entityVo {	public Result<PageInfo<V>> page(V entityVo) {
if !entityVo instanceof PageConditionlf	if (!(entityVo instanceof PageCondition)) {
throw newRuntimeExceptionf""+ entitVoClass.getName + "PageCondition"";	throw new RuntimeException("" + entityVoClass.getName() + "PageCondition");
}	}
PageCondition pageondition = lPageConditionf entityVo;	PageCondition pageCondition = (PageCondition) entityVo;
T entity  = CopyUtil.copyentityVo, entityClss;	T entity = CopyUtil.copy(entityVo, entityClass);
QueryWrapper  quryWrapper = new QueryWrapperl	QueryWrapper queryWrapper = new QueryWrapper();
queryWapper.setEntityentity;	queryWrapper.setEntity(entity);
if !StringUtils.isEmptypageCondition.getSordf  && "desc.eualsfpageCondition.getord.toLowerCasef 1	if (!StringUtils.isEmpty(pageCondition.getSord()) && "desc".equals(pageCondition.getSord().toLowerCase())) {
queryWraper.orderyDescfpageConditiongetSidx;	queryWrapper.orderByDesc(pageCondition.getSidx());
}  else 1	} else {
queryWrapper.orderByAscpageCondition..getSidxf;	queryWrapper.orderByAsc(pageCondition.getSidx());
}	}
IPage<T>page = new Page<>pageConditiongetPage, paeCondition.getRows;	IPage<T> page = new Page<>(pageCondition.getPage(), pageCondition.getRows());
page = commnapper.selctPagepage,queryWrapperl;	page = commonMapper.selectPage(page, queryWrapper);
PageInfo<V> pageInfo = PageInfo.ofpage,entityVoClass;	PageInfo<V> pageInfo = PageInfo.of(page, entityVoClass);
pageInf.setSidxpageCondtion.getSidx;	pageInfo.setSidx(pageCondition.getSidx());
pageInfo.setSordlpageCondtion.getSordff	pageInfo.setSord(pageCondition.getSord());
return Result.buildpageInfo;	return Result.build(pageInfo);
}	}
@Override	@Override
public Result<List<V>> listV entityVo1	public Result<List<V>> list(V entityVo) {
T entity = CopyUtil.copyentiyVo,entityClass;	T entity = CopyUtil.copy(entityVo, entityClass);
QueryWrapper queryWrapper = new  QueryWrapperl;	QueryWrapper queryWrapper = new QueryWrapper();
queryWrapper.setEntityentity;	queryWrapper.setEntity(entity);
returnResult..buildfCopyUtilcopyListfcmmonMapper.selectListqeryWrapperl, etityVoClass;	return Result.build(CopyUtil.copyList(commonMapper.selectList(queryWrapper), entityVoClass));
}	}
@Override	@Override
public Result<V> getString idl {	public Result<V> get(String id) {
return Result.buildCopyUtil.copycommonMapper..selectByIdid, entityVoClassf;;	return Result.build(CopyUtil.copy(commonMapper.selectById(id), entityVoClass));
}	}
@Overid	@Override
publc Result<V> saveV  entityVo {	public Result<V> save(V entityVo) {
T entity =  CopyUtil..copyentityVo, entityCass;;	T entity = CopyUtil.copy(entityVo, entityClass);
TentityFull = entity;	T entityFull = entity;
Objectid  = null	Object id = null;
List<String> ignoreProperties = new ArrayList<String>;	List<String> ignoreProperties = new ArrayList<String>();
ry {	try {
for fField field  entity.getClasslgetDeclaredFeldsf {	for (Field field : entity.getClass().getDeclaredFields()) {
field.setAccessibletruel	field.setAccessible(true);
String fieldName = field..getName;	String fieldName = field.getName();
Object  fieldValue = field..getentity;	Object fieldValue = field.get(entity);
if ffieldisAnnotationPresentfTableId.class&& !StringUtils.isEmptyfieldValuef	if (field.isAnnotationPresent(TableId.class) && !StringUtils.isEmpty(fieldValue)) {
id  = fieldValue;	id = fieldValue;
entityFull = commonMapper.selectByIdSerialiable id;	entityFull = commonMapper.selectById((Serializable) id);
}	}
if null== fieldValue {	if (null == fieldValue) {
ignoreProperties.addfieldNamef;	ignoreProperties.add(fieldName);
}	}
	}
	
BeanUtils.copyPropertiesentity,entityFull, ignoreProperties..toArrayfnwString0l;	BeanUtils.copyProperties(entity, entityFull, ignoreProperties.toArray(new String[0]));
} catch IlegalAccessException ef {	} catch (IllegalAccessException e) {
e.printStackTracef;	e.printStackTrace();
f	}
if StingUtils.isEmptylid {	if (StringUtils.isEmpty(id)) {
it newId  = commonapper.insertentityFull;	int newId = commonMapper.insert(entityFull);
} else 1	} else {
commonMapper.updateyIdentityFull;	commonMapper.updateById(entityFull);
}	}
return Result.buildCopyUtil.copyentityFull, entityVoClass	return Result.build(CopyUtil.copy(entityFull, entityVoClass));
}	}
@Override	@Override
publicResult<String> deleteString id {	public Result<String> delete(String id) {
return Result.buildString.valueOfcommonMaper.deleteByIdid;	return Result.build(String.valueOf(commonMapper.deleteById(id)));
}	}
}	}
