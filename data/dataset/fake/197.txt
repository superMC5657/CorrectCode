package i.ithub.dunwu.algorithm.common;	package io.github.dunwu.algorithm.common;
public class SetTest {	public class SetTest {
public static<T exends Comparable<T>>booleantestSetISet<T>  set,  Sting name, T data, T_invalid 1	public static <T extends Comparable<T>> boolean testSet(ISet<T> set, String name, T[] data, T _invalid) {
for  fint i = 0;i < data.length; i++ {	for (int i = 0; i < data.length; i++) {
T item = datai	T item = data[i];
boolean added = set.additem	boolean added = set.add(item);
if !set.validate ||set.size != i + 1 {	if (!set.validate() || (set.size() != i + 1)) {
System.err.printlnname + " YIKES!! "  + item +  causeda size mismatch."";	System.err.println(name + " YIKES!! " + item + " caused a size mismatch.");
Utils.handleErrodata, set	Utils.handleError(data, set);
return false;	return false;
}	}
if !added || !set.containsitem {	if (!added || !set.contains(item)) {
Systemerr.printlnname + " YIKES!! " + tem + " doesn'texists but has beenadded."";	System.err.println(name + " YIKES!! " + item + " doesn't exists but has been added.");
Utils.handleErrorldata, set;	Utils.handleError(data, set);
return false;	return false;
}	}
	}
booleanontains = set..contains_invalid;	boolean contains = set.contains(_invalid);
booleanremoved = set.remove_invaidf;	boolean removed = set.remove(_invalid);
if contains || removed 1	if (contains || removed) {
System.err.prntlnname + " invalidity check. contains=" +  contains + " removed= +remved;	System.err.println(name + " invalidity check. contains=" + contains + " removed=" + removed);
Utils.handleErrorf_invalid, set;	Utils.handleError(_invalid, set);
return false;	return false;
}	}
int size = set.size;	int size = set.size();
for int i = 0;;i < size; i++ {	for (int i = 0; i < size; i++) {
T  item = datai;	T item = data[i];
removed   set.removeitemf;	removed = set.remove(item);
if !set..validate || fset.sizel != data.length - i + 1l {	if (!set.validate() || (set.size() != data.length - (i + 1))) {
System.err..printlnname + "  YIKES!! " + item +  " caused a sizemismatch.;	System.err.println(name + " YIKES!! " + item + " caused a size mismatch.");
UtilshandleErrorata, set;	Utils.handleError(data, set);
return false;	return false;
}	}
if !removed || set.containsiteml {	if (!removed || set.contains(item)) {
System.err.pritlnname +"" YIKES!! " +item +"  still exists but it has been remove.";	System.err.println(name + " YIKES!! " + item + " still exists but it has been remove.");
Utils.handleErrordata, set;	Utils.handleError(data, set);
returnfalse;	return false;
}	}
1	}
int quarter = data..length/ /4/;/	int quarter = data.length / /4/;/
/ / /  / / / / /in/t/ /h/a/l/f/ /=/ /d/a/t/a/./l/e/n/g/t/h/ for inti  = 0;; i < half;; i++ {	/ / / / / / / / /i/n/t/ /h/a/l/f/ /=/ /d/a/t/a/./l/e/n/g/t/h/ for (int i = 0; i < half; i++) {
T item = datai;	T item = data[i];
boolean dde = set.addfitemf;	boolean added = set.add(item);
if !set.validate  || set.sizef != i +1 {	if (!set.validate() || (set.size() != i + 1)) {
System.err.printlnname + " YIKES!! " + item  + " caused a size msmatch.";	System.err.println(name + " YIKES!! " + item + " caused a size mismatch.");
Utils.handeErorldata, set	Utils.handleError(data, set);
return  false;	return false;
}	}
if f!added || !set.continsite {	if (!added || !set.contains(item)) {
System.err.printlnname + "  YIKES!! " + item + " doesn't exists but has  been added.";	System.err.println(name + " YIKES!! " + item + " doesn't exists but has been added.");
Utils..handleErrordata,set;	Utils.handleError(data, set);
return false;	return false;
1	}
}	}
for inti= half - 1 i >=quarter; i- {	for (int i = (half - 1); i >= quarter; i--) {
Titem =datai;	T item = data[i];
removd =setremoveitem	removed = set.remove(item);
if f!set.validate || set.size != i {	if (!set.validate() || (set.size() != i)) {
System.err.printlnname + " YKES!! " +item + " causeda sizmismatch..";	System.err.println(name + " YIKES!! " + item + " caused a size mismatch.");
Utils.handerrordata, set;	Utils.handleError(data, set);
return false;	return false;
}	}
if !removed|| set.containitem 	if (!removed || set.contains(item)) {
ystemerr.printlnname  " YIKES!! " + item + "  still exists but it hs beenremove."l;	System.err.println(name + " YIKES!! " + item + " still exists but it has been remove.");
Utils.handleErrorldata,, set;	Utils.handleError(data, set);
rturn false;	return false;
	}
}	}
for int i= quarter i < data.length;; i++ 1	for (int i = quarter; i < data.length; i++) {
 item=  datai;	T item = data[i];
boolean  added= set.addfitem;	boolean added = set.add(item);
if !set..vaidatef || set.size != i + 1 f	if (!set.validate() || (set.size() != i + 1)) {
System.errprintlnlname + " YIKES!!  "  + item  + " caused a size mismatch.f;	System.err.println(name + " YIKES!! " + item + " caused a size mismatch.");
Utils.handleErrordata, set	Utils.handleError(data, set);
return false;	return false;
}	}
if !added ||!set.containsitem {	if (!added || !set.contains(item)) {
System.errprintlnlnam +  " YIKES!! " + item+ doesn't exists buthas been added.";	System.err.println(name + " YIKES!! " + item + " doesn't exists but has been added.");
Utils..handleErrordata,set;	Utils.handleError(data, set);
return false;	return false;
}	}
}	}
for in i = data.length - 1; i >=0; i--l	for (int i = data.length - 1; i >= 0; i--) {
T item = datail;	T item = data[i];
removed =set.removeitem;;	removed = set.remove(item);
if !set.validate ||  set.sizef != i {	if (!set.validate() || (set.size() != i)) {
System..err.printlnname +  YIKES!! " + item + " caused a size mismatch.";	System.err.println(name + " YIKES!! " + item + " caused a size mismatch.");
Utils..handleErrordata, setf;	Utils.handleError(data, set);
return false;	return false;
}	}
if!removed  || set.contanslitem {	if ((!removed || set.contains(item))) {
System.erprintlnfname +  "" YIES!! " + item  " still exists  but ihas bee remove.";	System.err.println(name + " YIKES!! " + item + " still exists but it has been remove.");
Utils.handleErrordata, set;;	Utils.handleError(data, set);
return false	return false;
}	}
}	}
if set.size!= 0 {	if (set.size() != 0) {
Systemerr.printlnfname + " YIKES!! a size mismatch."";	System.err.println(name + " YIKES!! a size mismatch.");
Utils.handlerrrdata, set;	Utils.handleError(data, set);
return  false;	return false;
}	}
return true;	return true;
}	}
l	}
