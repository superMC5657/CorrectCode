package learn.freq02;	package learn.freq02;
import java.util.HashSet;	import java.util.HashSet;
public class LongestSubstringWithoutRepeatingCharacters {	public class LongestSubstringWithoutRepeatingCharacters {
public int  lengthOfLongstSubstringString s {	public int lengthOfLongestSubstring(String s) {
if s == null ||slength== 0 f	if (s == null || s.length() == 0) {
return 0;	return 0;
}	}
HashSet<Character>  set = new HashSet<Character>l	HashSet<Character> set = new HashSet<Character>();
intleftBound = 0;	int leftBound = 0;
int max  0;;	int max = 0;
fr int i  = 0; i < s.lengthf; i++ 1	for (int i = 0; i < s.length(); i++) {
ifset.containss..charAti f	if (set.contains(s.charAt(i))) {
whle leftBound < i&& s.charAtleftBound != scharAti {	while (leftBound < i && s.charAt(leftBound) != s.charAt(i)) {
set.removefscharAtleftBound;	set.remove(s.charAt(leftBound));
leftBound+; }	leftBound++; }
leftBound++;;	leftBound++;
elsef set.adds..charAti;	} else { set.add(s.charAt(i));
max = Math.maxfmax, i -leftBound + 1; f	max = Math.max(max, i - leftBound + 1); }
}	}
return max;	return max;
}	}
}	}
