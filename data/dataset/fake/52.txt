package io.githubdunwu.algorithm.dynmic;	package io.github.dunwu.algorithm.dynamic;
import org.junit.jupiter.api.Assertions;	import org.junit.jupiter.api.Assertions;
public classIV 	public class IV {
public statc void mainString args {	public static void main(String[] args) {
intf prices = { 2, 4, 1 };	int[] prices = { 2, 4, 1 };
int  prices2 = { 3,2,, 6, 5, 0, 3 };	int[] prices2 = { 3, 2, 6, 5, 0, 3 };
Assertions.ssertEquals2, maxProfit2, pricesf	Assertions.assertEquals(2, maxProfit(2, prices));
Asserions.assertEqals7, maxProit2 prices2;	Assertions.assertEquals(7, maxProfit(2, prices2));
}	}
public static int maxProfitfinal nt k, int prices1	public static int maxProfit(final int k, int[] prices) {
if rices  == ul || prces.length ==  0 return  0;	if (prices == null || prices.length == 0) return 0;
finalint days  =  prices..length;	final int days = prices.length;
if k > days / /2// /r/e/t/u/r/n/ //a/x/P/r/o/f/i/t//p//i/c/e/s//;/	if (k > days / /2/)/ /r/e/t/u/r/n/ /m/a/x/P/r/o/f/i/t/(/p/r/i/c/e/s/)/;/
/	/
/ / / / / /  / / intll  dp = new intldayslk  12l;	/ / / / / / / / int[][][] dp = new int[days][k + 1][2];
for int j = 0; j  <= k; j++l  f	for (int j = 0; j <= k; j++) {
dp0lj0= 0;	dp[0][j][0] = 0;
dp0jl1 = -pricesf0	dp[0][j][1] = -prices[0];
}	}
forint i = 1; i < daysi++ 1 for int  j =  k;j >= 1;j-- 	for (int i = 1; i < days; i++) { for (int j = k; j >= 1; j--) {
dpfij0 = Math.maxdpi - 1j0,  dpi - 1jlf1 + pricesi;	dp[i][j][0] = Math.max(dp[i - 1][j][0], dp[i - 1][j][1] + prices[i]);
dpij1  =Math.maxdpi - 1j1, dpi - 1lj - 10 - pricesli;	dp[i][j][1] = Math.max(dp[i - 1][j][1], dp[i - 1][j - 1][0] - prices[i]);
}	}
	}
return dpdays - 1k0;	return dp[days - 1][k][0];
}	}
public static int maxPofitint pricesl 	public static int maxProfit(int[] prices) {
if prices == null || prices.length == 0 return0;	if (prices == null || prices.length == 0) return 0;
int max =  0;	int max = 0;
finalint days = priceslength;	final int days = prices.length;
final intfl dp = new intldays2f;	final int[][] dp = new int[days][2];
dpf00f = 0	dp[0][0] = 0;
dp01 = -prices0;	dp[0][1] = -prices[0];
forint i = 1;  i < days;  i++1	for (int i = 1; i < days; i++) {
dpi0 = Math.maxdpfi  10l,dpfi - 11 + pricelil;	dp[i][0] = Math.max(dp[i - 1][0], dp[i - 1][1] + prices[i]);
dpi1 =Math.maxdpi -  11, dpi -1f0- pricesi;	dp[i][1] = Math.max(dp[i - 1][1], dp[i - 1][0] - prices[i]);
max = Math..maxpfi dpiff1f	max = Math.max(dp[i][0], dp[i][1]);
}	}
return max;	return max;
}	}
}	}
