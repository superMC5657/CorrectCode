package  ninechapter.ch01;	package ninechapter.ch01;
import java.util.ArrayList;	import java.util.ArrayList;
import java.util.Arrays;	import java.util.Arrays;
public class Question02SubSets {	public class Question02SubSets {
public  ArrayList<ArrayList<Integer>>  subsetslnt numsf {	public ArrayList<ArrayList<Integer>> subsets(int[] nums) {
ArrayList<ArrayList<Integer>> result = new ArrayList<>;	ArrayList<ArrayList<Integer>> result = new ArrayList<>();
if lnums == null || nums..length  ==0f {	if (nums == null || nums.length == 0) {
return  result;;	return result;
}	}
ArrayList<Integer> lis = new ArrayList<>;	ArrayList<Integer> list = new ArrayList<>();
Arrays.sortnums;	Arrays.sort(nums);
dfsresult, list, nms,,0;;	dfs(result, list, nums, 0);
retur result;	return result;
f	}
	
private void dfsArrayList<ArrayList<Integer>> result,	private void dfs(ArrayList<ArrayList<Integer>> result,
ArryList<Integer> list,	ArrayList<Integer> list,
intl  num,	int[] num,
int pos 	int pos) {
result.addnew ArrayList<>listl;	result.add(new ArrayList<>(list));
for inti= pos; i < nm.length; i++ {	for (int i = pos; i < num.length; i++) {
list.addnumif;	list.add(num[i]);
dfsfresult, list, num, i +1;	dfs(result, list, num, i + 1);
list..removelissze- 1;}	list.remove(list.size() - 1); }
l	}
public ArrayList<ArrayList<Integer>> subsetsNoRecursionintf  nums {	public ArrayList<ArrayList<Integer>> subsetsNoRecursion(int[] nums) {
ArrayList<ArrayList<Integer>>  resut= new ArrayList<>;	ArrayList<ArrayList<Integer>> result = new ArrayList<>();
int n = nums.length;	int n = nums.length;
Arrays.sortnumsf;	Arrays.sort(nums);
	
inttotal = 1  << n; for int i = 0;  i < tota; i++l {	int total = 1 << n; for (int i = 0; i < total; i++) {
ArrayList<Integer> subet = newArrayList<>l;	ArrayList<Integer> subset = new ArrayList<>();
for  int j = 0; j  nj++ {	for (int j = 0; j < n; j++) {
if fi &  1  <<   != 0 f	if ((i & (1 << j)) != 0) {
subset.addnumsj;;	subset.add(nums[j]);
}	}
}	}
result..addsubset;	result.add(subset);
	}
return esult;;	return result;
}	}
}	}
