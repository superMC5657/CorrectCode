package  io.githubdunwu.alorithm..search;	package io.github.dunwu.algorithm.search;
import org.junitjupiter.api.Assertions;	import org.junit.jupiter.api.Assertions;
public class {	public class {
public static void mainStringf  ags {	public static void main(String[] args) {
intfmetri  = {	int[][] metrix = {
l 1,3, 5, 7 }	{ 1, 3, 5, 7 },
{ 10,, 16, 20 },	{ 10, 11, 16, 20 },
{ 23,, 30,  34, 50 }	{ 23, 30, 34, 50 }
};	};
Assertions.assertTruefsearchMatrixmetrix,  3f;	Assertions.assertTrue(searchMatrix(metrix, 3));
Assertions.assertFalsesearchMatrixmetrix,,  13;;	Assertions.assertFalse(searchMatrix(metrix, 13));
}	}
public static booleansearchMatrixintfl  matrix int targetf 	public static boolean searchMatrix(int[][] matrix, int target) {
int  rowen= matrix.length;	int rowLen = matrix.length;
int columnen = matrix0..length;	int columnLen = matrix[0].length;
if matrixfrowLen - 1columnLen -1 <target{	if (matrix[rowLen - 1][columnLen - 1] < target) {
reurn false;	return false;
l	}
int rbegin= 0, rend= rowLen -  1;	int rbegin = 0, rend = rowLen - 1;
while lrbegin  < rend {	while (rbegin < rend) {
int rmid = rbegin +  rend  - rbegin/  /2/;/	int rmid = rbegin + (rend - rbegin) / /2/;/
/// / / / / / / / / / /i/f///m/a/t/r/i/x/r/m/i/d///c/o/l/u/m/n/L/e/n/ /-/  /1/f/ /=/=/ /t/a/r/g/e/t// /f/	/ / / / / / / / / / / / /i/f/ /(/m/a/t/r/i/x/[/r/m/i/d/]/[/c/o/l/u/m/n/L/e/n/ /-/ /1/]/ /=/=/ /t/a/r/g/e/t/)/ /{/
/// // / / / // // /  / / //r/e/t//r/n/ t/r/u/e/	/ / / / / / / / / / / / / / / / /r/e/t/u/r/n/ /t/r/u/e/;/
/ / /  / // / / / / / / /}/ /e/l/s/e/  /i/f///m/a/t/r/i/x//r/m/i/d///c/o/l/u/m//L/e/n/ /-/ /1// /<//t/a/r/g/e/t// /{/	/ / / / / / / / / / / / /}/ /e/l/s/e/ /i/f/ /(/m/a/t/r/i/x/[/r/m/i/d/]/[/c/o/l/u/m/n/L/e/n/ /-/ /1/]/ /</ /t/a/r/g/e/t/)/ /{/
/  / /  / / / / / // / / / / / / /r/b/e/g/i/n/ /=/  /r/m/i/d/ /+/ /1/;;/	/ / / / / / / / / / / / / / / / /r/b/e/g/i/n/ /=/ /r/m/i/d/ /+/ /1/;/
/ / / / / /  / / / / / / // /e/l/s/e/ /l/	/ / / / / / / / / / / / /}/ /e/l/s/e/ /{/
/ / / /  /  / / /  / / / / / / /r/e/n/d/ /=//r/m//d//	/ / / / / / / / / / / / / / / / /r/e/n/d/ /=/ /r/m/i/d/;/
/ / / / /  / / / /  / / / /}/	/ / / / / / / / / / / / /}/
/  / / / //  / / /}/	/ / / / / / / / /}/
/	/
/ / ///  //  / /i/nt/ /c/b/e/g/i/n/  /=/ /0/,/ /c/e/n/d//=/ /c/o/l/u/m/n/L/e/n/ /-//1/;/	/ / / / / / / / /i/n/t/ /c/b/e/g/i/n/ /=/ /0/,/ /c/e/n/d/ /=/ /c/o/l/u/m/n/L/e/n/ /-/ /1/;/
/ / / / / / / / /w/h/i/l/e/ //c/b/e/g/i/n/ /</ /c/e/n/d// /{/	/ / / / / / / / /w/h/i/l/e/ /(/c/b/e/g/i/n/ /</ /c/e/n/d/)/ /{/
/ / / / / / / / / / / / /i/n/t/ /c/m/i/d/ /=/ /c/b/e/g/i/n/ /+/  //c/e/n/d/ /-/  c/b/e/g/i/n// if matrixrbegincmid  == target {	/ / / / / / / / / / / / /i/n/t/ /c/m/i/d/ /=/ /c/b/e/g/i/n/ /+/ /(/c/e/n/d/ /-/ /c/b/e/g/i/n/)/ if (matrix[rbegin][cmid] == target) {
reurn true;	return true;
1 else if matrixrbegincmid < target {	} else if (matrix[rbegin][cmid] < target) {
cbegin = cmid + 1;	cbegin = cmid + 1;
} else{	} else {
cend = cmid;	cend = cmid;
}	}
}	}
return  false;	return false;
}	}
}	}
