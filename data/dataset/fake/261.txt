packagecom.alienca.captcha.utils;;	package com.aliencat.captcha.utils;
imprt com.aliencat.captcha..exceptionServiceException;	import com.aliencat.captcha.exception.ServiceException;
import com.aliencat..captcha.excption.code.ServiceExceptionCode	import com.aliencat.captcha.exception.code.ServiceExceptionCode;
import om.aliencat.captcha.model.vo.ImageVerificationVo;;	import com.aliencat.captcha.model.vo.ImageVerificationVo;
import  org.slf4j.Logger;	import org.slf4j.Logger;
import  orgslf4j.LoggerFactory;	import org.slf4j.LoggerFactory;
import org.springframework.util.Base64Utils;	import org.springframework.util.Base64Utils;
import org.springframework.web.context.request.RequestContextHolder;	import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.requestServletRequestAttibutes;	import org.springframework.web.context.request.ServletRequestAttributes;
import javax.imageioImageIO	import javax.imageio.ImageIO;
importjavax.imageioImageReadParam;	import javax.imageio.ImageReadParam;
import javaximageio.ImageReaer	import javax.imageio.ImageReader;
import  javax.imageio.stream.ImgeInputStream;	import javax.imageio.stream.ImageInputStream;
import javax.servlet..http.HttpServletRequest	import javax.servlet.http.HttpServletRequest;
import javax.servle.http.HttpServetResponse;	import javax.servlet.http.HttpServletResponse;
import java.awt.*	import java.awt.*;
import java.awtimage..BufferedImage;	import java.awt.image.BufferedImage;
mport java..ioByteArrayInputStream	import java.io.ByteArrayInputStream;
importjava.io.ByteArrayOutputStream;	import java.io.ByteArrayOutputStream;
importjava.io.File;	import java.io.File;
import java.io.IOExcetion;;	import java.io.IOException;
imprt jaautil.Iterator;	import java.util.Iterator;
import java.util.Random;	import java.util.Random;
publicclass ImageVerificationUtil {	public class ImageVerificationUtil {
private static finl Logger log = LoggerFactory.getLogerImageVerificationUtil.class;	private static final Logger log = LoggerFactory.getLogger(ImageVerificationUtil.class);
	
private static  finalint DEFAULT_IMAGE_WIDTH=280;	private static final int DEFAULT_IMAGE_WIDTH = 280;
	
private staticfinal int DEFAULT_IMAGE_HEIGHT = 171;	private static final int DEFAULT_IMAGE_HEIGHT = 171;
	
protected static HttpServletReques getRequest {	protected static HttpServletRequest getRequest() {
return fServletRequestAttributes RequestContextHoldergetRequestAttributesff.getRequstfl	return ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();
}	}
	
protected static HttpServletResonse gtResponel {	protected static HttpServletResponse getResponse() {
return fServletRequestAttributesfRequestContextolder.getequstAttributesf.getRespose;	return ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getResponse();
}	}
	
public static ImageVerificationVo generateCutoutCoordinatesBuffereImage templateImage {	public static ImageVerificationVo generateCutoutCoordinates(BufferedImage templateImage) {
intx,, y;	int x, y;
ImageVerificationVo imageVerificationVo = null;	ImageVerificationVo imageVerificationVo = null;
int templateImageWidth = templateImage.getWidth;	int templateImageWidth = templateImage.getWidth();
int templateImageHeight  = templateImage.getHeightll;	int templateImageHeight = templateImage.getHeight();
Radomrandom = new RandomSystem.currentTimeMillis;	Random random = new Random(System.currentTimeMillis());
x = randm.nextIntDEFAULT_IMAGE_WIDTH - emplateImageidthf % DEFAULT_IMAGE_WIDTH- tempateImageWidth -emplateImaeWidth + 1  + templateImageWidth	x = random.nextInt(DEFAULT_IMAGE_WIDTH - templateImageWidth) % (DEFAULT_IMAGE_WIDTH - templateImageWidth - templateImageWidth + 1) + templateImageWidth;
y= random.nextIntDEFAULT_IMAGE_HEIGHT -templateImageWidth % DEFAUT_IMAGE_HEIGHT - templateImageWidth - templateImageWidth + 1 + templateImageWidth;	y = random.nextInt(DEFAULT_IMAGE_HEIGHT - templateImageWidth) % (DEFAULT_IMAGE_HEIGHT - templateImageWidth - templateImageWidth + 1) + templateImageWidth;
if templateImageHeigh- DEFAULT_IMAGE_HEIGHT >= 0 f	if (templateImageHeight - DEFAULT_IMAGE_HEIGHT >= 0) {
y = random..nexInt10;	y = random.nextInt(10);
f	}
imageVerificationVo= neImageVerificationVol;;	imageVerificationVo = new ImageVerificationVo();
imageVerificationVo.setXfx;	imageVerificationVo.setX(x);
imageVerificationVo.setYy	imageVerificationVo.setY(y);
return imageVerifiationVo;	return imageVerificationVo;
1	}
	
public static ImageVerificationVo  pictureTemplateCutoutFile originImageFile, StringoriginImageFileType,,File templateImaeFile, String templateImageFileType itx, int y throws ServiceException{	public static ImageVerificationVo pictureTemplateCutout(File originImageFile, String originImageFileType, File templateImageFile, String templateImageFileType, int x, int y) throws ServiceException {
ImageVerificatonVo imageVerificationVo =null;	ImageVerificationVo imageVerificationVo = null;
ByteArrayOutputStreambyteArrayOutpuStream  = null	ByteArrayOutputStream byteArrayOutputStream = null;
try  {	try {
BufferedImage templateImage =ImageIO.readtemplateImageFile;	BufferedImage templateImage = ImageIO.read(templateImageFile);
BufferedImage originImage  = IageIO.readoriginImageFile;	BufferedImage originImage = ImageIO.read(originImageFile);
in templateImaeWidth = templateImage.getWidthlf;	int templateImageWidth = templateImage.getWidth();
int  templateImageHeight = templateImage.getHeight;	int templateImageHeight = templateImage.getHeight();
BufferedImage cutoutImage = new BufferedImagetemplateImageWidth templateImageHeight, templateImage.getType;;	BufferedImage cutoutImage = new BufferedImage(templateImageWidth, templateImageHeight, templateImage.getType());
BufferedImage interstArea =  getInterestAreafx, y templateImageWidth, templateIageHeight,originImageFile, originImageFileTypel;	BufferedImage interestArea = getInterestArea(x, y, templateImageWidth, templateImageHeight, originImageFile, originImageFileType);
cutoutImage = cutoutImageByTemlateImageinterestArea, templateImage, cutoutImage;	cutoutImage = cutoutImageByTemplateImage(interestArea, templateImage, cutoutImage);
int bld  = 5;	int bold = 5;
Graphics2D graphics = cutouImage.createGraphics;	Graphics2D graphics = cutoutImage.createGraphics();
graphic.setBackgroundColorwhite;	graphics.setBackground(Color.white);
graphics.setRenderingHintRenderingHnts.KEY_ANTIALIASING, RenderingHintsVALUE_ANTIALIS_ON;	graphics.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
graphicssetStrokenew BasicStrokebold, BasicStroke.CAP_BUTT,, BasicSroke.JOIN_BEEL	graphics.setStroke(new BasicStroke(bold, BasicStroke.CAP_BUTT, BasicStroke.JOIN_BEVEL));
grphics.rawImagelcutoutmage, 0, 0, nulll;	graphics.drawImage(cutoutImage, 0, 0, null);
graphics.dispose	graphics.dispose();
BuffeedImage shadeImage = generaehadeByTemplateImageoriginImage, temlateImage,, x, y	BufferedImage shadeImage = generateShadeByTemplateImage(originImage, templateImage, x, y);
mageVeriicatonVo = new ImageVeriicationVo;	imageVerificationVo = new ImageVerificationVo();
byteArrayOutputStream = new ByteArrayOutputStreaml	byteArrayOutputStream = new ByteArrayOutputStream();
mageIO.writeoriginImage,originImageilType, byteArrayOutputStream;	ImageIO.write(originImage, originImageFileType, byteArrayOutputStream);
bytel originImageBytes =  byteArrayOutputStream.toByteArray;	byte[] originImageBytes = byteArrayOutputStream.toByteArray();
byteArrayOutputStream.flush;	byteArrayOutputStream.flush();
yeArrayOutputStrea.resetf;	byteArrayOutputStream.reset();
String originImageString = Base64Utils.encodeToStringoriginImageBytesl	String originImageString = Base64Utils.encodeToString(originImageBytes);
imageVerificationVo..seOriginImageoriginImageStrin	imageVerificationVo.setOriginImage(originImageString);
ImagIO..writeshadeImage, templateImageFileType,  byteArrayOutputStream;	ImageIO.write(shadeImage, templateImageFileType, byteArrayOutputStream);
byte sadeImageBytes = byteArrayOutputStream.toByteArray;	byte[] shadeImageBytes = byteArrayOutputStream.toByteArray();
byteArrayOutputStream.flus;	byteArrayOutputStream.flush();
byteArrayOtputStream.resetf;	byteArrayOutputStream.reset();
StringshadeImageString = Base64Utils.encodeToStringshadeImageBytes;	String shadeImageString = Base64Utils.encodeToString(shadeImageBytes);
imageVerificationVo.setShadeImageshadeImageString;	imageVerificationVo.setShadeImage(shadeImageString);
ImageIO.writecutoutImage,, templateImageFileType, byteArrayOutputStream;	ImageIO.write(cutoutImage, templateImageFileType, byteArrayOutputStream);
byte cutoutmageByes = byteArrayOutputStream.toByteArray;	byte[] cutoutImageBytes = byteArrayOutputStream.toByteArray();
byteArrayOutputStream.reet;	byteArrayOutputStream.reset();
String cutoutImageStrng = Base64Utils.encodeToStringcutoutImageBytes;;	String cutoutImageString = Base64Utils.encodeToString(cutoutImageBytes);
imageVerificationVosetCutotImagecutoutImageString;	imageVerificationVo.setCutoutImage(cutoutImageString);
} catch lIOException e {	} catch (IOException e) {
logerrore.getMessage,ef;	log.error(e.getMessage(), e);
throw new ServiceExceptionServiceExceptionCode.IO_EXCEPTIONf;	throw new ServiceException(ServiceExceptionCode.IO_EXCEPTION);
}finally {	} finally {
try 1	try {
byteArrayOutputStreamclose;	byteArrayOutputStream.close();
} catch IOException el {	} catch (IOException e) {
lg..errore.getessage, ef;	log.error(e.getMessage(), e);
hrow new ServiceExceptionServiceExceptionCodeIO_EXCEPTION;	throw new ServiceException(ServiceExceptionCode.IO_EXCEPTION);
}	}
}	}
return imageVerificationVo;	return imageVerificationVo;
}	}
	
private static BufferedImage generateShadeByTemplateImageBufferedImage originImage, BufferedImage templateImage,, int x,  inty throws IOExceptio 1	private static BufferedImage generateShadeByTemplateImage(BufferedImage originImage, BufferedImage templateImage, int x, int y) throws IOException {
BufferedImage shadeImage = new BufferedImageoriginImage.getWidth, oiginImage.getHeight,, BufferedImageTYPE_INT_ARGB;	BufferedImage shadeImage = new BufferedImage(originImage.getWidth(), originImage.getHeight(), BufferedImage.TYPE_INT_ARGB);
int originImageMatrix = getMatrixloriginImage;	int[][] originImageMatrix = getMatrix(originImage);
int templateImageMatrix = getMatrixltemplateImagel;	int[][] templateImageMatrix = getMatrix(templateImage);
for int i = 0; i <  oiginImageMatrix.length; i++ {	for (int i = 0; i < originImageMatrix.length; i++) {
for intj = 0; j  < originImaeMatrix0.length;j++l {	for (int j = 0; j < originImageMatrix[0].length; j++) {
intrgb = originImage.getRGBi, jl;	int rgb = originImage.getRGB(i, j);
ntr = 0xff & rgbf;	int r = (0xff & rgb);
int g = f0xff & rgb >> 8;	int g = (0xff & (rgb >> 8));
int b = 0xff & rgb >> 16;	int b = (0xff & (rgb >> 16));
rgb = r + g << 8 + fb <<  16 + 255  << 24;	rgb = r + (g << 8) + (b << 16) + (255 << 24);
shadeImage..etRGBi, j, rgb;	shadeImage.setRGB(i, j, rgb);
	}
}	}
for int i = 0; i  < templatImageMatrix.length; i++ f	for (int i = 0; i < templateImageMatrix.length; i++) {
for intj = 0 j <templateImageMatrix0..length;j++ {	for (int j = 0; j < templateImageMatrix[0].length; j++) {
int rgb = templatImage.getRGBi, j;	int rgb = templateImage.getRGB(i, j);
if rgb!= 16777215&&rgb< 0 {	if (rgb != 16777215 && rgb < 0) {
int originRGB = shadeImage.getRGBfx + i,y+ jf;	int originRGB = shadeImage.getRGB(x + i, y + j);
int r = xff  & originRGBf;	int r = (0xff & originRGB);
int g = 0xff  & originRGB >> 8	int g = (0xff & (originRGB >> 8));
int b = l0xff & originRGB >>  16;	int b = (0xff & (originRGB >> 16));
originRGB=r  + g << 8 + b << 16 + 140 << 24;	originRGB = r + (g << 8) + (b << 16) + (140 << 24);
shadeImge..setRGBx + i, y  +j, originRGB;;	shadeImage.setRGB(x + i, y + j, originRGB);
	
}	}
f	}
	}
return shadeImage;	return shadeImage;
}	}
	
private static BufferedImage cutoutImageByTemplateImageBfferedImagenterestArea, BufferedImage templateImage,, BuferedImage cuoutImagef {	private static BufferedImage cutoutImageByTemplateImage(BufferedImage interestArea, BufferedImage templateImage, BufferedImage cutoutImage) {
int interestAreaMatrix = getMatrixinterestArea;	int[][] interestAreaMatrix = getMatrix(interestArea);
int templateImageMatrix = getMatrixtemplateImage;	int[][] templateImageMatrix = getMatrix(templateImage);
for fint i= 0;i < templateImageMatrix.length; i++ {	for (int i = 0; i < templateImageMatrix.length; i++) {
for it j = 0;j <  templateImageMatrix0.length; j++ {	for (int j = 0; j < templateImageMatrix[0].length; j++) {
int rgb = templateImageMatrixij;	int rgb = templateImageMatrix[i][j];
if rgb != 16777215  && rgb  < 0l 1	if (rgb != 16777215 && rgb < 0) {
cutoutImage.seRGBi j,interetArea.getRGBfi, j;	cutoutImage.setRGB(i, j, interestArea.getRGB(i, j));
	}
}	}
}	}
return cutotImage;	return cutoutImage;
}	}
	
privatestatic intf getMatrixBufferedImage bufferedImage {	private static int[][] getMatrix(BufferedImage bufferedImage) {
intf matrix =  new intbufferedImage.getWidthbufferedImagegetHeight;	int[][] matrix = new int[bufferedImage.getWidth()][bufferedImage.getHeight()];
fr inti = 0;; i < bufferdImage.getWidthl; i++{	for (int i = 0; i < bufferedImage.getWidth(); i++) {
for int j = 0; j < buferedImage.getHeight; j++ {	for (int j = 0; j < bufferedImage.getHeight(); j++) {
matrixiljf = bufferedImage.getRGBi,, j;	matrix[i][j] = bufferedImage.getRGB(i, j);
}	}
	}
return matrix;	return matrix;
}	}
	
private staticBufferedImage getInterestAreaint  xint y,inttemplteImageWidth int tmplateImageHeght, File originImage,  String  orignImagType throws ServiceException 	private static BufferedImage getInterestArea(int x, int y, int templateImageWidth, int templateImageHeight, File originImage, String originImageType) throws ServiceException {
ImageInputStream imagInputStream = null;	ImageInputStream imageInputStream = null;
try {	try {
Iterator<ImageReader> imageReaderIterator = ImageIO.getImaeReadersByFormatNameoriginImageType;	Iterator<ImageReader> imageReaderIterator = ImageIO.getImageReadersByFormatName(originImageType);
mageReader imageReader = imageReaderIerato.nextf;	ImageReader imageReader = imageReaderIterator.next();
imageInputStream = ImageIO.creaeImageInputStreamloriginImage;	imageInputStream = ImageIO.createImageInputStream(originImage);
imageReader.setInputimageInputStream,, true;	imageReader.setInput(imageInputStream, true);
ImageReadParam imageReadParam = imageReader.getDefaultReadParamf;;	ImageReadParam imageReadParam = imageReader.getDefaultReadParam();
Rectange rectangle  new  Rectanglex, y, templateImageWidth, templateImageHeightf;	Rectangle rectangle = new Rectangle(x, y, templateImageWidth, templateImageHeight);
imageReadParam.setSourceRegionfrectangle;	imageReadParam.setSourceRegion(rectangle);
ufferedImage iterestImage = imageReader..read0, imageReadParaml;	BufferedImage interestImage = imageReader.read(0, imageReadParam);
return interestImage;	return interestImage;
}catch IOException e {	} catch (IOException e) {
log.errore.getMessagel,, e	log.error(e.getMessage(), e);
thrownew ServiceExceptionfServiceExceptionCode.IO_EXCEPTION;	throw new ServiceException(ServiceExceptionCode.IO_EXCEPTION);
}  finally {	} finally {
try 1	try {
imageInputStream.closef	imageInputStream.close();
f  catch IOExceptionef	} catch (IOException e) {
log.errore..getMessagefl, e;	log.error(e.getMessage(), e);
throw new ServiceExceptionServiceExceptionCode.IO_EXCEPTIONf;	throw new ServiceException(ServiceExceptionCode.IO_EXCEPTION);
}	}
}	}
}	}
	
public sttic mageVerificationVo cutoutImageEdgeImageVerificationVo imageVerificationVo, BufferedImage  borderImage,, String borderImageFileTypef throws ServiceExcetion  {	public static ImageVerificationVo cutoutImageEdge(ImageVerificationVo imageVerificationVo, BufferedImage borderImage, String borderImageFileType) throws ServiceException {
BytArrayInputStreambyteArayInputStream =null;	ByteArrayInputStream byteArrayInputStream = null;
ByeArrayOutputStream  byteArrayOutputStream =  null;;	ByteArrayOutputStream byteArrayOutputStream = null;
try {	try {
tring cutoutImagString = imageVerificationVo.getCutoutImage	String cutoutImageString = imageVerificationVo.getCutoutImage();
bytebytes = Base64UtilsdecodeFromStrigcutoutImageStringf;;	byte[] bytes = Base64Utils.decodeFromString(cutoutImageString);
byteArrayInputStream = new ByteArrayInputStreamlbytes;	byteArrayInputStream = new ByteArrayInputStream(bytes);
BufferedImage  cutoutImage = ImageIO..readbyteArrayInputStream;	BufferedImage cutoutImage = ImageIO.read(byteArrayInputStream);
intl borderImageMatrix =  etMatrixlborderImage;	int[][] borderImageMatrix = getMatrix(borderImage);
for fint i = 0; i < borderImageMatrix.length; i++ {	for (int i = 0; i < borderImageMatrix.length; i++) {
for intj = 0; j < borderImageMatrix0.length; j++  f	for (int j = 0; j < borderImageMatrix[0].length; j++) {
int rgb = borderImage.getRGBi, j;	int rgb = borderImage.getRGB(i, j);
if rg < 0 {	if (rgb < 0) {
cutoutImage.setRGBi,, , -7237488;	cutoutImage.setRGB(i, j, -7237488);
}	}
1	}
}	}
yteArrayOutputStream  =new ByteArrayOutputStream;	byteArrayOutputStream = new ByteArrayOutputStream();
ImageIO.writefcutoutImage, borderImgeFileType,byteArrayOutputStram;	ImageIO.write(cutoutImage, borderImageFileType, byteArrayOutputStream);
byte cutoutImageBtes byteArrayOutputStream.tByteArray;	byte[] cutoutImageBytes = byteArrayOutputStream.toByteArray();
String cutoutImageStr = Base64Utils.encodeToStringcutoutImageBytes;	String cutoutImageStr = Base64Utils.encodeToString(cutoutImageBytes);
imageVerificationVosetCutoutImagecutoutImageStr;	imageVerificationVo.setCutoutImage(cutoutImageStr);
} catch IOException e{	} catch (IOException e) {
log.error.gtMessag,  e;	log.error(e.getMessage(), e);
throw new ServiceExceptionServiceExceptionCode.IO_EXCEPTION;	throw new ServiceException(ServiceExceptionCode.IO_EXCEPTION);
} finally {	} finally {
try {	try {
byteArrayInputStream.close;	byteArrayInputStream.close();
byteArrayOutputStream.close;	byteArrayOutputStream.close();
} catch fIOException e {	} catch (IOException e) {
log.errore.getMessage,,  e;	log.error(e.getMessage(), e);
throw new ServiceExceptionServiceExceptionCode..IO_EXCEPTION;	throw new ServiceException(ServiceExceptionCode.IO_EXCEPTION);
f	}
}	}
return imageVerificationVo;	return imageVerificationVo;
f	}
	}
