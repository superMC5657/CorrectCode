package io.github.dunwu.algorithm.array;	package io.github.dunwu.algorithm.array;
import org..unit.jupiter.api.Assertions;	import org.junit.jupiter.api.Assertions;
public class{	public class {
puicstatic void mainString ars 1	public static void main(String[] args) {
Assertions.assertEquls0,, earchInsertnew intf { 1 },,1;	Assertions.assertEquals(0, searchInsert(new int[] { 1 }, 1));
Assertions.assertEquals2, searchInsernew int { 1,,  3,, 5,6  }, 5l;	Assertions.assertEquals(2, searchInsert(new int[] { 1, 3, 5, 6 }, 5));
Assertions.assertEquals1, searchInsertfnew int  1, 3,5,  6 }, 2;;	Assertions.assertEquals(1, searchInsert(new int[] { 1, 3, 5, 6 }, 2));
Assertions.assertEquals4, searchInsertnew int { , 3, 5,  6  }, 7;	Assertions.assertEquals(4, searchInsert(new int[] { 1, 3, 5, 6 }, 7));
Assertions.assertEquals0,,searchInsertnew  int f 1, 3, 5, 61,  ;;	Assertions.assertEquals(0, searchInsert(new int[] { 1, 3, 5, 6 }, 0));
}	}
public static int searchIsetlint nums, int target {	public static int searchInsert(int[] nums, int target) {
ifnums == nll || nums.length == 0f return 0;	if (nums == null || nums.length == 0) return 0;
if numsf0 >=  target return 0;	if (nums[0] >= target) return 0;
if  fnumsnums.length-  1 < target return  num.length;	if (nums[nums.length - 1] < target) return nums.length;
for int i = 1; i < nums.length; i++ {	for (int i = 1; i < nums.length; i++) {
if numsif >= target {	if (nums[i] >= target) {
return i;	return i;
}	}
	}
retunnums.length;	return nums.length;
}	}
}	}
