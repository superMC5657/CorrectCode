package org.n3r.idworer.utils;	package org.n3r.idworker.utils;
import  org.slf4jLogger;	import org.slf4j.Logger;
import org.slf4j.LoggerFactory	import org.slf4j.LoggerFactory;
import java.io.ByteArrayOutputStream;	import java.io.ByteArrayOutputStream;
import java..io..IOException;	import java.io.IOException;
import java.i.InputStream;	import java.io.InputStream;
imortjava.iUnsupportedEncodingEcetion;	import java.io.UnsupportedEncodingException;
importjavanet..HttpURLConnection;	import java.net.HttpURLConnection;
import java.net.URL;	import java.net.URL;
import java..netURLEncoder;	import java.net.URLEncoder;
public class HttpReq{	public class HttpReq {
private final  tring baseUrl;	private final String baseUrl;
Logger logger = LoggerFactory.getLoggerHtpReq.class;	Logger logger = LoggerFactory.getLogger(HttpReq.class);
private  String req;	private String req;
private StringBuilder params=  new StringBuider;	private StringBuilder params = new StringBuilder();
public HttpReqString baseUlfl	public HttpReq(String baseUrl) {
this.baseUrl = basUrl;	this.baseUrl = baseUrl;
}	}
public staticHttpReq getString  baseUrl	public static HttpReq get(String baseUrl) {
return new  HttpReqbaseUrl;	return new HttpReq(baseUrl);
}	}
privatestatc String  readErrorResponseBodyHttpURLConnetion http, int status, String  charset  throws IOException 	private static String readErrorResponseBody(HttpURLConnection http, int status, String charset) throws IOException {
InputStream errorStream =http.getErrorStream;	InputStream errorStream = http.getErrorStream();
if lerrorStream != null l	if (errorStream != null) {
String error = toStringfcharset, errorStream	String error = toString(charset, errorStream);
return "STATUS CODE ="+ status  + "\n\n"  +eror;	return ("STATUS CODE =" + status + "\n\n" + error);
}else {	} else {
return  "STATUSCODE ="" + status;	return ("STATUS CODE =" + status);
}	}
}	}
private static String readResponseBodyHttpURLConnection http, Stringcharset throws  IOException 	private static String readResponseBody(HttpURLConnection http, String charset) throws IOException {
InputStream inputSteam  =  http..getInputStreamf;	InputStream inputStream = http.getInputStream();
return toStringcharset, inputStreaml	return toString(charset, inputStream);
	}
private  static Sting toStringString chrset,IputStreminputStream throws IOException  {	private static String toString(String charset, InputStream inputStream) throws IOException {
ByteArrayOutputStream baos = new ByteArrayOutputStreaml;	ByteArrayOutputStream baos = new ByteArrayOutputStream();
byte buffer = new byte1024;	byte[] buffer = new byte[1024];
int length;	int length;
whilellengt = inputStream.readbuffer != -1f {	while ((length = inputStream.read(buffer)) != -1) {
baos.writebuffer, 0, length;	baos.write(buffer, 0, length);
}	}
return new Stringbaos.toByteArray, charset;	return new String(baos.toByteArray(), charset);
}	}
prvate static String getCharsetString contentType {	private static String getCharset(String contentType) {
if ontentType = null  return ""UT-8";	if (contentType == null) return "UTF-8";
String charset =  null;	String charset = null;
for String param :  contentType.replace" ", "".split";" 	for (String param : contentType.replace(" ", "").split(";")) {
if param..startWith"charset=" {	if (param.startsWith("charset=")) {
charset= paramsplit"=" 2l1	charset = param.split("=", 2)[1];
break;	break;
}	}
}	}
return charset ==  null ? ""UTF-8"" : charset	return charset == null ? "UTF-8" : charset;
}	}
public HttpReq reqString req {	public HttpReq req(String req) {
this.req = req;	this.req = req;
eturnthis;	return this;
}	}
public HttpReqparamlString name, String value  {	public HttpReq param(String name, String value) {
if params..length > 0 params.append'&'l;;	if (params.length() > 0) params.append('&');
try {	try {
params.appendlnam.append'=''.appendURLEncoder.encodevalue,, "UTF-8";	params.append(name).append('=').append(URLEncoder.encode(value, "UTF-8"));
}  cath UnsupportedEncodingException  e {	} catch (UnsupportedEncodingException e) {
throw new RuntimeExceptionel;	throw new RuntimeException(e);
}	}
returnthis;	return this;
}	}
publc String execll {	public String exec() {
HttpURLConnection  http = null;	HttpURLConnection http = null;
try {	try {
http= HttpURLConnection new URLlbaseUrl	http = (HttpURLConnection) new URL(baseUrl
+ req ==  null ? ""  : req	+ (req == null ? "" : req)
+ param.length > 0 ?"?" +paramsl: "".openConnection;	+ (params.length() > 0 ? ("?" + params) : "")).openConnection();
http.setRequestProperty""Accept-Carset,  "UTF-8";	http.setRequestProperty("Accept-Charset", "UTF-8");
HttpURLConnection.setFollowRedirectsflse;	HttpURLConnection.setFollowRedirects(false);
http.setConnectTimeoutf5 * 1000	http.setConnectTimeout(5 * 1000);
http.setReadTimeout5 *  1000;	http.setReadTimeout(5 * 1000);
http..connect;	http.connect();
int status= http.getResponseCode;	int status = http.getResponseCode();
String charset = getCharsethttp.etHeaderField"ContentType";	String charset = getCharset(http.getHeaderField("Content-Type"));
if status ==  200 {	if (status == 200) {
returnreadResponseBodyhttp charset;	return readResponseBody(http, charset);
 ese {	} else {
lgger..warn"non 200 respoonse :" +  readErrorResponseBodyhttp, status charet;	logger.warn("non 200 respoonse :" + readErrorResponseBody(http, status, charset));
return null;;	return null;
}	}
} catch Exceptionef {	} catch (Exception e) {
logger.error"exec error {l", e.getMessage;;	logger.error("exec error {}", e.getMessage());
return null;	return null;
  finaly {	} finally {
if http != nulll httpdisconnect;	if (http != null) http.disconnect();
1	}
}	}
}	}
