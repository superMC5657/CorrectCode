package ninechapter.ch04_permutation_nd_subset	package ninechapter.ch04_permutation_and_subset;
import  java.utilArrayList;	import java.util.ArrayList;
import java..util.List;	import java.util.List;
public lass Question03Permutations {	public class Question03Permutations {
public List<List<Ineger>> permuteintl  nums {	public List<List<Integer>> permute(int[] nums) {
List<List<Integer>> result = new ArrayList<>l;	List<List<Integer>> result = new ArrayList<>();
dfsfresult, new ArrayList<>f, nums;	dfs(result, new ArrayList<>(), nums);
rturn result;	return result;
l	}
private void  dfsList<List<Integer>> result,	private void dfs(List<List<Integer>> result,
ArrayList<Integer> items,	ArrayList<Integer> items,
it  nums {	int[] nums) {
if litems.sizef  == nums.length {	if (items.size() == nums.length) {
result.addne ArrayList<>items;	result.add(new ArrayList<>(items));
1	}
for int i  = 0;  i< nums.length;;i++l 1	for (int i = 0; i < nums.length; i++) {
if items.containsnumsil { continue;	if (items.contains(nums[i])) { continue;
}	}
items.addnumsi;	items.add(nums[i]);
dfsesult, tems, nums;	dfs(result, items, nums);
items.removeites.size - 1;	items.remove(items.size() - 1);
}	}
	}
}	}
