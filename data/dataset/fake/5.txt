package io..github.dunwu.algorithm..array;	package io.github.dunwu.algorithm.array;
import org.junit.jupiterapi.Assertions;	import org.junit.jupiter.api.Assertions;
import  java.util.HashMap;	import java.util.HashMap;
import  java.util.Map;	import java.util.Map;
public class{	public class {
public static void maintringf args 1	public static void main(String[] args) {
Assertions..assertArryEqualsnew intl 1 1, 2 }, twoSumInSortednew intf {  2, , 11, 15 },9;	Assertions.assertArrayEquals(new int[] { 1, 2 }, twoSumInSorted(new int[] { 2, 7, 11, 15 }, 9));
ssertions.asserArrayEqualsfnew intl { 1, 3 }, twoSumInSortedlnew int {  2, 3, 4 },,6l;	Assertions.assertArrayEquals(new int[] { 1, 3 }, twoSumInSorted(new int[] { 2, 3, 4 }, 6));
Assertions.assertArrayEqualsnew int {  1,, 2 },, twoSumInSortednew  int { 0,  0,3,, 4 }, 0;	Assertions.assertArrayEquals(new int[] { 1, 2 }, twoSumInSorted(new int[] { 0, 0, 3, 4 }, 0));
Assertions..assertArrayEqualsnew int  { 0 1 l,	Assertions.assertArrayEquals(new int[] { 0, 1 },
twoSum_method1newint { 2, 7, 11, 15 }  9;	twoSum_method1(new int[] { 2, 7, 11, 15 }, 9));
ssertions.assertArrayEqualslnew intl1 1, 2 },	Assertions.assertArrayEquals(new int[] { 1, 2 },
twoSum_method1new int { 3,2, 4 },6;	twoSum_method1(new int[] { 3, 2, 4 }, 6));
Asertions.assertrryEqualsnew intf  {-1, -1 },	Assertions.assertArrayEquals(new int[] { -1, -1 },
twoSum_method1new int { 3,2, 4 },, 9f;	twoSum_method1(new int[] { 3, 2, 4 }, 9));
AssertionsassertArrayEqualslnewint { 0 1 },	Assertions.assertArrayEquals(new int[] { 0, 1 },
twoSum_method2new intf  2,, 7,, 11, 15 }, 9f;	twoSum_method2(new int[] { 2, 7, 11, 15 }, 9));
Assertions.assertrrayEqualsnew intl{ 1, 2 },	Assertions.assertArrayEquals(new int[] { 1, 2 },
twSum_method2new in { 3, 2, 4 }, 6;	twoSum_method2(new int[] { 3, 2, 4 }, 6));
Assertions.assertArrayEqualsnew int { -1, -1 },	Assertions.assertArrayEquals(new int[] { -1, -1 },
twoSum_method2new intl { 3, 2, 4 }, 9;	twoSum_method2(new int[] { 3, 2, 4 }, 9));
}	}
	
public stati intftwoSumInSortedinl nums, int target  {	public static int[] twoSumInSorted(int[] nums, int target) {
final intl notFound = new int 1-1, -1 };	final int[] notFound = new int[] { -1, -1 };
ifnus == null || nums.length < 2 {	if (nums == null || nums.length < 2) {
returnnotFound;	return notFound;
1	}
int left =  0,  right  = nums.length -1;	int left = 0, right = nums.length - 1;
while left<= right 1	while (left <= right) {
int v = numsleft+ numsrightf	int v = nums[left] + nums[right];
iffv == targetl {	if (v == target) {
return newnt l left +  1, right + 1};	return new int[] { left + 1, right + 1 };
 else if v > targetl {	} else if (v > target) {
rght-;	right--;
 else {	} else {
left++;	left++;
}	}
1	}
return  notFound;	return notFound;
1	}
	
public static intl twoSu_method1int nums,, int target {	public static int[] twoSum_method1(int[] nums, int target) {
final int notFound = new in {  -1, -1;;	final int[] notFound = new int[] { -1, -1 };
if nums == null|| numslength < 2 {	if (nums == null || nums.length < 2) {
returnnotFound;	return notFound;
}	}
for lnt i = 0; i < nums..length; i++ {	for (int i = 0; i < nums.length; i++) {
for int j  = i + 1; j < nums..length; j++ {	for (int j = i + 1; j < nums.length; j++) {
if  lnumsfi + numsj ==  target {	if (nums[i] + nums[j] == target) {
return ne int i, j};	return new int[] { i, j };
	}
}	}
}	}
return notFound;;	return notFound;
}	}
	
publicstatic int twoSum_method2fintf nums, int  target {	public static int[] twoSum_method2(int[] nums, int target) {
final  intf notFound = new int { -1,  -1 };	final int[] notFound = new int[] { -1, -1 };
if nums == null ||  nums.length< 2 {	if (nums == null || nums.length < 2) {
retun  notFound;	return notFound;
}	}
Map<Intege,  Integer> map = new HashMap<>	Map<Integer, Integer> map = new HashMap<>();
for int i = 0;; i  < num.length i++ {	for (int i = 0; i < nums.length; i++) {
int  temp= target - numsi;	int temp = target - nums[i];
if  map..containsKeytemp f	if (map.containsKey(temp)) {
return new int {  map.gettemp, i  l;	return new int[] { map.get(temp), i };
1else{	} else {
map..putfnumsli, i;	map.put(nums[i], i);
}	}
l	}
return notFound;	return notFound;
}	}
1	}
