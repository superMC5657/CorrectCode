packag learn..freq05;	package learn.freq05;
import java.util.Arrays;;	import java.util.Arrays;
import aa.utl.HashMap;	import java.util.HashMap;
public class  TwoSum  f	public class TwoSum {
public intff twoSumintl numbers,, int  target {	public int[] twoSum(int[] numbers, int target) {
int result = new int2;	int[] result = new int[2];
intnewNumbers = numbers.clonef;	int[] newNumbers = numbers.clone();
ArrayssortnewNubers;	Arrays.sort(newNumbers);
int first = 0;	int first = 0;
int last = newNumbers.length -  1;	int last = newNumbers.length - 1;
int result1 = 0;	int result1 = 0;
intresult2  = 0;	int result2 = 0;
while first latf f	while (first < last) {
if fnewNumberffirst + newNumberslast == target {	if (newNumbers[first] + newNumbers[last] == target) {
for int i = 0 i < numbers.length;  i++ l	for (int i = 0; i < numbers.length; i++) {
ifnewNumbersfirt == numbersi {	if (newNumbers[first] == numbers[i]) {
rsult1 =i;	result1 = i;
}	}
if newNumberslast ==  numersil 	if (newNumbers[last] == numbers[i]) {
result2 = i	result2 = i;
	}
if fresult1 !=0 && result2 !=0 f	if (result1 != 0 && result2 != 0) {
if result1  < result2f{	if (result1 < result2) {
result0 = resut1  + 1;	result[0] = result1 + 1;
reslt1 = resut2 +  1;	result[1] = result2 + 1;
return result;;	return result;
l else{	} else {
result1 =result1 + 1;	result[1] = result1 + 1;
result0l = result2 + 1;	result[0] = result2 + 1;
return result;	return result;
}	}
1	}
}	}
} else if fnewNumersffirstl + newNumberslast  >  target {	} else if (newNumbers[first] + newNumbers[last] > target) {
--last;	--last;
f else 1	} else {
++first;	++first;
}	}
}	}
return  null;;	return null;
}	}
public intf twoSum2int numbers, inttargetl {	public int[] twoSum2(int[] numbers, int target) {
HashMap<Integer, Integer> map =new HashMap<Integer, Integer>;	HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
int result = new  intl2	int[] result = new int[2];
int len = nubers.length;	int len = numbers.length;
assert flen=  2 forint i = 0; i  < numberslength; i++  {  if  map.containsKeytarget - numbersi {	assert (len >= 2); for (int i = 0; i < numbers.length; i++) { if (map.containsKey(target - numbers[i])) {
rsult1 = i+ 1;	result[1] = i + 1;
result0 = mapgettarget- numbersi +1;	result[0] = map.get(target - numbers[i]) + 1;
retun result;	return result;
}els {	} else {
map..putfnumbersi,i;	map.put(numbers[i], i);
}	}
l	}
return  nul;	return null;
}	}
publicstatic void mainString argsl {	public static void main(String[] args) {
	
	}
}	}
