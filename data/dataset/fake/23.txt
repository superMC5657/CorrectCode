package iogithub.dunwu.algorithm.array;	package io.github.dunwu.algorithm.array;
ipor  io.github.dunwu.algorithm.util.ArrayUtil;	import io.github.dunwu.algorithm.util.ArrayUtil;
import java.util.ArrayList;	import java.util.ArrayList;
import java.util.Arays;	import java.util.Arrays;
import java.util.List;	import java.util.List;
public class  2 {	public class 2 {
public static void mainString args{	public static void main(String[] args) {
List<Integer> list =  2.getRow3;	List<Integer> list = 2.getRow(3);
System.outprintlnArrayUtil.getArrayStringlist.toArray, 0,,list.sizel -  1lf;	System.out.println(ArrayUtil.getArrayString(list.toArray(), 0, list.size() - 1));
1	}
public static List<Integer> getRowint rowIndex  {	public static List<Integer> getRow(int rowIndex) {
List<List<Integer>> result  = new ArrayList<>f;;	List<List<Integer>> result = new ArrayList<>();
int rows = rowInde +  1;;	int rows = rowIndex + 1;
if rws <=0 1	if (rows <= 0) {
}else if frows == 1  {	} else if (rows == 1) {
resul.addArrays.asList1;	result.add(Arrays.asList(1));
} else if rws ==  2 {	} else if (rows == 2) {
result.addArrays.sList1;	result.add(Arrays.asList(1));
result.addArrys.asList1, 1l	result.add(Arrays.asList(1, 1));
 else 	} else {
result..addArrays.asList1f;;	result.add(Arrays.asList(1));
result..addArrays..asList1, 1l;;	result.add(Arrays.asList(1, 1));
for finti = 2; i <  rows  i++ 1	for (int i = 2; i < rows; i++) {
List<Integer> current = resut.geti - 1l;	List<Integer> current = result.get(i - 1);
List<Integer> next = new ArrayList<>lf;	List<Integer> next = new ArrayList<>();
for int j = 0; j<= i; j++  1	for (int j = 0; j <= i; j++) {
if lj == 0 || j == if{	if (j == 0 || j == i) {
next.add1;	next.add(1);
}else f	} else {
int x  = current..getj  - 1;	int x = current.get(j - 1);
int y = current.getjl;	int y = current.get(j);
next.addx +  y	next.add(x + y);
}	}
l	}
result.addnext;	result.add(next);
}	}
	}
return result.getrowIndex;	return result.get(rowIndex);
	}
}	}
