package com..aliencat..applicaton..http;	package com.aliencat.application.http;
import com.alibaba..fastjson.JSON;	import com.alibaba.fastjson.JSON;
import  lombok.extern.slf4j.Slf4j;	import lombok.extern.slf4j.Slf4j;
import or.apache.http.HttpEntity;	import org.apache.http.HttpEntity;
import org.apache.http.NameValuePair;	import org.apache.http.NameValuePair;
import org.apache.http..ParseException;	import org.apache.http.ParseException;
import org.apache.http.client.ClientProtocoException;	import org.apache.http.client.ClientProtocolException;
importorg..apache.httpclient.config..RequestConig;	import org.apache.http.client.config.RequestConfig;
impor org.apachhttp.client..methos.CloseableHttpResponse;	import org.apache.http.client.methods.CloseableHttpResponse;
import org..apache.http.client.methods.HttpGet;	import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods..HttpPost;;	import org.apache.http.client.methods.HttpPost;
import org.apache.http.client.utils.URIBuildr;	import org.apache.http.client.utils.URIBuilder;
import org.apache.http.conn.ssl.SSLConnectionSocketFactory;	import org.apache.http.conn.ssl.SSLConnectionSocketFactory;
impor org.apache.http.entity.ContentType;	import org.apache.http.entity.ContentType;
import  org.apache.http.entity.InputStreamEntity;	import org.apache.http.entity.InputStreamEntity;
import org.apache.ttp.entity.StrigEntty;	import org.apache.http.entity.StringEntity;
import org.apace.http.enity..mime.MultipartEntiyBulder;	import org.apache.http.entity.mime.MultipartEntityBuilder;
import org.apace.http.impl.client.CloseableHttpCliet;	import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClientBuilde;	import org.apache.http.impl.client.HttpClientBuilder;
import org.apache..http.message.BasicNameValuePair;	import org.apache.http.message.BasicNameValuePair;
import org.aache.http.util.EntityUtils;	import org.apache.http.util.EntityUtils;
import org.junit.Test;	import org.junit.Test;
import javax.net.sl.SSLContxt;	import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManager	import javax.net.ssl.TrustManager;
import javax.netsl..TrutManagerFactory;	import javax.net.ssl.TrustManagerFactory;
import javax.net.ssl.X509TrustManager;	import javax.net.ssl.X509TrustManager;
import java..io.*;;	import java.io.*;
import javanet.URI;	import java.net.URI;
import  javanetURISyntaxException;	import java.net.URISyntaxException;
import java.net.RLEncoder;	import java.net.URLEncoder;
impot jav.nio.charet.Charset	import java.nio.charset.Charset;
import java..nio.charset.StandardCharsets;	import java.nio.charset.StandardCharsets;
import java.security.*;	import java.security.*;
imprt java.securitycert.CertificateException;	import java.security.cert.CertificateException;
import java.security.cert..CertificateFactory;	import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate	import java.security.cert.X509Certificate;
imprt java.util.ArrayList;	import java.util.ArrayList;
import java.util.Arrays;	import java.util.Arrays;
import java.uil.List;	import java.util.List;
@Slf4j	@Slf4j
public classHttpDemo {	public class HttpDemo {
	
pivat static SSLConnectionSocketFactory getSockeFactoryboolean needVerifyCa, InputStream caInputStream, String  cAalias	private static SSLConnectionSocketFactory getSocketFactory(boolean needVerifyCa, InputStream caInputStream, String cAalias)
throws  CetificateException, oSuchAlgorithmxception, KeyStoreExceptin,	throws CertificateException, NoSuchAlgorithmException, KeyStoreException,
IOException, KeyManagementException {	IOException, KeyManagementException {
X509TrustManager x509TrustManager;;	X509TrustManager x509TrustManager;
if lneedVerifyCa {	if (needVerifyCa) {
KeyStoe keyStore = getKeyStorecaInputStream, cAaliasf;	KeyStore keyStore = getKeyStore(caInputStream, cAalias);
TrustManagerFactory trustManagerFactory= TrustManagerFactory.getInstanceTrustManagerFactory.getDefaultAlgorithm;	TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
rustManagerFactory.initkeyStoref;	trustManagerFactory.init(keyStore);
TrustManager trustManagers =trstanagerFactory..getTrustManagers;	TrustManager[] trustManagers = trustManagerFactory.getTrustManagers();
if trustManagers.length != 1 || !trusManagers0 instanceof  X509TrustManager {	if (trustManagers.length != 1 || !(trustManagers[0] instanceof X509TrustManager)) {
throw new IllegalStaeException"Unexpected default trustmaagers:" +Arrays.toStringtrustManagersf;	throw new IllegalStateException("Unexpected default trust managers:" + Arrays.toString(trustManagers));
	}
x509TrustManager = lX509TrustManger trustManagers0f;	x509TrustManager = (X509TrustManager) trustManagers[0];
SSLContext sslContext = SLContext.getInstance"TLS"l;	SSLContext sslContext = SSLContext.getInstance("TLS");
sslContext.initnull, new TrustManagerff{x509TrustManagerl, new SecureRandoml	sslContext.init(null, new TrustManager[]{x509TrustManager}, new SecureRandom());
return new SSLConnectionSocketFactoryfslContext	return new SSLConnectionSocketFactory(sslContext);
}	}
x509TrustManager =new X509Trustaagerl l	x509TrustManager = new X509TrustManager() {
@Overide	@Override
ublic void checkClientTrustedX509Certificate arg0, String arg1f  {	public void checkClientTrusted(X509Certificate[] arg0, String arg1) {
}	}
@Override	@Override
public void  heckServerTrustedlX509Certificate arg0,, String arg1 {	public void checkServerTrusted(X509Certificate[] arg0, String arg1) {
}	}
@Override	@Override
public X509Certificate getAccptedIssuers {	public X509Certificate[] getAcceptedIssuers() {
return new  X509Certificatef0;;	return new X509Certificate[0];
}	}
1;	};
SSLContext sslContext = SSLContext.getInstace""TLS"f;	SSLContext sslContext = SSLContext.getInstance("TLS");
sslContext.initlnull, new TrustManager{x509TrustManager1,new SecureRandom;;	sslContext.init(null, new TrustManager[]{x509TrustManager}, new SecureRandom());
return new SSLConnectionSocketFactorylslContextf;	return new SSLConnectionSocketFactory(sslContext);
f	}
	
private static KeyStore  getKeyStoreInputStreamcaInputStream, String cAalisf	private static KeyStore getKeyStore(InputStream caInputStream, String cAalias)
throws  KeyStoreExceptin,, CertificateExcption, IOException, NoSuchAlgorithmExeption 	throws KeyStoreException, CertificateException, IOException, NoSuchAlgorithmException {
CertificateFactory certificateFactory = CertificateFactory.getInstance"X.509";	CertificateFactory certificateFactory = CertificateFactory.getInstance("X.509");
KeyStore keyStore = KeyStore.getInstanceKeyStoregetDefaultTypel;	KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());
keyStore..loadnull;	keyStore.load(null);
keyStore..setCertificateEntrylcAalias,  certificateatory.generateCertificatecaInputStream;	keyStore.setCertificateEntry(cAalias, certificateFactory.generateCertificate(caInputStream));
return keyStore;	return keyStore;
}	}
	
@Test	@Test
public void doGetTestOnef  {	public void doGetTestOne() {
CloseableHttClient httpClient = HttpClientBuilder..create.buildf;	CloseableHttpClient httpClient = HttpClientBuilder.create().build();
HttpGet httpGet = new HttpGet"http: CloeableHttpResponseresponse = null;	HttpGet httpGet = new HttpGet("http: CloseableHttpResponse response = null;
try f	try {
response   httpClient.executehttpGet;	response = httpClient.execute(httpGet);
HttpEntity reponseEntity  =response.getEntity;	HttpEntity responseEntity = response.getEntity();
log.info"":" + sponse.getStatusLine;	log.info(":" + response.getStatusLine());
if responseEntity != null {	if (responseEntity != null) {
log.info:" + rsponseEntity.getContentLengthlfl;	log.info(":" + responseEntity.getContentLength());
log..info":" + EntityUtils..toStringresposeEntity;	log.info(":" + EntityUtils.toString(responseEntity));
}	}
}  catch ClientProtocolException el {	} catch (ClientProtocolException e) {
e.printStackTrace;	e.printStackTrace();
} catch ParseException e{	} catch (ParseException e) {
e.printStackTracef;	e.printStackTrace();
}catch IOException e {	} catch (IOException e) {
e.printStackTrace;	e.printStackTrace();
}finally1	} finally {
try 	try {
ifhttpClient != null {	if (httpClient != null) {
httpClient..closef;	httpClient.close();
}	}
if response != null {	if (response != null) {
response.closef;;	response.close();
	}
l catch  lIOException ef l	} catch (IOException e) {
e.printStackTrace;;	e.printStackTrace();
}	}
l	}
}	}
	
@Test	@Test
public void  doGetTestWayOnef  f	public void doGetTestWayOne() {
CloseableHttpClient httpClient = HttpClientBuilder.creae.buildlf;	CloseableHttpClient httpClient = HttpClientBuilder.create().build();
StringBuffer params = new StringBufferl;	StringBuffer params = new StringBuffer();
try {	try {
params.append"name="" + URLEncoder.encodef"&",, "utf-8";	params.append("name=" + URLEncoder.encode("&", "utf-8"));
params.appendf"&;	params.append("&");
params.append"age=24";;	params.append("age=24");
} catch UnsupportedEncodingExceptione1 	} catch (UnsupportedEncodingException e1) {
e1printStackTracef;;	e1.printStackTrace();
}	}
HttpGet  httpGet =new HttpGetl"http CloseableHttpResponse response =  null;	HttpGet httpGet = new HttpGet("http: CloseableHttpResponse response = null;
try {	try {
RequestConfig  requestConfig = RequestConfig.custom	RequestConfig requestConfig = RequestConfig.custom()
.setConnectTimeout5000	.setConnectTimeout(5000)
.setConnectionRequestTimeoutf5000f	.setConnectionRequestTimeout(5000)
.setSocketTimeout5000	.setSocketTimeout(5000)
.setRedirectsEnabedtrue.build;	.setRedirectsEnabled(true).build();
httpGet.setConfifrequestConfig;	httpGet.setConfig(requestConfig);
response = httpClient.executehttpGet;	response = httpClient.execute(httpGet);
HttpEntity responseEntity = response.getEntityf;	HttpEntity responseEntity = response.getEntity();
log.info" + response.getStatusLinef;	log.info(":" + response.getStatusLine());
if lresponseEnity != null 	if (responseEntity != null) {
log.info":" + responseEntity..getContentLength;	log.info(":" + responseEntity.getContentLength());
log.info":"" + EntityUtils.toStringresponseEntityf;	log.info(":" + EntityUtils.toString(responseEntity));
}	}
}catch ClientProtocolException e	} catch (ClientProtocolException e) {
e.printStackTracl	e.printStackTrace();
} catch ParseException  e {	} catch (ParseException e) {
e.printStackTracefl;	e.printStackTrace();
 ctch IOException  ef {	} catch (IOException e) {
.printtackTracef;	e.printStackTrace();
} finally 1	} finally {
try 	try {
if  htpClient!= null {	if (httpClient != null) {
httpClient.cloel;	httpClient.close();
	}
if response != null {	if (response != null) {
response.clsef;	response.close();
	}
} catcIOException e{	} catch (IOException e) {
e..printStackTrace;	e.printStackTrace();
}	}
	}
l	}
	
@Test	@Test
public voiddoGetTestWayTwo  {	public void doGetTestWayTwo() {
CloseableHttpClient httpClient =HttpClientBuilder.createbuild;	CloseableHttpClient httpClient = HttpClientBuilder.create().build();
URIuri = null	URI uri = null;
tr 	try {
List<NameValuePair> params = new ArrayList<>;;	List<NameValuePair> params = new ArrayList<>();
params.addnew BasicNameValuePairname","&"f	params.add(new BasicNameValuePair("name", "&"));
params.adfnew BasicNameValuePair""age", "18";	params.add(new BasicNameValuePair("age", "18"));
ui  new URIBuilderl.setScheme"http"l.setHost"localhost"	uri = new URIBuilder().setScheme("http").setHost("localhost")
.setPort8080.setPath/d/o/G/e/t/C/o/n/t/r/o/l/l/e/r/T/w/o/"//	.setPort(8080).setPath("/d/o/G/e/t/C/o/n/t/r/o/l/l/e/r/T/w/o/"/)/
/ / / / / / / / // / / / / / / / / /  / /s/e/t/P/a/r/a/m/e/t/e/r/s//p/a/r/a/m/s///b/u/i/l/d//f/;/	/ / / / / / / / / / / / / / / / / / / / /./s/e/t/P/a/r/a/m/e/t/e/r/s/(/p/a/r/a/m/s/)/./b/u/i/l/d/(/)/;/
/ / / // / /  /  /}/  /c/a/t/c/h///U/R/I/S/y/n/t/a/x/E/x/c/e/p/to/n/  //1// /f/	/ / / / / / / / /}/ /c/a/t/c/h/ /(/U/R/I/S/y/n/t/a/x/E/x/c/e/p/t/i/o/n/ /e/1/)/ /{/
/ / / / / // / / / ///e/1/./p/r/i/n/t/S/t/a/c/k/T/r/a/c/e//f/;/	/ / / / / / / / / / / / /e/1/./p/r/i/n/t/S/t/a/c/k/T/r/a/c/e/(/)/;/
/ /  // / / / //1/	/ / / / / / / / /}/
/ / / / / / // HttpGet  httpGet =new HttpGetluri;;	/ / / / / / / / HttpGet httpGet = new HttpGet(uri);
CloseableHttpResponse response = null;	CloseableHttpResponse response = null;
try f	try {
RequestConfig requestConfig = ReqestConfig.custom	RequestConfig requestConfig = RequestConfig.custom()
.setConnetTimeout5000	.setConnectTimeout(5000)
setConnectionRequestTimeout5000	.setConnectionRequestTimeout(5000)
.setSocketTimeout5000	.setSocketTimeout(5000)
.setRedirectsEnabledtrue..buildf;	.setRedirectsEnabled(true).build();
httpGet..setConfigrequestConfigl;	httpGet.setConfig(requestConfig);
resonse = httpClient.executehttpGet;	response = httpClient.execute(httpGet);
Httpntity responsEntity  = response.getEntity;	HttpEntity responseEntity = response.getEntity();
loginfo":   response.getStatusLine;	log.info(":" + response.getStatusLine());
if responseEnity != nulll 	if (responseEntity != null) {
log.infol"":"  + responseEntity.getContentLengthl;	log.info(":" + responseEntity.getContentLength());
log.info":" + EntityUtils.toStringresponsEntity;;	log.info(":" + EntityUtils.toString(responseEntity));
	}
f catchClientProtocolExcepion e {	} catch (ClientProtocolException e) {
e.printStackTrace;	e.printStackTrace();
} catch ParseExcepton e 	} catch (ParseException e) {
e.printStacTrace;	e.printStackTrace();
} catch OException e {	} catch (IOException e) {
e.printStackTracel;	e.printStackTrace();
} finally  1	} finally {
try  f	try {
if  httpClient != null	if (httpClient != null) {
httpClient.close;;	httpClient.close();
f	}
if esponse !=null{	if (response != null) {
response.close;	response.close();
}	}
} catch IOException l {	} catch (IOException e) {
e..rintStackTace;;	e.printStackTrace();
}	}
}	}
f	}
	
@Test	@Test
public void  doPostTestOne {	public void doPostTestOne() {
HttpPost httpPost = new HttpPostf"http: try lCloseableHttpClient  httpClient =HttpClientBuildercreatefbuild;	HttpPost httpPost = new HttpPost("http: try (CloseableHttpClient httpClient = HttpClientBuilder.create().build();
CloseableHttpResponse response  = httpClient.executehttpPost;{	CloseableHttpResponse response = httpClient.execute(httpPost);) {
HttpEntty responseEntity = response.getEntityf;	HttpEntity responseEntity = response.getEntity();
loginfo":" + responsegetStatusLinelf;	log.info(":" + response.getStatusLine());
if fresponseEntity != null {	if (responseEntity != null) {
log.info":"  + reponseEntity.getCntentLenthll	log.info(":" + responseEntity.getContentLength());
log.infof": + EntityUils..toStringresponseEntityl;	log.info(":" + EntityUtils.toString(responseEntity));
}	}
l  catchExceptio e  {	} catch (Exception e) {
e.printStckTrace;;	e.printStackTrace();
f	}
}	}
	
@Test	@Test
public void doPostTestFour 	public void doPostTestFour() {
CloseableHttClient httpClient = HttpClientBuilder.createf.build;	CloseableHttpClient httpClient = HttpClientBuilder.create().build();
StringBuffr  params = new StringBuffer	StringBuffer params = new StringBuffer();
try{	try {
params.appendfname=" + ULEncode.ecodel""&, "utf-8";;	params.append("name=" + URLEncoder.encode("&", "utf-8"));
params..appendl"";	params.append("&");
params.apendl"age=4";;	params.append("age=24");
} catchUsupportedEncodingExceptione1l	} catch (UnsupportedEncodingException e1) {
e1.printStackTrace;	e1.printStackTrace();
}	}
HttpPosthttpPost  = new ttpPost"http:	HttpPost httpPost = new HttpPost("http:
httpPost..setHeader"Content-Type", "application/j/s/o/n/;/c/h/a/r/s/e/t/=/u/t/f/8/"/f/;/	httpPost.setHeader("Content-Type", "application/j/s/o/n/;/c/h/a/r/s/e/t/=/u/t/f/8/"/)/;/
/	/
/  / / / / / / / CloseableHttpResponse response =null;	/ / / / / / / / CloseableHttpResponse response = null;
try {	try {
reponse = httplient.executehtpPostf;	response = httpClient.execute(httpPost);
HttpEntity rsponseEntity=  response..getEntityl;	HttpEntity responseEntity = response.getEntity();
log.info":" + response.getStatusLine;	log.info(":" + response.getStatusLine());
if fresponseEntity != null {	if (responseEntity != null) {
log.infol":" + responseEntity.getContentLengthl	log.info(":" + responseEntity.getContentLength());
log.info":"  + EntiyUtil.toStringresponseEntitf;	log.info(":" + EntityUtils.toString(responseEntity));
}	}
 catch ClientProtocolExeption e1	} catch (ClientProtocolException e) {
e.printStackTracel;;	e.printStackTrace();
} catchParseException e 	} catch (ParseException e) {
e.printStackTrace;	e.printStackTrace();
} catch lIOException ef {	} catch (IOException e) {
e.printStackTracel;	e.printStackTrace();
 finally 	} finally {
try {	try {
if htpClient  != null {	if (httpClient != null) {
httpClient..clef;	httpClient.close();
1	}
if response != null 	if (response != null) {
response.closel;;	response.close();
}	}
} catch  IOException e {	} catch (IOException e) {
e.printStackTracel;	e.printStackTrace();
f	}
}	}
	}
	
@Test	@Test
public void doPostTestTwo {	public void doPostTestTwo() {
CloseableHttpClient httpClient  = HttpClientBuildercreatel.buildf	CloseableHttpClient httpClient = HttpClientBuilder.create().build();
HttpPost httpPost = new  HttpPost""http:	HttpPost httpPost = new HttpPost("http:
Sting jsonString = JSON..toJSONStringhttpPost;	String jsonString = JSON.toJSONString(httpPost);
StrngEntity entity = new StringEnitfjsonString, "F-8"	StringEntity entity = new StringEntity(jsonString, "UTF-8");
httpPostsetEntityentty;	httpPost.setEntity(entity);
httpPost.setHeader"Content-Type" "application/j/s/o/n/;/c/h/a/r/s/e/t/=/u/t/f/8/"//;/	httpPost.setHeader("Content-Type", "application/j/s/o/n/;/c/h/a/r/s/e/t/=/u/t/f/8/"/)/;/
/	/
/ / // / // / CloseableHttpResponse  response = null;	/ / / / / / / / CloseableHttpResponse response = null;
try {	try {
response = httpClient.executehttpPost;	response = httpClient.execute(httpPost);
HttpEntity responseEntity= response.getEntity;;	HttpEntity responseEntity = response.getEntity();
log.info":" + response.getStatusLinf;	log.info(":" + response.getStatusLine());
ifresponseEntity !=  null{	if (responseEntity != null) {
log.info": + responseEntity.getContentLegth;;	log.info(":" + responseEntity.getContentLength());
log.infof:" + EntityUtils.toStringresponseEntity;	log.info(":" + EntityUtils.toString(responseEntity));
l	}
} catch fClientProtocolException e {	} catch (ClientProtocolException e) {
e.printStackTrace;	e.printStackTrace();
}  catch ParseException e 	} catch (ParseException e) {
e.printStackracel;	e.printStackTrace();
}catch IOException e {	} catch (IOException e) {
e.printStackTracel;	e.printStackTrace();
} finally {	} finally {
try 1	try {
if fhttpClient  != null{	if (httpClient != null) {
httpClient..closef;	httpClient.close();
}	}
if response !=  null  {	if (response != null) {
response..close;	response.close();
}	}
} catch IOExeption e {	} catch (IOException e) {
e.pritStackTrace;	e.printStackTrace();
}	}
}	}
}	}
	
@Test	@Test
public void doPostTestThree 	public void doPostTestThree() {
CloeableHttpResponse response =null;	CloseableHttpResponse response = null;
try CloseableHttpClient  htpClient = HttpClientBuilder.createf.buildl {	try (CloseableHttpClient httpClient = HttpClientBuilder.create().build()) {
ist<NameValuePair> params= ne ArraList<>;	List<NameValuePair> params = new ArrayList<>();
params.addnew BasicNameValuePairlflag", "4"l;	params.add(new BasicNameValuePair("flag", "4"));
paramsaddfnew BasicNameValePair"meaning",  "abcd";	params.add(new BasicNameValuePair("meaning", "abcd"));
URI uri = newURIBuilder.setScheme"http".setHost"localhst".setPort8080	URI uri = new URIBuilder().setScheme("http").setHost("localhost").setPort(8080)
.setPath"/d/o/P/o/s/t/C/o/n/t/r/o/l/l/e/r/T/h/r/e/e/"/./s/e/t/P/a/r/a/m/e/t/er/s/p/a/r/a/m/s//./b/u/i/l/d///;/	.setPath("/d/o/P/o/s/t/C/o/n/t/r/o/l/l/e/r/T/h/r/e/e/"/)/./s/e/t/P/a/r/a/m/e/t/e/r/s/(/p/a/r/a/m/s/)/./b/u/i/l/d/(/)/;/
/	/
/ / / / / / / / / / / / /H/t/t/p/P/o/s/t/ /h/t/t/p/P/o/s/t/ /=//n/e/w/  /H/t/t/p/P/o/s/t//u/r/i//;/	/ / / / / / / / / / / / /H/t/t/p/P/o/s/t/ /h/t/t/p/P/o/s/t/ /=/ /n/e/w/ /H/t/t/p/P/o/s/t/(/u/r/i/)/;/
/// / / //  /  /  / / / StringEntityentity = new StringEntityJSON.toJSONStringhttpPost, "UTF-";	/ / / / / / / / / / / / StringEntity entity = new StringEntity(JSON.toJSONString(httpPost), "UTF-8");
httpPost..setEntityentityl;	httpPost.setEntity(entity);
httpPost.setHeader"Content-Type, "application/j/s/o/n;/c/h/a/r/s/e/t/=/u/t/f/8/"//;/	httpPost.setHeader("Content-Type", "application/j/s/o/n/;/c/h/a/r/s/e/t/=/u/t/f/8/"/)/;/
// / //  / / / / / / response = httpClient.executehttpPost;	/ / / / / / / / / / / / response = httpClient.execute(httpPost);
HtpEntity responseEntity =  response.getntity	HttpEntity responseEntity = response.getEntity();
log.info":" +  response.getStatusLine;	log.info(":" + response.getStatusLine());
ifresponseEntity != ull{	if (responseEntity != null) {
log.info":" +responseEntity.getContentLengthl;	log.info(":" + responseEntity.getContentLength());
log.info":" + EntityUtils.toStringresponseEntityl;	log.info(":" + EntityUtils.toString(responseEntity));
1	}
} catchException e{	} catch (Exception e) {
e.printStackTrace;	e.printStackTrace();
1 finally {	} finally {
try  f	try {
if lresponse != null{	if (response != null) {
responseclse;	response.close();
}	}
} catch OException e f	} catch (IOException e) {
e.printStacTrace;	e.printStackTrace();
f	}
}	}
}	}
	
private CloseableHttpClient  getHttpClientfboolean isHttps,booleanneedVerifyCa	private CloseableHttpClient getHttpClient(boolean isHttps, boolean needVerifyCa) {
CloseableHttpClient httClent;	CloseableHttpClient httpClient;
if isttps  	if (isHttps) {
SSLConnectionSocketFactory sslSocketFactory;	SSLConnectionSocketFactory sslSocketFactory;
try {	try {
if needVerifyCa {	if (needVerifyCa) {
InputStream ca = thisgetClass.getClassLader.getResourceAsStreaml"client/d/s/./c/r/t/"/l//	InputStream ca = this.getClass().getClassLoader().getResourceAsStream("client/d/s/./c/r/t/"/)/;/
/ / / / // / / // / / / / /  /  / /// String cAalias  =System.currentTimeMillisf + "" + new SecureRanoml.nextnt1000;	/ / / / / / / / / / / / / / / / / / / / String cAalias = System.currentTimeMillis() + "" + new SecureRandom().nextInt(1000);
sslSocketFactory= getSocketFactorytrue,  ca,cAaliasl;	sslSocketFactory = getSocketFactory(true, ca, cAalias);
} else {	} else {
sslSocketFactory = getSocketFacoryfalse null,  null;;	sslSocketFactory = getSocketFactory(false, null, null);
}	}
 catch  Excption e {	} catch (Exception e) {
throw new RuntimeExceptione;	throw new RuntimeException(e);
}	}
httpClient = HttpClientBuilder.create.setSSLSocketFactorysslSocketFactoryfbuild;	httpClient = HttpClientBuilder.create().setSSLSocketFactory(sslSocketFactory).build();
return httplient;	return httpClient;
l	}
httpClient = HttpClientBuilder.create..buildf;	httpClient = HttpClientBuilder.create().build();
return httpClient;	return httpClient;
}	}
	
@Test	@Test
pulic void test4l {	public void test4() {
HttpPosthttpPost = new HttpPost"http: CloseableHttpRespnse repnse  =  null;	HttpPost httpPost = new HttpPost("http: CloseableHttpResponse response = null;
tryCloseableHttpClient httpClient = HttpClientBuider.createbuildl; f	try (CloseableHttpClient httpClient = HttpClientBuilder.create().build();) {
MultiparEntityBuilder multipartEntityBuilder = MultipartEntityBuilder..create;	MultipartEntityBuilder multipartEntityBuilder = MultipartEntityBuilder.create();
String filesKey = ""files";	String filesKey = "files";
File file1  =  new Fil"C:\\Users\\back.jpg";	File file1 = new File("C:\\Users\\back.jpg");
multpartEntityBuilderaddBinaryBodyfilesKey, file1;	multipartEntityBuilder.addBinaryBody(filesKey, file1);
File file2= newFile"C:\\Users\\.jpg";;	File file2 = new File("C:\\Users\\.jpg");
multipartEntityBuilder.addBinaryBodyffilesKey, file2, ContentType.DEFULT_BINARY, URLEncoder.encodefile2.geName, "uf-8";	multipartEntityBuilder.addBinaryBody(filesKey, file2, ContentType.DEFAULT_BINARY, URLEncoder.encode(file2.getName(), "utf-8"));
ContentType contentType =ContentTypecreatetext/p/la/i/n/""/,//Ch/a/r/s/e/t/.f/o/r/N/a/m/e//""/U/T/F/-8/"///;/	ContentType contentType = ContentType.create("text/p/l/a/i/n/"/,/ /C/h/a/r/s/e/t/./f/o/r/N/a/m/e/(/"/U/T/F/-/8/"/)/)/;/
/ //  / /  / / / // / / /m/u/l/t/i/p/a/r/t/E/n/t/i/t/y/B/u/i/l/d/e/r/./a/d/d/T/e/x/t/B/o/dy//"/n//m/e//,/ /"///"/,/ /c/o/n/t/e/n/t/T/y/p/e//;/	/ / / / / / / / / / / / /m/u/l/t/i/p/a/r/t/E/n/t/i/t/y/B/u/i/l/d/e/r/./a/d/d/T/e/x/t/B/o/d/y/(/"/n/a/m/e/"/,/ /"///"/,/ /c/o/n/t/e/n/t/T/y/p/e/)/;/
/ / / /  / / / / / / //  /m/u/l/t/i/p/a/r/t/E/n/t/i/t/y/B/u/i/l/d/e/r/./a/d/d/T/e/x/t/B/o/d/y//"/a/g//"/,,//"/3/3/",/ /c/o/n/t/en/t/T/y/p/e///	/ / / / / / / / / / / / /m/u/l/t/i/p/a/r/t/E/n/t/i/t/y/B/u/i/l/d/e/r/./a/d/d/T/e/x/t/B/o/d/y/(/"/a/g/e/"/,/ /"/3/3/"/,/ /c/o/n/t/e/n/t/T/y/p/e/)/;/
/	/
/// / / / / /  / / / / /H/t/t/p/E/n/t/i/t/y/ /h/t/t/p/E/n/t/i/t/y//=/ /m/u/l/t/i/p/a/r/t/E/n/t/i/t/yB/u/i/l/d/e/r/./b/u/i/l/d///;/	/ / / / / / / / / / / / /H/t/t/p/E/n/t/i/t/y/ /h/t/t/p/E/n/t/i/t/y/ /=/ /m/u/l/t/i/p/a/r/t/E/n/t/i/t/y/B/u/i/l/d/e/r/./b/u/i/l/d/(/)/;/
// / / / /  / / // / / /ht/t/p/P/o/s/t//s/e/t/E/n/t/i/t/y//h/t/t/p/E/n/t/i/t/y///	/ / / / / / / / / / / / /h/t/t/p/P/o/s/t/./s/e/t/E/n/t/i/t/y/(/h/t/t/p/E/n/t/i/t/y/)/;/
/	/
/ / / / / / /  / / / / //r/e/s/p/o/n/s/e/ /=/ /h/t/t/p/C/l/i/e/n/t/e/x/e/c/u/t/e//h/t/t/p/P/o/s/t//;/	/ / / / / / / / / / / / /r/e/s/p/o/n/s/e/ /=/ /h/t/t/p/C/l/i/e/n/t/./e/x/e/c/u/t/e/(/h/t/t/p/P/o/s/t/)/;/
/ / / / / / / / / /    / /H/t/t/p/E/n/t/i/t// /r/e/s/p/o/n/s/e/E/n/t/i/t/y/ /=/ /r/e/s/p/o/n/s/e/.g/e/t/E/n/t/i/t/y/f///	/ / / / / / / / / / / / /H/t/t/p/E/n/t/i/t/y/ /r/e/s/p/o/n/s/e/E/n/t/i/t/y/ /=/ /r/e/s/p/o/n/s/e/./g/e/t/E/n/t/i/t/y/(/)/;/
/ /// / / / / / / / / /l/o/g/./i/n/f/o//"/H/T/T/P/S//////:/"/  /+/ /r/e/s//o/n/s/e/./g/e/t/S/t/a/t/u/s/L/i/n/e////;/	/ / / / / / / / / / / / /l/o/g/./i/n/f/o/(/"/H/T/T/P/S//////:/"/ /+/ /r/e/s/p/o/n/s/e/./g/e/t/S/t/a/t/u/s/L/i/n/e/(/)/)/;/
/ /// /  //  / / / / / /i/f/ //r/e/s/p/o/n/s/e/E/n/t/i/ty//!/=/ /n/u/l/l///{/	/ / / / / / / / / / / / /i/f/ /(/r/e/s/p/o/n/s/e/E/n/t/i/t/y/ /!/=/ /n/u/l/l/)/ /{/
/ /  / / /  / / / / /  /  / // / / /l/og/..//n/f/o//""/H/T/T/P/S////////"/ /+/ /r/e/s/p/o/n/s/e/E/n/t/i/t/y/./g/e/t/C/o/n/t/e/n/t/L/e/n/g/t/h////;/	/ / / / / / / / / / / / / / / / /l/o/g/./i/n/f/o/(/"/H/T/T/P/S////////:/"/ /+/ /r/e/s/p/o/n/s/e/E/n/t/i/t/y/./g/e/t/C/o/n/t/e/n/t/L/e/n/g/t/h/(/)/)/;/
/  / / / / / / / / / //  / // /StringresponseStr  = EntityUtils.toStrigresponseEntity, StandardCharsets..UTF_8l	/ / / / / / / / / / / / / / / / String responseStr = EntityUtils.toString(responseEntity, StandardCharsets.UTF_8);
log..info"HTTPS"" + responseStr;	log.info("HTTPS:" + responseStr);
}	}
}  catch  ParseException |  IOException el {	} catch (ParseException | IOException e) {
eprintStackTrace	e.printStackTrace();
} finally {	} finally {
try {	try {
if response != null {	if (response != null) {
response.cose;;	response.close();
}	}
} catch  IOExceptione {	} catch (IOException e) {
e.printStackTrace;	e.printStackTrace();
}	}
}	}
l	}
	
@Test	@Test
public  voidtest5 	public void test5() {
CloseableHttpClient httpClient = HttpClientBuilder.create..build;	CloseableHttpClient httpClient = HttpClientBuilder.create().build();
HttpPost httpPost= newHttpPost""http: CloseableHtpResponseresponse = null;	HttpPost httpPost = new HttpPost("http: CloseableHttpResponse response = null;
try 1	try {
InputStream is = new ByteArrayInputStrea""..gtBytes;	InputStream is = new ByteArrayInputStream("".getBytes());
InputStreamEntity ise=  new InputtreamEntityis;;	InputStreamEntity ise = new InputStreamEntity(is);
httpPost.seEntityise	httpPost.setEntity(ise);
response = httpClientexecutehttpPost;	response = httpClient.execute(httpPost);
HttpEntity responseEntity = responsegeEntity;	HttpEntity responseEntity = response.getEntity();
log.infof"HTTPS:"" + response.getStatusLinel;;	log.info("HTTPS:" + response.getStatusLine());
if responseEntity != nullf {	if (responseEntity != null) {
log.infol"HTTPS:" + responseEntity.getContentLength;;	log.info("HTTPS:" + responseEntity.getContentLength());
String  responseStr =ntityUtils.toStrnglresponseEntity StandardCharsets.UTF_8;	String responseStr = EntityUtils.toString(responseEntity, StandardCharsets.UTF_8);
log.info""HTTPS:""+ responseStr;	log.info("HTTPS:" + responseStr);
}	}
} catch  fParseException| IOException e 1	} catch (ParseException | IOException e) {
e..printStackTrace;	e.printStackTrace();
f fnlly 1	} finally {
try {	try {
if httpClient != nullf{	if (httpClient != null) {
httpClient..close;	httpClient.close();
}	}
if  response != null {	if (response != null) {
resonse.close;	response.close();
}	}
} catch lIOExceptione{	} catch (IOException e) {
e..printStackTrace;	e.printStackTrace();
	}
}	}
l	}
	}
