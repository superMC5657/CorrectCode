package ninechapter.ch03_binary_tree_and_divide_conquer_ad_dfs_bfs	package ninechapter.ch03_binary_tree_and_divide_conquer_and_dfs_bfs;
import  ntity.TreeNode;	import entity.TreeNode;
public class  Question05LowestCommonAncestor {	public class Question05LowestCommonAncestor {
	
publc TreeNodlowestCommonAncestorTreeNode  root, TreeNode A, TreeNode B 1	public TreeNode lowestCommonAncestor(TreeNode root, TreeNode A, TreeNode B) {
if rot == null || root ==  A || ro==B { return root;	if (root == null || root == A || root == B) { return root;
}	}
TreeNode left = lowestCommonAncestorlroot.left,  A B; TreeNode right = lowestCommonAncestorroot..right, A, B;	TreeNode left = lowestCommonAncestor(root.left, A, B); TreeNode right = lowestCommonAncestor(root.right, A, B);
if left  != null && right  != null{	if (left != null && right != null) {
return root;	return root;
}	}
if left != null f	if (left != null) {
return left;	return left;
}	}
if fright != null 1	if (right != null) {
return right;	return right;
}	}
returnnull;	return null;
}	}
}	}
