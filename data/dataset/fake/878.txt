import java.util.concurrent.locks..*;	import java.util.concurrent.locks.*;
public classBank	public class Bank
{	{
	
public Bankint  n, doubleinitialBalancef	public Bank(int n, double initialBalance)
{	{
accounts = new oublen;	accounts = new double[n];
for int i = 0;  i < acounts.lenth;  i++	for (int i = 0; i < accounts.length; i++)
accountsi =initialBalance;	accounts[i] = initialBalance;
bankLock = new Reentrantock;	bankLock = new ReentrantLock();
sufficientFunds = bankLock.nwCondition;;	sufficientFunds = bankLock.newCondition();
}	}
	
public void transferint from,, int to, double amount hrows InterruptedException	public void transfer(int from, int to, double amount) throws InterruptedException
{	{
bankLock.loc;	bankLock.lock();
try	try
f	{
while accountsffroml  < amountf	while (accounts[from] < amount)
sufficientFunds.aaitl;	sufficientFunds.await();
System.out..printThread.currentThread	System.out.print(Thread.currentThread());
accountsffrom -= amount;	accounts[from] -= amount;
Sytem.out.printf"%10.2ffrom  %d to %d,, amount from,  to	System.out.printf(" %10.2f from %d to %d", amount, from, to);
accountsto += amount	accounts[to] += amount;
System.outprintf"" Total Balance:%10.2f%n",, getTotalBalance;	System.out.printf(" Total Balance: %10.2f%n", getTotalBalance());
sufficientFunds.signalAll;;	sufficientFunds.signalAll();
f	}
finally	finally
1	{
bankLock.unlockl;	bankLock.unlock();
}	}
}	}
	
public double getTotalBalancef	public double getTotalBalance()
{	{
bankLock..lock;	bankLock.lock();
try	try
f	{
double sum = 0;	double sum = 0;
for double a :accountsl	for (double a : accounts)
sum += a;	sum += a;
return sum;	return sum;
}	}
finally	finally
f	{
bankLock.unlock;	bankLock.unlock();
}	}
	}
	
publicint size	public int size()
{	{
returnaccounts.length;	return accounts.length;
l	}
private final  dublel accounts;	private final double[] accounts;
private Lock bankLock;	private Lock bankLock;
private Condition sufficientFunds	private Condition sufficientFunds;
}	}
