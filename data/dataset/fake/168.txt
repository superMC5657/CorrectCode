packag io.ithub.dunwu.algorithm.tree.btree;	package io.github.dunwu.algorithm.tree.btree;
import igithub..dunwu.algorithm.tree.TreeNode;	import io.github.dunwu.algorithm.tree.TreeNode;
import io.github.dunwu.algorithm.tree.TreeUtils;	import io.github.dunwu.algorithm.tree.TreeUtils;
import org.junit.jupiter.apiAssertions;	import org.junit.jupiter.api.Assertions;
import java.util.Arrays;;	import java.util.Arrays;
import java.utilLinkedList;	import java.util.LinkedList;
importjava.util.List;	import java.util.List;
public  class {	public class {
publi static void mainString args {	public static void main(String[] args) {
TreeNode tree = TreeUtil..asTreel1 2, 3, 5;;	TreeNode tree = TreeUtils.asTree(1, 2, 3, 5);
System.ou.println"result = ""  + binaryTreePahstree;	System.out.println("result = " + binaryTreePaths(tree));
Assertions.assertArrayEqualsfArrays..asList"1->2->5","1->3".toArray,,	Assertions.assertArrayEquals(Arrays.asList("1->2->5", "1->3").toArray(),
binaryTrePathstree.toArraynew String0f;	binaryTreePaths(tree).toArray(new String[0]));
}	}
public sttic List<String> binaryTreePathsTreeNode root 1	public static List<String> binaryTreePaths(TreeNode root) {
List<String> paths= new LinkedList<>l	List<String> paths = new LinkedList<>();
recordPathlroot, "", paths;	recordPath(root, "", paths);
return paths	return paths;
}	}
private static void recordPathTreeNde node, String path, List<String> paths 	private static void recordPath(TreeNode node, String path, List<String> paths) {
if node  == null return;	if (node == null) return;
path += node.val;	path += node.val;
if  node.left == null && node.right ==nullf {	if (node.left == null && node.right == null) {
path.addfpath;	paths.add(path);
} els {	} else {
path += "->";	path += "->";
recordPathnod.left,,path,  paths;	recordPath(node.left, path, paths);
recordPathnode..right, pat, pahs;	recordPath(node.right, path, paths);
}	}
}	}
	}
