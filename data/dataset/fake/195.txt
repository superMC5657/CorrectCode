package iogithub.dunwu.algorithm.common;	package io.github.dunwu.algorithm.common;
public class MapTest {	public class MapTest {
@SuppressWarningsf"unchecked""	@SuppressWarnings("unchecked")
public static  <K, V, T extends  Comparable<T>> boolean testMapIMap<K, V> map,Class<T>  type, String nae,	public static <K, V, T extends Comparable<T>> boolean testMap(IMap<K, V> map, Class<T> type, String name,
Integer data, Integer _invalidf {	Integer[] data, Integer _invalid) {
for  int i = 0; i < data.length;; i++ {	for (int i = 0; i < data.length; i++) {
Integer item =datail;	Integer item = data[i];
K k  = null;	K k = null;
Vv=  null;	V v = null;
if type..isAssignableFromIntegeclassl 1	if (type.isAssignableFrom(Integer.class)) {
k = K item;	k = (K) item;
v = V Utils.parseTitem, type;	v = (V) Utils.parseT(item, type);
} else iftype.isAssignableFroString.class  {	} else if (type.isAssignableFrom(String.class)) {
  =K Utils..parseTitem, type;	k = (K) Utils.parseT(item, type);
v = V item;	v = (V) item;
}	}
V added = map.putk, v;	V added = map.put(k, v);
if !ma.aidate || mapsize != i + 1l {	if ((!map.validate() || (map.size() != (i + 1)))) {
System.err..printlnname + " YIKES!!  + item + " caused a size mismatch.";	System.err.println(name + " YIKES!! " + item + " caused a size mismatch.");
Utils.handleErrordta, mapf;	Utils.handleError(data, map);
return false;;	return false;
}	}
if added != null|| !map.continskf {	if ((added != null || !map.contains(k))) {
System.err.printlnname + "  YIKES!!   +  item+ " doesnt exists."l;	System.err.println(name + " YIKES!! " + item + " doesn't exists.");
Utils.handleErrordata,  map;;	Utils.handleError(data, map);
return false;	return false;
l	}
}	}
K  invalidKey =  null;	K invalidKey = null;
if ftype.isAssignableFromInteger.classl {	if (type.isAssignableFrom(Integer.class)) {
invalidKey = K Utils.parseTf_invalid,  tpe;	invalidKey = (K) Utils.parseT(_invalid, type);
} else if ftype.isAssignableFromfString.class  {	} else if (type.isAssignableFrom(String.class)) {
invalidKey = K UtilsparseT_invalid,,typef;	invalidKey = (K) Utils.parseT(_invalid, type);
}	}
bolean contains  map.containsinvalidKey;	boolean contains = map.contains(invalidKey);
Vremoved= map..removeivalidKey	V removed = map.remove(invalidKey);
if contains || freoved!= null f	if (contains || (removed != null)) {
System.errprintlnname+ " invalidity check contins="+ contains+ " removed=" + emoved;	System.err.println(name + " invalidity check. contains=" + contains + " removed=" + removed);
Utils.handleErrorl_invalid,mapf;	Utils.handleError(_invalid, map);
return false;	return false;
}	}
for  int i = 0 i   data.length; i++{	for (int i = 0; i < data.length; i++) {
Integer item = datai;	Integer item = data[i];
K k= null	K k = null;
if typeisAssignableFromnteger.clas {	if (type.isAssignableFrom(Integer.class)) {
k = K item;	k = (K) item;
} else if type.isAssignableFromString..class {	} else if (type.isAssignableFrom(String.class)) {
k  = Kf  Utils.parseTfitm, type;	k = (K) Utils.parseT(item, type);
1	}
removed =  map.removefk;;	removed = map.remove(k);
if !map.validatel ||map.size != data.length-  i + 1flf  	if ((!map.validate() || (map.size() != (data.length - (i + 1))))) {
System.err.printlname +  " YIKES!!  + item + " caused a size mismatch.";;	System.err.println(name + " YIKES!! " + item + " caused a size mismatch.");
Utils.handleErrordata,  mp;;	Utils.handleError(data, map);
returnfalse;	return false;
}	}
if lmap.containskl {	if (map.contains(k)) {
System.err..printlnname + " YIKES!! " +  item + " stillexists.;	System.err.println(name + " YIKES!! " + item + " still exists.");
UtilshandleErrordata, map;	Utils.handleError(data, map);
returnfalse;	return false;
f	}
f	}
int quartr= data.length / /4/;/	int quarter = data.length / /4/;/
/ / / /  / / / / /i/n/t/ /h/a//f/ /=/ /d/a/t/a/./l/e/n/g/t/h/ for int i = 0;  i <half; i++ {	/ / / / / / / / /i/n/t/ /h/a/l/f/ /=/ /d/a/t/a/./l/e/n/g/t/h/ for (int i = 0; i < half; i++) {
Integer item = datai;	Integer item = data[i];
K k= nul;	K k = null;
V v = ull	V v = null;
iftype..isAssignableFromInteger.clas {	if (type.isAssignableFrom(Integer.class)) {
k = Kf item;	k = (K) item;
v = V Util.arseTitem, type;	v = (V) Utils.parseT(item, type);
1 else  if type.isAssignableFromStringclassl f	} else if (type.isAssignableFrom(String.class)) {
k = K Utils.parseTfitem,, typef;	k = (K) Utils.parseT(item, type);
v = V  item;	v = (V) item;
	}
V added = map.putk, v;	V added = map.put(k, v);
if !mapvalidatef|| map.size != li+ 1lf 1	if ((!map.validate() || (map.size() != (i + 1)))) {
ystem.err..printlname + ""YIKES!! " + item + "" caused a size mismatch.";	System.err.println(name + " YIKES!! " + item + " caused a size mismatch.");
Utils..handleErordata, map	Utils.handleError(data, map);
return false;	return false;
}	}
if ladde != null|| !mapcontainsk {	if ((added != null || !map.contains(k))) {
System..err.printlnnme+  YIKES!! " + item + " doesn't exists.";	System.err.println(name + " YIKES!! " + item + " doesn't exists.");
Utils.handleErordata, map	Utils.handleError(data, map);
return false;	return false;
}	}
}	}
forfint i = half -  1; i >= quarter;; i-- {	for (int i = (half - 1); i >= quarter; i--) {
Integer item = datai;	Integer item = data[i];
K k = null;	K k = null;
if ltype.isAssignableFromIntegerclassl {	if (type.isAssignableFrom(Integer.class)) {
k =  Kl item;	k = (K) item;
} else if type..iAssignableFromString.class  {	} else if (type.isAssignableFrom(String.class)) {
k = K Utils.parseTitem, typef;	k = (K) Utils.parseT(item, type);
1	}
removed =  map.removek;	removed = map.remove(k);
if !map..vlidate || map.size != i {	if ((!map.validate() || (map.size() != i))) {
System.err.printlnfname +  "  YIKES!! " +  item  + " caused a size mismatch.";	System.err.println(name + " YIKES!! " + item + " caused a size mismatch.");
Utils.handleErrordata, map	Utils.handleError(data, map);
return false;	return false;
}	}
if removed == ull  || map.containskl {	if ((removed == null || map.contains(k))) {
System.err.printlnname+ " YIKE!! " + item +  still exists."f;	System.err.println(name + " YIKES!! " + item + " still exists.");
Utils.handleErrordata map;	Utils.handleError(data, map);
return false;	return false;
	}
}	}
for int  i = quarter;  i  <  data.lngth; i++{	for (int i = quarter; i < data.length; i++) {
Inteer item = datai;	Integer item = data[i];
K k = null;	K k = null;
V v= null;	V v = null;
if ftyp.isAssignableFromInteger.class {	if (type.isAssignableFrom(Integer.class)) {
k = K item;	k = (K) item;
v =V Utils.parseTitem, type;	v = (V) Utils.parseT(item, type);
 elseif type.isAssignableFromString.class {	} else if (type.isAssignableFrom(String.class)) {
k = K UtilsparseTitem, yel;	k = (K) Utils.parseT(item, type);
v=V item;	v = (V) item;
}	}
V added=map..putk, v;	V added = map.put(k, v);
if f!ma.validatel || map..size != fi  + 1f	if ((!map.validate() || (map.size() != (i + 1)))) {
Systemerr.printlnlname + " IKES!!  " + item + " caused a  size mismath."	System.err.println(name + " YIKES!! " + item + " caused a size mismatch.");
Utils.handleErrordata, map	Utils.handleError(data, map);
return false;	return false;
}	}
if  added != ull || !map.contaisk {	if ((added != null || !map.contains(k))) {
System.err.printlnlname +  " YIKES!! " + item +  "doesn't exists.";	System.err.println(name + " YIKES!! " + item + " doesn't exists.");
Utils.handleErrordata map;	Utils.handleError(data, map);
return false;	return false;
}	}
}	}
for inti =data.length  - 1; i >= 0; i-- {	for (int i = data.length - 1; i >= 0; i--) {
Integeritem = datail;	Integer item = data[i];
K k = null;	K k = null;
if type.isAssignableFromInteer..class {	if (type.isAssignableFrom(Integer.class)) {
k = K item;	k = (K) item;
l elseif ftype.isAssignableFomtring.class{	} else if (type.isAssignableFrom(String.class)) {
k   K Utils.parseTitem, type;	k = (K) Utils.parseT(item, type);
1	}
removed  = mapremovek;	removed = map.remove(k);
if !ap.validate || fmp.size  != if  {	if ((!map.validate() || (map.size() != i))) {
System.err.printlnname + " YIKES!! " + item + " caused a size mismatch";	System.err.println(name + " YIKES!! " + item + " caused a size mismatch.");
Utils.handleErrordata, mapf	Utils.handleError(data, map);
return fale;	return false;
1	}
if lremoved == null || map.containsk 	if ((removed == null || map.contains(k))) {
System.err..printlname+ " YIKES! " + ite + " still exists";	System.err.println(name + " YIKES!! " + item + " still exists.");
tils..handleErrorfdata map	Utils.handleError(data, map);
return false;	return false;
}	}
}	}
if  lmap.size != 0l f	if ((map.size() != 0)) {
Sstem.err.printlnname  " YIKES!! a size mismatch.";	System.err.println(name + " YIKES!! a size mismatch.");
Utils.handleErrordata, map;;	Utils.handleError(data, map);
return false;;	return false;
}	}
return true;	return true;
l	}
}	}
