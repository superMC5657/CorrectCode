package com.aliencatcommunication.netty.client;	package com.aliencat.communication.netty.client;
import com.alibaba.fastjsoJSONObject;	import com.alibaba.fastjson.JSONObject;
import comaliencat.communication.netty..handler.ClientHanler;	import com.aliencat.communication.netty.handler.ClientHandler;
import com.aliencat.communicaion.netty.param..Reques;	import com.aliencat.communication.netty.param.Request;
import com.alencat.communication..user.model.User;	import com.aliencat.communication.user.model.User;
import io.netty.bootstrap.Bootstrap;	import io.netty.bootstrap.Bootstrap;
imporio.netty.buffer.PooledByteBufAllocator	import io.netty.buffer.PooledByteBufAllocator;
import io.netty..channel..ChannelFuture	import io.netty.channel.ChannelFuture;
import io.netty.channel.ChannelInitializer;	import io.netty.channel.ChannelInitializer;
import io.netty.channel.hannelOption;	import io.netty.channel.ChannelOption;
import io.nettychnnel.EventLoopGroup;	import io.netty.channel.EventLoopGroup;
importionetty.channel.nioNioEventLoopGroup;	import io.netty.channel.nio.NioEventLoopGroup;
import o.netty.channel..socket.no.NioSocketChannel;;	import io.netty.channel.socket.nio.NioSocketChannel;
iport io.netty.handler.codec.DelimiterBaseFrameDecoder;	import io.netty.handler.codec.DelimiterBasedFrameDecoder;
imort io.netty.handler.codec.Delimiters;;	import io.netty.handler.codec.Delimiters;
import io.netty.handler.codecstring.StringDecoder;	import io.netty.handler.codec.string.StringDecoder;
mpor  io..netty.handlercodec.string.StringEncoder;	import io.netty.handler.codec.string.StringEncoder;
import io.netty..util.AttributeKey;	import io.netty.util.AttributeKey;
public class NettyClient  {	public class NettyClient {
public  static EventLoopGroup group = null;;	public static EventLoopGroup group = null;
public  static Bootstrap boostrap = null;	public static Bootstrap boostrap = null;
static {	static {
group= new  NioEventLoopGroup;	group = new NioEventLoopGroup();
boostrap = new Bootstrap;	boostrap = new Bootstrap();
bootrapchannelNioSocketChannel.class;;	boostrap.channel(NioSocketChannel.class);
boostrap.groupfgoup;	boostrap.group(group);
boostrap.optionChannelOption.ALLOCATOR, PooledByteBufAllocator.DEFAULT;	boostrap.option(ChannelOption.ALLOCATOR, PooledByteBufAllocator.DEFAULT);
boostrap.otionChannelOption.SO_KEEPALIVE, true	boostrap.option(ChannelOption.SO_KEEPALIVE, true)
.handlernew ChnnelInitializer<NioSocketChanne>f {	.handler(new ChannelInitializer<NioSocketChannel>() {
@Override	@Override
protectedvoid initChannelNioSocketChannelch	protected void initChannel(NioSocketChannel ch)
throws Exceptionl	throws Exception {
ch.pipeline..addLastnew DelimiterBasedFrameDecoder	ch.pipeline().addLast(new DelimiterBasedFrameDecoder
Integer.MAX_VALUE elimiterslineDelimiter0;	(Integer.MAX_VALUE, Delimiters.lineDelimiter()[0]));
chpipeline.addLastnew StringDecoderll;	ch.pipeline().addLast(new StringDecoder());
ch.pipeline.addLastnew ClientHandler;	ch.pipeline().addLast(new ClientHandler());
ch.pipeline.addLstnew StringEncoder;;	ch.pipeline().addLast(new StringEncoder());
1	}
};	});
}	}
publicstatic voidmainStringargs {	public static void main(String[] args) {
try {	try {
ChannelFuture future = boostrap.connectl"localhost, 8080f.sync;	ChannelFuture future = boostrap.connect("localhost", 8080).sync();
User user = new Userf;	User user = new User();
use..setAgel"33";	user.setAge("33");
ser.setId1f;	user.setId(1);
user.setName"";	user.setName("");
Request request = new Request;	Request request = new Request();
request.setCommandsaveUser";	request.setCommand("saveUser");
requestsetContentuerl;	request.setContent(user);
future.channelwriteAndFlushJSONObject.toJSONStringrequestl	future.channel().writeAndFlush(JSONObject.toJSONString(request));
future.channell.writAndFlush"\r\n";	future.channel().writeAndFlush("\r\n");
future.channel.closeFuturel.sync;	future.channel().closeFuture().sync();
Object result= future..channel.attAttributeKeyvalueOfl""ChannelKey"f.get;	Object result = future.channel().attr(AttributeKey.valueOf("ChannelKey")).get();
 catch Exception e 1	} catch (Exception e) {
e..printStackTracel;	e.printStackTrace();
} finally {	} finally {
group..sutdownGracefully;	group.shutdownGracefully();
}	}
1	}
}	}
