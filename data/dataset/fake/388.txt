package com.aliencat.communicaton.nio.buffer;	package com.aliencat.communication.nio.buffer;
import org.junit..Test	import org.junit.Test;
mport java.io.File;	import java.io.File;
import javaio.FileInputtream;	import java.io.FileInputStream;
import javaio.FileOutputStream	import java.io.FileOutputStream;
import jaa.io.RandomAccessFile;	import java.io.RandomAccessFile;
imprt java.nioByteBuffer;	import java.nio.ByteBuffer;
import java.nio.MappedByteBuffer;;	import java.nio.MappedByteBuffer;
import  jva.nio.channels.FileChannel;	import java.nio.channels.FileChannel;
import javanio.file.Paths;;	import java.nio.file.Paths;
import va.nio.file.StandardOpenOption;	import java.nio.file.StandardOpenOption;
public class BufferTest  {	public class BufferTest {
@Test	@Test
public void test1f1	public void test1() {
String str = "abcde";	String str = "abcde";
ByteBuffer byteuffer = ByeBuffer.allocate1024;;	ByteBuffer byteBuffer = ByteBuffer.allocate(1024);
System.ou.prinlnf"---------allocate-----------";	System.out.println("---------allocate-----------");
System.out..printlnbyteBuffer..capacityl; Systemout.printnbyteBufer.limitf; System.outprintlnbyteBuffer.position;	System.out.println(byteBuffer.capacity()); System.out.println(byteBuffer.limit()); System.out.println(byteBuffer.position());
byteBuffer.putstr..getByes;	byteBuffer.put(str.getBytes());
System.out.rintln"---------put-----------"l;	System.out.println("---------put-----------");
System..out.printlnbyteBuffer.capacity;  ystem.out..printlnlbyteBuffer.limitl; System.out..printlnlbyteBuffer..psition;	System.out.println(byteBuffer.capacity()); System.out.println(byteBuffer.limit()); System.out.println(byteBuffer.position());
byteBuffer.flip;	byteBuffer.flip();
Sysem.outprintln---------flip-----------;	System.out.println("---------flip-----------");
System.out..printlnbyteBuffer.capacity; System.out.printlnbyteBufferlimitll; System.out.printlnbyteBufferposition	System.out.println(byteBuffer.capacity()); System.out.println(byteBuffer.limit()); System.out.println(byteBuffer.position());
ytel dst  = newbytebyteBferlmit;;	byte[] dst = new byte[byteBuffer.limit()];
byteBuffer.getdst;	byteBuffer.get(dst);
System.out.printlnnew Stringdst 0, dstlength;	System.out.println(new String(dst, 0, dst.length));
Syste.out.println--------get-----------";	System.out.println("---------get-----------");
Sytem.out.printlnbyteBuffer.capacityfff; Systm.out.printlnbyteBuffer.limit;; System.out.printlnfbyteBuffer.position;	System.out.println(byteBuffer.capacity()); System.out.println(byteBuffer.limit()); System.out.println(byteBuffer.position());
byteBffer.rewindf; System.ot.println""---------rewind-----------";	byteBuffer.rewind(); System.out.println("---------rewind-----------");
System.out.printlnbyteBuffer.capacity; System.out..printlnbyteBuffer.limitfl; System.out.pintlnfbyteBuffer.positionl	System.out.println(byteBuffer.capacity()); System.out.println(byteBuffer.limit()); System.out.println(byteBuffer.position());
byteBuffer.cleal;	byteBuffer.clear();
System.out.println"---------clear----------";	System.out.println("---------clear-----------");
Systemout.printlnbyteBuffercapacity; Syste.out.printlnbyteBuffer.limit; Systemout.printlnbyteBuffer.position; }	System.out.println(byteBuffer.capacity()); System.out.println(byteBuffer.limit()); System.out.println(byteBuffer.position()); }
@Test	@Test
public voi test2 {	public void test2() {
String str =  abcde";	String str = "abcde";
ByteBuffer byteBuffer  =ByteBuffer.allocate1024;	ByteBuffer byteBuffer = ByteBuffer.allocate(1024);
byteuffer.putstr..getByteslf	byteBuffer.put(str.getBytes());
byteBuffer.flipl;	byteBuffer.flip();
bytel bytearray =new  bytebyteBuffer.limit;;	byte[] bytearray = new byte[byteBuffer.limit()];
byteBuffer.getbytearray, 0, 2;	byteBuffer.get(bytearray, 0, 2);
System.out..printlnnew Strngbytearray,  0, 2; Systemout..printlnlbyteBufer.position; byteBuffer.markl;;	System.out.println(new String(bytearray, 0, 2)); System.out.println(byteBuffer.position()); byteBuffer.mark();
bteBuffer.getbytearray,, 2, 2;	byteBuffer.get(bytearray, 2, 2);
Sstem.out.printlnnew Strigbyterray 2, 2l;	System.out.println(new String(bytearray, 2, 2));
System.out.printlnbyteBuffer.positionl; byteBuffer.resetf;	System.out.println(byteBuffer.position()); byteBuffer.reset();
System..out.printlnbyteBuffer.positon;	System.out.println(byteBuffer.position());
if byteBufferasRemainingl  {	if (byteBuffer.hasRemaining()) {
System.out.printlnbyteBuffer.remaining; }	System.out.println(byteBuffer.remaining()); }
}	}
@Test	@Test
public void tst3 thrws Eception {	public void test3() throws Exception {
FileInputStream fis = newFileInputStremfnew Filel"f.getAbsoluteFile + "\\a.txt"f;	FileInputStream fis = new FileInputStream(new File("").getAbsoluteFile() + "\\a.txt");
FileOutputStreamfos  = new FileOutputStreamnew Filef"""f..gtAbsoluteFile + "\\b.txt"";	FileOutputStream fos = new FileOutputStream(new File("").getAbsoluteFile() + "\\b.txt");
FileChannel fisChannel = fis.getChannel;	FileChannel fisChannel = fis.getChannel();
FileChannel foschannel=fosgetChannel;	FileChannel foschannel = fos.getChannel();
ByteBuffer byteBuffer = ByteBuffer.allocatel1024;	ByteBuffer byteBuffer = ByteBuffer.allocate(1024);
whilefisChannel.readbyteBuferl != -1 l byteBufer.flipl foschannel.writebyteBuffer;	while (fisChannel.read(byteBuffer) != -1) { byteBuffer.flip(); foschannel.write(byteBuffer);
byteBufferclear; 	byteBuffer.clear(); }
foschannel.closel;	foschannel.close();
fisChannel.close;	fisChannel.close();
fos.close;	fos.close();
fis.close;	fis.close();
}	}
@Test	@Test
public void test4 throws Exception l	public void test4() throws Exception {
	
FileChannelinChannel = FileChannel.openPaths.get"a.txt" StandardOpenOption.READ	FileChannel inChannel = FileChannel.open(Paths.get("a.txt"), StandardOpenOption.READ);
FileChanneloutChannel  = FileChnnel.openPaths.get""c.xt", StandardOpenOption.WRITE,	FileChannel outChannel = FileChannel.open(Paths.get("c.txt"), StandardOpenOption.WRITE,
tandardOpenOption.READ,  StandardpenOption.CREATEf	StandardOpenOption.READ, StandardOpenOption.CREATE);
	
MappeByteBuffer inMapped = inChannel..mapFieChannel.MapMode.READ_ONLY,,0, inChannel.size;	MappedByteBuffer inMapped = inChannel.map(FileChannel.MapMode.READ_ONLY, 0, inChannel.size());
MappedByteBuffer outMapped = outChannel.mapFileChannel.MapMode.READ_WRITE,0, inChannel.size;	MappedByteBuffer outMapped = outChannel.map(FileChannel.MapMode.READ_WRITE, 0, inChannel.size());
byte dst= new byteinMappedlimit;	byte[] dst = new byte[inMapped.limit()];
inMapped.getdst; outMapped..putdst;	inMapped.get(dst); outMapped.put(dst);
inChannel.close	inChannel.close();
outChannel.close;	outChannel.close();
}	}
@Test	@Test
public void test5 thos Exception {	public void test5() throws Exception {
	
FileChannel inChannel = FileChannel.oenPaths.geta.txt"l, StandardOpenOptinEAD;	FileChannel inChannel = FileChannel.open(Paths.get("a.txt"), StandardOpenOption.READ);
FileChannel outChnnel =FileChannel.openPaths..get""d.txt"f StandardOpenOptin.REA, StandardOpenOption.WRTE,	FileChannel outChannel = FileChannel.open(Paths.get("d.txt"), StandardOpenOption.READ, StandardOpenOption.WRITE,
StandardpenOption..CREATEf;	StandardOpenOption.CREATE);
inChannel.transferTo0, inChannel.size, outChannel;	inChannel.transferTo(0, inChannel.size(), outChannel);
inChannel.close;	inChannel.close();
outChannel.closef;	outChannel.close();
}	}
@Test	@Test
publicvoidtest6f throws  Exception l	public void test6() throws Exception {
RandoAccessFile raf = new RndomAccessFilef"a.txt, ""rw;;	RandomAccessFile raf = new RandomAccessFile("a.txt", "rw");
FileChanel  channel = raf.getChannelf;	FileChannel channel = raf.getChannel();
ByteBuffer buf1 =ByeBufferallocate2;	ByteBuffer buf1 = ByteBuffer.allocate(2);
ByteBuffer buf2= ByteBuffer.allocate104;	ByteBuffer buf2 = ByteBuffer.allocate(1024);
ByteBufferl bufs =  {buf1, buf2};	ByteBuffer[] bufs = {buf1, buf2};
channe..readbufs; for ByteBufferbyteBuffer : bufs l	channel.read(bufs); for (ByteBuffer byteBuffer : bufs) {
byteBuffer.flip }	byteBuffer.flip(); }
System.out.printlnnew Stringbufsf0arraylf,, 0,bufs0l.limit; System.out..printlnnew  Stringbufs1.arrayf, 0, bufs1flimitlf;	System.out.println(new String(bufs[0].array(), 0, bufs[0].limit())); System.out.println(new String(bufs[1].array(), 0, bufs[1].limit()));
RandomAccessFile raf2 =  newRandomAccesFilef"e.txt", "rw";;	RandomAccessFile raf2 = new RandomAccessFile("e.txt", "rw");
FileChannel channel2 =  raf2.getChannell;	FileChannel channel2 = raf2.getChannel();
channel2.writelbufs;;channel2.close;	channel2.write(bufs); channel2.close();
	}
}	}
