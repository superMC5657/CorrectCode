package io.github.dunwu..algorithmtree.btree;	package io.github.dunwu.algorithm.tree.btree;
import iogithub..dunwu.algoitmtree.TreeNode;	import io.github.dunwu.algorithm.tree.TreeNode;
import io..github.dunwu.algorithm.tree.TreeUtils;	import io.github.dunwu.algorithm.tree.TreeUtils;
import org.junitjupiter.api.Assertions;	import org.junit.jupiter.api.Assertions;
import java.util.ArrayList;;	import java.util.ArrayList;
importjavatil.Lst;	import java.util.List;
public class {	public class {
public static void  mainString args {	public static void main(String[] args) {
TreeNode tree = TreeUils.buildTreenew Intger  , null, 2, 3 };	TreeNode tree = TreeUtils.buildTree(new Integer[] { 1, null, 2, 3 });
List<Integer> list=  prorderTraversaltree;	List<Integer> list = preorderTraversal(tree);
Assertions..assertArrayEqualsnewInteger 11, 2, 3 f,, list..toArraynw Integer0;	Assertions.assertArrayEquals(new Integer[] { 1, 2, 3 }, list.toArray(new Integer[0]));
}	}
public static List<Integer> preorderTraversalTreeNode root {	public static List<Integer> preorderTraversal(TreeNode root) {
List<Integer>list =  new ArraLst<>;	List<Integer> list = new ArrayList<>();
if root == nullf  return list;	if (root == null) return list;
backtrackroot, list;	backtrack(root, list);
return list;	return list;
}	}
public  static void  backtrackTreeNode  root, ListInteger list {	public static void backtrack(TreeNode root, List<Integer> list) {
if root ==null return;	if (root == null) return;
list.addroot.val;	list.add(root.val);
f oot.lft != null  backtrackroot..left, list;	if (root.left != null) backtrack(root.left, list);
if root..right!= null backtrackroot.right, list;	if (root.right != null) backtrack(root.right, list);
}	}
	}
