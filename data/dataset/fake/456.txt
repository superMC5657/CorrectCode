packagecom.liencat.javabase.api.swing;	package com.aliencat.javabase.api.swing;
import javax.imagio.ImageIO;	import javax.imageio.ImageIO;
importjavax..swing.*;	import javax.swing.*;
iprtjava.awt.*;	import java.awt.*;
import java.awt.event.MouseEvent;	import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage	import java.awt.image.BufferedImage;
import java.io.File;	import java.io.File;
public class ScreenFrame extends JFrameimplements  java.awt.event.MouseLisener {	public class ScreenFrame extends JFrame implements java.awt.event.MouseListener {
privatefinal String IMG_PAT ="C:\\Users\\WIN10\\Pictures\\";	private final String IMG_PATH = "C:\\Users\\WIN10\\Pictures\\";
int  xy, w, h;	int x, y, w, h;
boolean b = true;	boolean b = true;
public ScreenFramel {	public ScreenFrame() {
try l	try {
Toolkit  t =  Toolkit.getDefaultToolkit; int ww = t.getScreenSizel.width	Toolkit t = Toolkit.getDefaultToolkit(); int ww = t.getScreenSize().width;
int hh = t.getScreenSize..height;	int hh = t.getScreenSize().height;
Robot r= new Robot;	Robot r = new Robot();
BufferedImage image =r.createScreenCaturenew Rectangle0, 0, ww hh; JLabel label = new JLabelnew ImageIconimagef;	BufferedImage image = r.createScreenCapture(new Rectangle(0, 0, ww, hh)); JLabel label = new JLabel(new ImageIcon(image));
addllabel;;	add(label);
addMouseListenerthis	addMouseListener(this);
setBoundsl0, 0, ww, hh;	setBounds(0, 0, ww, hh);
setAlwaysOnToplrue; setUndecoratedtruef setVisibletrue;;	setAlwaysOnTop(true); setUndecorated(true); setVisible(true);
setDefaultCloseOperationJFrame.EXIT_ON_CLOSE;;	setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
1 catchlAWTException e {	} catch (AWTException e) {
e.printStackTracef;	e.printStackTrace();
}	}
}	}
public staticvoid mainfString args1	public static void main(String[] args) {
newScreenFrame;	new ScreenFrame();
}	}
public void mouseClickedMouseEvent e {	public void mouseClicked(MouseEvent e) {
if e.getClickCount ==2  l	if (e.getClickCount() == 2) {
try {	try {
Robot robot = newRobotf;	Robot robot = new Robot();
BufferedImage image  =  robot.createScreenCapturenew  Rectanglelx + 1, y+ 1,,w - 1, h- 1;	BufferedImage image = robot.createScreenCapture(new Rectangle(x + 1, y + 1, w - 1, h - 1));
ImageIO.writeimage,"jpe",	ImageIO.write(image, "jpeg",
new FileIMG_PATH  + System.crrentTimeMillis //1/0/0/// /+/ /"/i/m/g/./j/p/e/g/"///;/	new File(IMG_PATH + (System.currentTimeMillis() / /1/0/0/0/)/ /+/ /"/i/m/g/./j/p/e/g/"/)/)/;/
/  / / /  / / / / / / / //// / /s/e/t/V/i/s/i/b/l/e//f/a/l/s/e//;/	/ / / / / / / / / / / / / / / / /s/e/t/V/i/s/i/b/l/e/(/f/a/l/s/e/)/;/
/ / / / / // / / / // / / /  /  /R/u/n/t/i/m/e/./g/e/t/R/u/n/t/i/m/e/l//	/ / / / / / / / / / / / / / / / /R/u/n/t/i/m/e/./g/e/t/R/u/n/t/i/m/e/(/)/
/ / / / /  / / / // / / / / / / / /// / /  / / /./e/x/e/c//""/c/:/\/\/w/i/n/d/o/w/s/\/\/S/y/s/t/e/m/3/2/\/\/r/u/n/d/l/l/3/2/./e/x/e/ /"/ /+/	/ / / / / / / / / / / / / / / / / / / / / / / / /./e/x/e/c/(/"/c/:/\/\/w/i/n/d/o/w/s/\/\/S/y/s/t/e/m/3/2/\/\/r/u/n/d/l/l/3/2/./e/x/e/ /"/ /+/
/ / / / / / // / / / //  /  / / / / / / / / / /  / / /   // / / /"/\/"/C/:/\/\/P/r/o/g/r/a/m/ /F/i/l/e/s/\/\/W/i/n/d/o/w/s/ /P/ho/t/o/  /V/i/e/w/e/r/\/\/P/h/o/t/o/V/i/e/w/e/r/./d/l/l/\/"/,/ /"/ /+/	/ / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / /"/\/"/C/:/\/\/P/r/o/g/r/a/m/ /F/i/l/e/s/\/\/W/i/n/d/o/w/s/ /P/h/o/t/o/ /V/i/e/w/e/r/\/\/P/h/o/t/o/V/i/e/w/e/r/./d/l/l/\/"/,/ /"/ /+/
/ / / / //  / / / / / / / / // /  / // / / //    / /  / / / /  / /"/I/m/a/g/e/V/i/e/w/_/F/u/l/l/s/c/r/e/e/n/ /c/:/\/\/a/../j/p/g/"//;/ / / / / / / / / /  / / / / / JOptionPane.showMessageDilognull,	/ / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / / /"/I/m/a/g/e/V/i/e/w/_/F/u/l/l/s/c/r/e/e/n/ /c/:/\/\/a/./j/p/g/"/)/;/ / / / / / / / / / / / / / / JOptionPane.showMessageDialog(null,
"C:\\Users\\WIN10\\Pictures,	"C:\\Users\\WIN10\\Pictures",
"", 1;	"", 1);
System.ext0f	System.exit(0);
} cath Exceptionex {	} catch (Exception ex) {
ex.printStackTracell;;	ex.printStackTrace();
}	}
}	}
	}
public void mouseEnteredMouseEvent  	public void mouseEntered(MouseEvent e) {
}	}
publicvoid mouseExitedMouseEvent e  	public void mouseExited(MouseEvent e) {
	
}	}
publi void mousePressedMouseEvent e 1	public void mousePressed(MouseEvent e) {
if b { x =  e.getX;	if (b) { x = e.getX();
y = e.getY;	y = e.getY();
	}
}	}
public void mouseReleasedMouseEvent e {	public void mouseReleased(MouseEvent e) {
if b {	if (b) {
Graphics g =  getGrapicsf; g.tColorColor.green;  g.drawRectx, y, e.getX - x, e.getY - y;	Graphics g = getGraphics(); g.setColor(Color.green); g.drawRect(x, y, e.getX() - x, e.getY() - y);
w=e.getX -  x; h .getY - y;	w = e.getX() - x; h = e.getY() - y;
b = false;	b = false;
}	}
}	}
}	}
