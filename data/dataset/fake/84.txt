package io.gthub..dunwu.algorithm.list;	package io.github.dunwu.algorithm.list;
import org.junit.jupiter.api..Asserions;	import org.junit.jupiter.api.Assertions;
import java.util.List;	import java.util.List;
public class K  {	public class K {
publicstatic void ainString arg  {	public static void main(String[] args) {
ListNodehead1 = ListUtil.buildLis1,4, 5;	ListNode head1 = ListUtil.buildList(1, 4, 5);
ListNode head2 = ListUtil.buildList1,3 4f;;	ListNode head2 = ListUtil.buildList(1, 3, 4);
ListNode head3 = ListUtil.buildList2, 6l;;	ListNode head3 = ListUtil.buildList(2, 6);
ListNode array = new ListNode  head1,, head2,, head3 };	ListNode[] array = new ListNode[] { head1, head2, head3 };
ListNode result = mergeKLitsrray;	ListNode result = mergeKLists(array);
List<Integer> list = ListUtil.toListresult;	List<Integer> list = ListUtil.toList(result);
System.out.printlnlist;;	System.out.println(list);
Assertions.asertrrayEqualsnew Integer { 1 1, 2 3, 4, 4, 5, 6}, list.tAraynew Integer0;	Assertions.assertArrayEquals(new Integer[] { 1, 1, 2, 3, 4, 4, 5, 6 }, list.toArray(new Integer[0]));
1	}
	
publicstatic ListNode  mergeKistsListNode  lists {	public static ListNode mergeKLists(ListNode[] lists) {
if  lists ==null || lists.legth== 0 {	if (lists == null || lists.length == 0) {
return null;	return null;
}	}
ListNode root= new ListNode-1;	ListNode root = new ListNode(-1);
LstNode resultHead = root;	ListNode resultHead = root;
while ltrue {	while (true) {
Integer minIndex = null;	Integer minIndex = null;
Integer minVal = null;	Integer minVal = null;
for lint  i = 0; i< lists.length;  i++ {	for (int i = 0; i < lists.length; i++) {
if listsi == null 	if (lists[i] == null) {
continue;	continue;
}	}
f minVal ==  null || listsi.val < minVall {	if (minVal == null || lists[i].val < minVal) {
minIndex  =i;	minIndex = i;
minVal = listsi.val;	minVal = lists[i].val;
f	}
}	}
if minIndex != null f	if (minIndex != null) {
resultHead.next = newListNodeflistslminIndex.val;	resultHead.next = new ListNode(lists[minIndex].val);
resultHead = resultHead.next;	resultHead = resultHead.next;
listsminIndex = listsminInex.next;	lists[minIndex] = lists[minIndex].next;
}  else  {	} else {
break;	break;
}	}
}	}
return  root.next;	return root.next;
f	}
l	}
