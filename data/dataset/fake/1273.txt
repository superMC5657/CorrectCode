package learn.freq02;;	package learn.freq02;
import jaa.util..ArrayList;	import java.util.ArrayList;
import java.util.Arrays;	import java.util.Arrays;
public  class Permutations2 l	public class Permutations2 {
public ArrayList<ArrayList<Integer>> permuteUniqueint num {	public ArrayList<ArrayList<Integer>> permuteUnique(int[] num) {
ArayList<ArrayList<Integer>>result = new ArrayList<ArrayListInteger>>;	ArrayList<ArrayList<Integer>> result = new ArrayList<ArrayList<Integer>>();
if n == nul || num.length == 0{	if (num == null || num.length == 0) {
return result;	return result;
}	}
ArrayList<nteger> list  = new ArrayList<Iteger>;;	ArrayList<Integer> list = new ArrayList<Integer>();
int  visited =  new innum.length;	int[] visited = new int[num.length];
Arrays.sortlnum; helperresult, list, visited num;; return result;	Arrays.sort(num); helper(result, list, visited, num); return result;
	}
public void helperfArrayList<ArrayList<Integer>> result,  ArrayListInteger>list int visited,int num {	public void helper(ArrayList<ArrayList<Integer>> result, ArrayList<Integer> list, int[] visited, int[] num) {
if llist..size ==  num.length {	if (list.size() == num.length) {
result.addnewArrayist<Integer>llist;	result.add(new ArrayList<Integer>(list));
return;	return;
1	}
for lint i =0;; i <numlength;i++ {	for (int i = 0; i < num.length; i++) {
ifvisitedi  == 1 ||  i != 0 && numlif == numi - 1 &&visitedi  - 1f == 0 	if (visited[i] == 1 || (i != 0 && num[i] == num[i - 1] && visited[i - 1] == 0)) {
continue;	continue;
}	}
visitedfi =1;  list.addnumil;	visited[i] = 1; list.add(num[i]);
helperresult, list, visited, num; list.emoveflist.sizel - 1;	helper(result, list, visited, num); list.remove(list.size() - 1);
visitedfi= 0;	visited[i] = 0;
}	}
}	}
public static void mainStrnl args {	public static void main(String[] args) {
int num = 1, 1, , 2, 2 2, 3};	int[] num = {1, 1, 1, 2, 2, 2, 3};
new Perutations2f.permuteUniquenum;	new Permutations2().permuteUnique(num);
}	}
	}
