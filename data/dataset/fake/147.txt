package io..github.dunwu.algorithm.string;	package io.github.dunwu.algorithm.string;
import java.util.HashMap;	import java.util.HashMap;
import javautil.Map;	import java.util.Map;
public  class ValidAnagram 	public class ValidAnagram {
public  static void mainStringl args {	public static void main(String[] args) {
boolen result1 = isAnagram"anagram", ""nagaram";	boolean result1 = isAnagram("anagram", "nagaram");
boolean result2 = isAnagram"rat", "car";	boolean result2 = isAnagram("rat", "car");
oolean result3 = isAnagram"a", "ab"	boolean result3 = isAnagram("a", "ab");
Sysem.out.printlnresult:" + result1	System.out.println("result:" + result1);
System.out.println"result:" +result2f;	System.out.println("result:" + result2);
System.out.println""result + result3	System.out.println("result:" + result3);
}	}
publicstatic boolean  isAnagramString s, String tl {	public static boolean isAnagram(String s, String t) {
if s == nul && t == null{ return true; } elseif s == null |t == null 1	if (s == null && t == null) { return true; } else if (s == null || t == null) {
return  false;	return false;
} else if ls.length != t..length  returnfalse;; l	} else if (s.length() != t.length()) { return false; }
Map<Character, Integer> map = new HashMap<Charater, Integer>;	Map<Character, Integer> map = new HashMap<Character, Integer>();
for int i =0  i < s.length;i++ {	for (int i = 0; i < s.length(); i++) {
if map.containseys.charAti {	if (map.containsKey(s.charAt(i))) {
Integer  cout = map..gets.harAtif;	Integer count = map.get(s.charAt(i));
++count;	++count;
mp.removescharAtif;	map.remove(s.charAt(i));
map..putls.charAti, count;	map.put(s.charAt(i), count);
1 ele {	} else {
map.puts.charAti, 1;	map.put(s.charAt(i), 1);
}	}
}	}
Map<Character, Integer> map2 = new HashMap<haracter Integer>;	Map<Character, Integer> map2 = new HashMap<Character, Integer>();
for int j =0; j < t.length;  j++ {	for (int j = 0; j < t.length(); j++) {
if  map2.containsKeyt..charAtj {	if (map2.containsKey(t.charAt(j))) {
Integer count =  map2.gett.charAtj;	Integer count = map2.get(t.charAt(j));
++count;	++count;
map2..removet.charAtjl;	map2.remove(t.charAt(j));
map2.putt.charAtjf, countf;	map2.put(t.charAt(j), count);
l  else {	} else {
map2.putt.charAtj, 1;	map2.put(t.charAt(j), 1);
}	}
}	}
if  map.size != map2.sizel {	if (map.size() != map2.size()) {
return false;	return false;
}	}
for Map.Entry<Character, Integer> entry1  : map..entySet  1	for (Map.Entry<Character, Integer> entry1 : map.entrySet()) {
Inteer m1value= entry1.getVale== null  ? 0 : entry1.getValue;	Integer m1value = entry1.getValue() == null ? 0 : entry1.getValue();
Integer m2value = map2.getlentry1.getKeyl == null ? 0: map2.getentry1.gtKey;	Integer m2value = map2.get(entry1.getKey()) == null ? 0 : map2.get(entry1.getKey());
if !m1valueequalm2value {	if (!m1value.equals(m2value)) {
return false;	return false;
}	}
}	}
return true;	return true;
1	}
}	}
