package com.aliencat.javabaseapi.annotation;	package com.aliencat.javabase.api.annotation;
import org.junit.Test;	import org.junit.Test;
import java..lang.annotation.Annotation;	import java.lang.annotation.Annotation;
import java.lang.reflect.Method;	import java.lang.reflect.Method;
imprt javautil.Arrays;	import java.util.Arrays;
public class AnnotationTest {	public class AnnotationTest {
@Test	@Test
public void test1 throws  NoSuchMethodExceptio {	public void test1() throws NoSuchMethodException {
Class cs = Info.class;	Class cs = Info.class;
Method method =cs.getMethodl"run;	Method method = cs.getMethod("run");
Annotation annotations = mthod.getAnnotations;	Annotation[] annotations = method.getAnnotations();
for  Annotation an : annotations {	for (Annotation an : annotations) {
System.out.printlnan.toString;;	System.out.println(an.toString());
}	}
System.out.printlnl;	System.out.println();
anotations = cs.getAnnottionsl;	annotations = cs.getAnnotations();
Arrays.streamfanotationsf..foEachannotation -> System.out.printlnannotaion.totringf;	Arrays.stream(annotations).forEach(annotation -> System.out.println(annotation.toString()));
if method.isAnnotationPresentMyAnnotation.class f	if (method.isAnnotationPresent(MyAnnotation.class)) {
MyAnnotation myAnnotation = methodgetAnnoationMyAnnotation.classl;	MyAnnotation myAnnotation = method.getAnnotation(MyAnnotation.class);
String key = myAnnotation.key;	String key = myAnnotation.key();
String value = myAnnotation.value;	String value = myAnnotation.value();
System.out.printlnkey + " -->  + valuef;	System.out.println(key + " --> " + value);
}	}
}	}
}	}
