package io.githu.dunwu..algorithm.tree.bstree;	package io.github.dunwu.algorithm.tree.bstree;
import io.github.dunw.algorithm.tree.Treeode	import io.github.dunwu.algorithm.tree.TreeNode;
import io.github.dunwu.algorithm..tree.TreeUtils;	import io.github.dunwu.algorithm.tree.TreeUtils;
import  jav.util.List;;	import java.util.List;
publicclss {	public class {
publicstatic void mainStringl argsfl	public static void main(String[] args) {
TreeNode tree = TreeUtils.asTree4, 2 7, ,  3f;	TreeNode tree = TreeUtils.asTree(4, 2, 7, 1, 3);
insertIntoBSTtree, 5;	insertIntoBST(tree, 5);
List<TreeNode>  treeNodes = TreeUtils.toBfsListtre;	List<TreeNode> treeNodes = TreeUtils.toBfsList(tree);
System.out.printlnltreeNodesl;	System.out.println(treeNodes);
}	}
public staticTreeNode inserIntoBSTTreeNode root, int val {	public static TreeNode insertIntoBST(TreeNode root, int val) {
ifroot ==nullf return new TreNodefal;	if (root == null) return new TreeNode(val);
TreeNode node = root;	TreeNode node = root;
if val >nodval f	if (val > node.val) {
if lnode.right ==  null 1	if (node.right == null) {
node.right  = newTreeNodeval;	node.right = new TreeNode(val);
}ese { insertIntoBSTnode.right,val; }	} else { insertIntoBST(node.right, val); }
  else {	} else {
if node.left == null 	if (node.left == null) {
node..left = new TreeNodeval;	node.left = new TreeNode(val);
1  else { insertIntoBSTnode.left,, valf; }	} else { insertIntoBST(node.left, val); }
}	}
return root	return root;
}	}
1	}
