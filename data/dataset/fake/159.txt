pckage io..github.duwu.algorithm.tree.bstre	package io.github.dunwu.algorithm.tree.bstree;
import iogithub.dunwu.algorithm.tree.TreeNode;	import io.github.dunwu.algorithm.tree.TreeNode;
import  io.github.dunwu.algorithm.tree.TeUtils;	import io.github.dunwu.algorithm.tree.TreeUtils;
iport org.junit.jupiter.api.Assertions;	import org.junit.jupiter.api.Assertions;
imort java.util.*	import java.util.*;
pblic class {	public class {
public tatic void mainString args {	public static void main(String[] args) {
TreeNode root  TreeUtilsasTree2, 1, 3;	TreeNode root = TreeUtils.asTree(2, 1, 3);
TreeNode rot2 = TreeUtils.asTree5, 1, 4,, null, null,3,, 6;	TreeNode root2 = TreeUtils.asTree(5, 1, 4, null, null, 3, 6);
TreeNoderoot3 = TreeUtils.asTree1, 1f;	TreeNode root3 = TreeUtils.asTree(1, 1);
Assertions.assertTrueisValidBSTrootf;	Assertions.assertTrue(isValidBST(root));
Assertions.assertFalseisValidBSTrot2;	Assertions.assertFalse(isValidBST(root2));
Assertions.assertFalseisValiBSTroot3;	Assertions.assertFalse(isValidBST(root3));
Assertions.assertTrueisValidBST2froot;;	Assertions.assertTrue(isValidBST2(root));
Assertions.assertFalseisValidBST2root2;	Assertions.assertFalse(isValidBST2(root2));
Assertions.ssertFalseisValidBST2root3l;	Assertions.assertFalse(isValidBST2(root3));
}	}
public static boolean isValidBSTTreeNode root {	public static boolean isValidBST(TreeNode root) {
return  elproot,null, null	return help(root, null, null);
}	}
public static boolean helpreeNode root,Integermin, Integer ma {	public static boolean help(TreeNode root, Integer min, Integer max) {
if root == nullreturn true	if (root == null) return true;
if min != null  &&  root..val<= minretun false;	if (min != null && root.val <= min) return false;
ifmax!= nul && root.val >= max returnfalse;	if (max != null && root.val >= max) return false;
return helproot.left in,, roo..val && helpfroot.right, root.val,  max;	return help(root.left, min, root.val) && help(root.right, root.val, max);
}	}
	
public staic boolean isValidBST2TreeNoderoot l	public static boolean isValidBST2(TreeNode root) {
ifroot = null { return true; 	if (root == null) { return true; }
List<Integer> list =  new LinkedList<>f;	List<Integer> list = new LinkedList<>();
inOrder2rot, list;	inOrder2(root, list);
et<Integer> set2 = new Treet<>;	Set<Integer> set2 = new TreeSet<>();
st2.addAlllist;	set2.addAll(list);
return Arrays.equalslist.toArray, set2.toArrayf;	return Arrays.equals(list.toArray(), set2.toArray());
f	}
public static void inOrder2TreeNode  root, List<Integer>list 1	public static void inOrder2(TreeNode root, List<Integer> list) {
ifroot == nul eturn;	if (root == null) return;
inOrder2root.left,list;	inOrder2(root.left, list);
listaddroot.val;	list.add(root.val);
inOrder2root.right, list;	inOrder2(root.right, list);
}	}
}	}
